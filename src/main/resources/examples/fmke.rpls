// Operations

def createRx(doc: DocId, patient: PatientId, pharma: PharmaId) {
  var c: RxId
  c = new RxId
  call Rx_doc_assign(c, doc)
  call Rx_patient_assign(c, patient)
  call Rx_pharma_assign(c, pharma)
  call Rx_isSealed_assign(c, false)  // initial value
  call Rx_numProcessed(c, 0)          // initial value

  call doctor_prescriptions_add(doc, c)
  return c
}

def addMedication(rx: RxId, medname: String, qty: int) {
  if (! Rx_isSealed_get(rx) ) {
    call Rx_medications_assign(rx, medname, qty)
  }
}

def sealRx(rx: RxId) {
  // precond rx.medications != emptyset

  var p : PatientId
  p = Rx_patient_get(rx)
  var d : DocId
  d = Rx_doc_get(rx)

  call patient_prescriptions_add(p, rx)
  call doctor_prescriptions_add(d, rx)
  call Rx_isSealed_assign(rx,true)
}

def processRx(rx: RxId) {
  if(Rx_isSealed_get(rx) && Rx_numProcessed_get(rx) == 0) {
  // assert rx.medications != emptyset
    call Rx_numProcessed_assign(Rx_numProcessed_get(rx) + 1)
    // print Rx_medications(rx)
  }
}

def getMedicationsQty(rx: RxID, m: String) {
  return Rx_medications_get(rx, m)
}


// Datatypes

type String

// type Med = med(name: String, count: int)

idtype DocId
idtype PatientId
idtype PharmaId
idtype RxId

crdt doctor: Map[DocId, {
  name: Register[String],
  prescriptions: Set_aw[RxId]
}]

crdt patient: Map[PatientId, {
  name: Register[String],
  prescriptions: Set_aw[RxID]
}]

crdt pharma: Map[PharmaId, {
  name: Register[String],
  prescriptions: Set_aw[RxId]
}]

crdt Rx: Map[RxId, {
  doc: Register[DocId],
  patient: Register[PatientId]
  pharma: Register[PharmaId],
  medications: Map[String, Register[int]],
  isSealed: Register[boolean],
  numProcessed: Register[int]
}]
