/*
This is an artificial example.
In a sequential setting this program would ensure, that at most one element can be in the set.
However, this is not true in the context of weak consistency.
Here the size of the set can grow as big as the maximum number of concurrent invocations.
*/

type Element

def store(e: Element) {
    atomic {
        if (elementSet_isEmpty()) {
            call elementSet_add(e)
        }
    }
}


operation elementSet_add(e: Element)
operation elementSet_remove(e: Element)

query elementSet_contains(e: Element): boolean =
    exists a: callId ::
           a is visible
        && a.op == elementSet_add(e)
        && (forall r: callId :: r is visible && r.op == elementSet_remove(e) ==> !(a happened before r))

query elementSet_isEmpty(): boolean = !exists e: Element :: elementSet_contains(e)

// invariant: less than 3 elements in the set
invariant !(exists e1: Element, e2: Element, e3: Element::
       e1 != e2
    && e1 != e3
    && e2 != e3
    && elementSet_contains(e1)
    && elementSet_contains(e2)
    && elementSet_contains(e3)
)