/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.nyu.acsys.CVC4;

public final class Kind {
  public final static Kind UNDEFINED_KIND = new Kind("UNDEFINED_KIND", CVC4JNI.UNDEFINED_KIND_get());
  public final static Kind NULL_EXPR = new Kind("NULL_EXPR");
  public final static Kind SORT_TAG = new Kind("SORT_TAG");
  public final static Kind SORT_TYPE = new Kind("SORT_TYPE");
  public final static Kind UNINTERPRETED_CONSTANT = new Kind("UNINTERPRETED_CONSTANT");
  public final static Kind ABSTRACT_VALUE = new Kind("ABSTRACT_VALUE");
  public final static Kind BUILTIN = new Kind("BUILTIN");
  public final static Kind FUNCTION = new Kind("FUNCTION");
  public final static Kind APPLY = new Kind("APPLY");
  public final static Kind EQUAL = new Kind("EQUAL");
  public final static Kind DISTINCT = new Kind("DISTINCT");
  public final static Kind VARIABLE = new Kind("VARIABLE");
  public final static Kind BOUND_VARIABLE = new Kind("BOUND_VARIABLE");
  public final static Kind SKOLEM = new Kind("SKOLEM");
  public final static Kind SEXPR = new Kind("SEXPR");
  public final static Kind LAMBDA = new Kind("LAMBDA");
  public final static Kind CHOICE = new Kind("CHOICE");
  public final static Kind CHAIN = new Kind("CHAIN");
  public final static Kind CHAIN_OP = new Kind("CHAIN_OP");
  public final static Kind TYPE_CONSTANT = new Kind("TYPE_CONSTANT");
  public final static Kind FUNCTION_TYPE = new Kind("FUNCTION_TYPE");
  public final static Kind SEXPR_TYPE = new Kind("SEXPR_TYPE");
  public final static Kind CONST_BOOLEAN = new Kind("CONST_BOOLEAN");
  public final static Kind NOT = new Kind("NOT");
  public final static Kind AND = new Kind("AND");
  public final static Kind IMPLIES = new Kind("IMPLIES");
  public final static Kind OR = new Kind("OR");
  public final static Kind XOR = new Kind("XOR");
  public final static Kind ITE = new Kind("ITE");
  public final static Kind APPLY_UF = new Kind("APPLY_UF");
  public final static Kind BOOLEAN_TERM_VARIABLE = new Kind("BOOLEAN_TERM_VARIABLE");
  public final static Kind CARDINALITY_CONSTRAINT = new Kind("CARDINALITY_CONSTRAINT");
  public final static Kind COMBINED_CARDINALITY_CONSTRAINT = new Kind("COMBINED_CARDINALITY_CONSTRAINT");
  public final static Kind PARTIAL_APPLY_UF = new Kind("PARTIAL_APPLY_UF");
  public final static Kind CARDINALITY_VALUE = new Kind("CARDINALITY_VALUE");
  public final static Kind HO_APPLY = new Kind("HO_APPLY");
  public final static Kind PLUS = new Kind("PLUS");
  public final static Kind MULT = new Kind("MULT");
  public final static Kind NONLINEAR_MULT = new Kind("NONLINEAR_MULT");
  public final static Kind MINUS = new Kind("MINUS");
  public final static Kind UMINUS = new Kind("UMINUS");
  public final static Kind DIVISION = new Kind("DIVISION");
  public final static Kind DIVISION_TOTAL = new Kind("DIVISION_TOTAL");
  public final static Kind INTS_DIVISION = new Kind("INTS_DIVISION");
  public final static Kind INTS_DIVISION_TOTAL = new Kind("INTS_DIVISION_TOTAL");
  public final static Kind INTS_MODULUS = new Kind("INTS_MODULUS");
  public final static Kind INTS_MODULUS_TOTAL = new Kind("INTS_MODULUS_TOTAL");
  public final static Kind ABS = new Kind("ABS");
  public final static Kind DIVISIBLE = new Kind("DIVISIBLE");
  public final static Kind POW = new Kind("POW");
  public final static Kind EXPONENTIAL = new Kind("EXPONENTIAL");
  public final static Kind SINE = new Kind("SINE");
  public final static Kind COSINE = new Kind("COSINE");
  public final static Kind TANGENT = new Kind("TANGENT");
  public final static Kind COSECANT = new Kind("COSECANT");
  public final static Kind SECANT = new Kind("SECANT");
  public final static Kind COTANGENT = new Kind("COTANGENT");
  public final static Kind ARCSINE = new Kind("ARCSINE");
  public final static Kind ARCCOSINE = new Kind("ARCCOSINE");
  public final static Kind ARCTANGENT = new Kind("ARCTANGENT");
  public final static Kind ARCCOSECANT = new Kind("ARCCOSECANT");
  public final static Kind ARCSECANT = new Kind("ARCSECANT");
  public final static Kind ARCCOTANGENT = new Kind("ARCCOTANGENT");
  public final static Kind SQRT = new Kind("SQRT");
  public final static Kind DIVISIBLE_OP = new Kind("DIVISIBLE_OP");
  public final static Kind CONST_RATIONAL = new Kind("CONST_RATIONAL");
  public final static Kind LT = new Kind("LT");
  public final static Kind LEQ = new Kind("LEQ");
  public final static Kind GT = new Kind("GT");
  public final static Kind GEQ = new Kind("GEQ");
  public final static Kind IS_INTEGER = new Kind("IS_INTEGER");
  public final static Kind TO_INTEGER = new Kind("TO_INTEGER");
  public final static Kind TO_REAL = new Kind("TO_REAL");
  public final static Kind PI = new Kind("PI");
  public final static Kind BITVECTOR_TYPE = new Kind("BITVECTOR_TYPE");
  public final static Kind CONST_BITVECTOR = new Kind("CONST_BITVECTOR");
  public final static Kind BITVECTOR_CONCAT = new Kind("BITVECTOR_CONCAT");
  public final static Kind BITVECTOR_AND = new Kind("BITVECTOR_AND");
  public final static Kind BITVECTOR_COMP = new Kind("BITVECTOR_COMP");
  public final static Kind BITVECTOR_OR = new Kind("BITVECTOR_OR");
  public final static Kind BITVECTOR_XOR = new Kind("BITVECTOR_XOR");
  public final static Kind BITVECTOR_NOT = new Kind("BITVECTOR_NOT");
  public final static Kind BITVECTOR_NAND = new Kind("BITVECTOR_NAND");
  public final static Kind BITVECTOR_NOR = new Kind("BITVECTOR_NOR");
  public final static Kind BITVECTOR_XNOR = new Kind("BITVECTOR_XNOR");
  public final static Kind BITVECTOR_MULT = new Kind("BITVECTOR_MULT");
  public final static Kind BITVECTOR_NEG = new Kind("BITVECTOR_NEG");
  public final static Kind BITVECTOR_PLUS = new Kind("BITVECTOR_PLUS");
  public final static Kind BITVECTOR_SUB = new Kind("BITVECTOR_SUB");
  public final static Kind BITVECTOR_UDIV = new Kind("BITVECTOR_UDIV");
  public final static Kind BITVECTOR_UREM = new Kind("BITVECTOR_UREM");
  public final static Kind BITVECTOR_SDIV = new Kind("BITVECTOR_SDIV");
  public final static Kind BITVECTOR_SMOD = new Kind("BITVECTOR_SMOD");
  public final static Kind BITVECTOR_SREM = new Kind("BITVECTOR_SREM");
  public final static Kind BITVECTOR_UDIV_TOTAL = new Kind("BITVECTOR_UDIV_TOTAL");
  public final static Kind BITVECTOR_UREM_TOTAL = new Kind("BITVECTOR_UREM_TOTAL");
  public final static Kind BITVECTOR_ASHR = new Kind("BITVECTOR_ASHR");
  public final static Kind BITVECTOR_LSHR = new Kind("BITVECTOR_LSHR");
  public final static Kind BITVECTOR_SHL = new Kind("BITVECTOR_SHL");
  public final static Kind BITVECTOR_ULE = new Kind("BITVECTOR_ULE");
  public final static Kind BITVECTOR_ULT = new Kind("BITVECTOR_ULT");
  public final static Kind BITVECTOR_UGE = new Kind("BITVECTOR_UGE");
  public final static Kind BITVECTOR_UGT = new Kind("BITVECTOR_UGT");
  public final static Kind BITVECTOR_SLE = new Kind("BITVECTOR_SLE");
  public final static Kind BITVECTOR_SLT = new Kind("BITVECTOR_SLT");
  public final static Kind BITVECTOR_SGE = new Kind("BITVECTOR_SGE");
  public final static Kind BITVECTOR_SGT = new Kind("BITVECTOR_SGT");
  public final static Kind BITVECTOR_ULTBV = new Kind("BITVECTOR_ULTBV");
  public final static Kind BITVECTOR_SLTBV = new Kind("BITVECTOR_SLTBV");
  public final static Kind BITVECTOR_REDAND = new Kind("BITVECTOR_REDAND");
  public final static Kind BITVECTOR_REDOR = new Kind("BITVECTOR_REDOR");
  public final static Kind BITVECTOR_ITE = new Kind("BITVECTOR_ITE");
  public final static Kind BITVECTOR_TO_NAT = new Kind("BITVECTOR_TO_NAT");
  public final static Kind BITVECTOR_ACKERMANNIZE_UDIV = new Kind("BITVECTOR_ACKERMANNIZE_UDIV");
  public final static Kind BITVECTOR_ACKERMANNIZE_UREM = new Kind("BITVECTOR_ACKERMANNIZE_UREM");
  public final static Kind BITVECTOR_EAGER_ATOM = new Kind("BITVECTOR_EAGER_ATOM");
  public final static Kind BITVECTOR_BITOF_OP = new Kind("BITVECTOR_BITOF_OP");
  public final static Kind BITVECTOR_BITOF = new Kind("BITVECTOR_BITOF");
  public final static Kind BITVECTOR_EXTRACT_OP = new Kind("BITVECTOR_EXTRACT_OP");
  public final static Kind BITVECTOR_EXTRACT = new Kind("BITVECTOR_EXTRACT");
  public final static Kind BITVECTOR_REPEAT_OP = new Kind("BITVECTOR_REPEAT_OP");
  public final static Kind BITVECTOR_REPEAT = new Kind("BITVECTOR_REPEAT");
  public final static Kind BITVECTOR_ROTATE_LEFT_OP = new Kind("BITVECTOR_ROTATE_LEFT_OP");
  public final static Kind BITVECTOR_ROTATE_LEFT = new Kind("BITVECTOR_ROTATE_LEFT");
  public final static Kind BITVECTOR_ROTATE_RIGHT_OP = new Kind("BITVECTOR_ROTATE_RIGHT_OP");
  public final static Kind BITVECTOR_ROTATE_RIGHT = new Kind("BITVECTOR_ROTATE_RIGHT");
  public final static Kind BITVECTOR_SIGN_EXTEND_OP = new Kind("BITVECTOR_SIGN_EXTEND_OP");
  public final static Kind BITVECTOR_SIGN_EXTEND = new Kind("BITVECTOR_SIGN_EXTEND");
  public final static Kind BITVECTOR_ZERO_EXTEND_OP = new Kind("BITVECTOR_ZERO_EXTEND_OP");
  public final static Kind BITVECTOR_ZERO_EXTEND = new Kind("BITVECTOR_ZERO_EXTEND");
  public final static Kind INT_TO_BITVECTOR_OP = new Kind("INT_TO_BITVECTOR_OP");
  public final static Kind INT_TO_BITVECTOR = new Kind("INT_TO_BITVECTOR");
  public final static Kind CONST_FLOATINGPOINT = new Kind("CONST_FLOATINGPOINT");
  public final static Kind CONST_ROUNDINGMODE = new Kind("CONST_ROUNDINGMODE");
  public final static Kind FLOATINGPOINT_TYPE = new Kind("FLOATINGPOINT_TYPE");
  public final static Kind FLOATINGPOINT_FP = new Kind("FLOATINGPOINT_FP");
  public final static Kind FLOATINGPOINT_EQ = new Kind("FLOATINGPOINT_EQ");
  public final static Kind FLOATINGPOINT_ABS = new Kind("FLOATINGPOINT_ABS");
  public final static Kind FLOATINGPOINT_NEG = new Kind("FLOATINGPOINT_NEG");
  public final static Kind FLOATINGPOINT_PLUS = new Kind("FLOATINGPOINT_PLUS");
  public final static Kind FLOATINGPOINT_SUB = new Kind("FLOATINGPOINT_SUB");
  public final static Kind FLOATINGPOINT_MULT = new Kind("FLOATINGPOINT_MULT");
  public final static Kind FLOATINGPOINT_DIV = new Kind("FLOATINGPOINT_DIV");
  public final static Kind FLOATINGPOINT_FMA = new Kind("FLOATINGPOINT_FMA");
  public final static Kind FLOATINGPOINT_SQRT = new Kind("FLOATINGPOINT_SQRT");
  public final static Kind FLOATINGPOINT_REM = new Kind("FLOATINGPOINT_REM");
  public final static Kind FLOATINGPOINT_RTI = new Kind("FLOATINGPOINT_RTI");
  public final static Kind FLOATINGPOINT_MIN = new Kind("FLOATINGPOINT_MIN");
  public final static Kind FLOATINGPOINT_MAX = new Kind("FLOATINGPOINT_MAX");
  public final static Kind FLOATINGPOINT_MIN_TOTAL = new Kind("FLOATINGPOINT_MIN_TOTAL");
  public final static Kind FLOATINGPOINT_MAX_TOTAL = new Kind("FLOATINGPOINT_MAX_TOTAL");
  public final static Kind FLOATINGPOINT_LEQ = new Kind("FLOATINGPOINT_LEQ");
  public final static Kind FLOATINGPOINT_LT = new Kind("FLOATINGPOINT_LT");
  public final static Kind FLOATINGPOINT_GEQ = new Kind("FLOATINGPOINT_GEQ");
  public final static Kind FLOATINGPOINT_GT = new Kind("FLOATINGPOINT_GT");
  public final static Kind FLOATINGPOINT_ISN = new Kind("FLOATINGPOINT_ISN");
  public final static Kind FLOATINGPOINT_ISSN = new Kind("FLOATINGPOINT_ISSN");
  public final static Kind FLOATINGPOINT_ISZ = new Kind("FLOATINGPOINT_ISZ");
  public final static Kind FLOATINGPOINT_ISINF = new Kind("FLOATINGPOINT_ISINF");
  public final static Kind FLOATINGPOINT_ISNAN = new Kind("FLOATINGPOINT_ISNAN");
  public final static Kind FLOATINGPOINT_ISNEG = new Kind("FLOATINGPOINT_ISNEG");
  public final static Kind FLOATINGPOINT_ISPOS = new Kind("FLOATINGPOINT_ISPOS");
  public final static Kind FLOATINGPOINT_TO_FP_IEEE_BITVECTOR_OP = new Kind("FLOATINGPOINT_TO_FP_IEEE_BITVECTOR_OP");
  public final static Kind FLOATINGPOINT_TO_FP_IEEE_BITVECTOR = new Kind("FLOATINGPOINT_TO_FP_IEEE_BITVECTOR");
  public final static Kind FLOATINGPOINT_TO_FP_FLOATINGPOINT_OP = new Kind("FLOATINGPOINT_TO_FP_FLOATINGPOINT_OP");
  public final static Kind FLOATINGPOINT_TO_FP_FLOATINGPOINT = new Kind("FLOATINGPOINT_TO_FP_FLOATINGPOINT");
  public final static Kind FLOATINGPOINT_TO_FP_REAL_OP = new Kind("FLOATINGPOINT_TO_FP_REAL_OP");
  public final static Kind FLOATINGPOINT_TO_FP_REAL = new Kind("FLOATINGPOINT_TO_FP_REAL");
  public final static Kind FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR_OP = new Kind("FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR_OP");
  public final static Kind FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR = new Kind("FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR");
  public final static Kind FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR_OP = new Kind("FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR_OP");
  public final static Kind FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR = new Kind("FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR");
  public final static Kind FLOATINGPOINT_TO_FP_GENERIC_OP = new Kind("FLOATINGPOINT_TO_FP_GENERIC_OP");
  public final static Kind FLOATINGPOINT_TO_FP_GENERIC = new Kind("FLOATINGPOINT_TO_FP_GENERIC");
  public final static Kind FLOATINGPOINT_TO_UBV_OP = new Kind("FLOATINGPOINT_TO_UBV_OP");
  public final static Kind FLOATINGPOINT_TO_UBV = new Kind("FLOATINGPOINT_TO_UBV");
  public final static Kind FLOATINGPOINT_TO_UBV_TOTAL_OP = new Kind("FLOATINGPOINT_TO_UBV_TOTAL_OP");
  public final static Kind FLOATINGPOINT_TO_UBV_TOTAL = new Kind("FLOATINGPOINT_TO_UBV_TOTAL");
  public final static Kind FLOATINGPOINT_TO_SBV_OP = new Kind("FLOATINGPOINT_TO_SBV_OP");
  public final static Kind FLOATINGPOINT_TO_SBV = new Kind("FLOATINGPOINT_TO_SBV");
  public final static Kind FLOATINGPOINT_TO_SBV_TOTAL_OP = new Kind("FLOATINGPOINT_TO_SBV_TOTAL_OP");
  public final static Kind FLOATINGPOINT_TO_SBV_TOTAL = new Kind("FLOATINGPOINT_TO_SBV_TOTAL");
  public final static Kind FLOATINGPOINT_TO_REAL = new Kind("FLOATINGPOINT_TO_REAL");
  public final static Kind FLOATINGPOINT_TO_REAL_TOTAL = new Kind("FLOATINGPOINT_TO_REAL_TOTAL");
  public final static Kind FLOATINGPOINT_COMPONENT_NAN = new Kind("FLOATINGPOINT_COMPONENT_NAN");
  public final static Kind FLOATINGPOINT_COMPONENT_INF = new Kind("FLOATINGPOINT_COMPONENT_INF");
  public final static Kind FLOATINGPOINT_COMPONENT_ZERO = new Kind("FLOATINGPOINT_COMPONENT_ZERO");
  public final static Kind FLOATINGPOINT_COMPONENT_SIGN = new Kind("FLOATINGPOINT_COMPONENT_SIGN");
  public final static Kind FLOATINGPOINT_COMPONENT_EXPONENT = new Kind("FLOATINGPOINT_COMPONENT_EXPONENT");
  public final static Kind FLOATINGPOINT_COMPONENT_SIGNIFICAND = new Kind("FLOATINGPOINT_COMPONENT_SIGNIFICAND");
  public final static Kind ROUNDINGMODE_BITBLAST = new Kind("ROUNDINGMODE_BITBLAST");
  public final static Kind ARRAY_TYPE = new Kind("ARRAY_TYPE");
  public final static Kind SELECT = new Kind("SELECT");
  public final static Kind STORE = new Kind("STORE");
  public final static Kind STORE_ALL = new Kind("STORE_ALL");
  public final static Kind ARR_TABLE_FUN = new Kind("ARR_TABLE_FUN");
  public final static Kind ARRAY_LAMBDA = new Kind("ARRAY_LAMBDA");
  public final static Kind PARTIAL_SELECT_0 = new Kind("PARTIAL_SELECT_0");
  public final static Kind PARTIAL_SELECT_1 = new Kind("PARTIAL_SELECT_1");
  public final static Kind CONSTRUCTOR_TYPE = new Kind("CONSTRUCTOR_TYPE");
  public final static Kind SELECTOR_TYPE = new Kind("SELECTOR_TYPE");
  public final static Kind TESTER_TYPE = new Kind("TESTER_TYPE");
  public final static Kind APPLY_CONSTRUCTOR = new Kind("APPLY_CONSTRUCTOR");
  public final static Kind APPLY_SELECTOR = new Kind("APPLY_SELECTOR");
  public final static Kind APPLY_SELECTOR_TOTAL = new Kind("APPLY_SELECTOR_TOTAL");
  public final static Kind APPLY_TESTER = new Kind("APPLY_TESTER");
  public final static Kind DATATYPE_TYPE = new Kind("DATATYPE_TYPE");
  public final static Kind PARAMETRIC_DATATYPE = new Kind("PARAMETRIC_DATATYPE");
  public final static Kind APPLY_TYPE_ASCRIPTION = new Kind("APPLY_TYPE_ASCRIPTION");
  public final static Kind ASCRIPTION_TYPE = new Kind("ASCRIPTION_TYPE");
  public final static Kind TUPLE_UPDATE_OP = new Kind("TUPLE_UPDATE_OP");
  public final static Kind TUPLE_UPDATE = new Kind("TUPLE_UPDATE");
  public final static Kind RECORD_UPDATE_OP = new Kind("RECORD_UPDATE_OP");
  public final static Kind RECORD_UPDATE = new Kind("RECORD_UPDATE");
  public final static Kind DT_SIZE = new Kind("DT_SIZE");
  public final static Kind DT_HEIGHT_BOUND = new Kind("DT_HEIGHT_BOUND");
  public final static Kind DT_SIZE_BOUND = new Kind("DT_SIZE_BOUND");
  public final static Kind DT_SYGUS_BOUND = new Kind("DT_SYGUS_BOUND");
  public final static Kind DT_SYGUS_EVAL = new Kind("DT_SYGUS_EVAL");
  public final static Kind SEP_NIL = new Kind("SEP_NIL");
  public final static Kind SEP_EMP = new Kind("SEP_EMP");
  public final static Kind SEP_PTO = new Kind("SEP_PTO");
  public final static Kind SEP_STAR = new Kind("SEP_STAR");
  public final static Kind SEP_WAND = new Kind("SEP_WAND");
  public final static Kind SEP_LABEL = new Kind("SEP_LABEL");
  public final static Kind EMPTYSET = new Kind("EMPTYSET");
  public final static Kind SET_TYPE = new Kind("SET_TYPE");
  public final static Kind UNION = new Kind("UNION");
  public final static Kind INTERSECTION = new Kind("INTERSECTION");
  public final static Kind SETMINUS = new Kind("SETMINUS");
  public final static Kind SUBSET = new Kind("SUBSET");
  public final static Kind MEMBER = new Kind("MEMBER");
  public final static Kind SINGLETON = new Kind("SINGLETON");
  public final static Kind INSERT = new Kind("INSERT");
  public final static Kind CARD = new Kind("CARD");
  public final static Kind COMPLEMENT = new Kind("COMPLEMENT");
  public final static Kind UNIVERSE_SET = new Kind("UNIVERSE_SET");
  public final static Kind JOIN = new Kind("JOIN");
  public final static Kind PRODUCT = new Kind("PRODUCT");
  public final static Kind TRANSPOSE = new Kind("TRANSPOSE");
  public final static Kind TCLOSURE = new Kind("TCLOSURE");
  public final static Kind JOIN_IMAGE = new Kind("JOIN_IMAGE");
  public final static Kind IDEN = new Kind("IDEN");
  public final static Kind STRING_CONCAT = new Kind("STRING_CONCAT");
  public final static Kind STRING_IN_REGEXP = new Kind("STRING_IN_REGEXP");
  public final static Kind STRING_LENGTH = new Kind("STRING_LENGTH");
  public final static Kind STRING_SUBSTR = new Kind("STRING_SUBSTR");
  public final static Kind STRING_CHARAT = new Kind("STRING_CHARAT");
  public final static Kind STRING_STRCTN = new Kind("STRING_STRCTN");
  public final static Kind STRING_LT = new Kind("STRING_LT");
  public final static Kind STRING_LEQ = new Kind("STRING_LEQ");
  public final static Kind STRING_STRIDOF = new Kind("STRING_STRIDOF");
  public final static Kind STRING_STRREPL = new Kind("STRING_STRREPL");
  public final static Kind STRING_STRREPLALL = new Kind("STRING_STRREPLALL");
  public final static Kind STRING_PREFIX = new Kind("STRING_PREFIX");
  public final static Kind STRING_SUFFIX = new Kind("STRING_SUFFIX");
  public final static Kind STRING_ITOS = new Kind("STRING_ITOS");
  public final static Kind STRING_STOI = new Kind("STRING_STOI");
  public final static Kind STRING_CODE = new Kind("STRING_CODE");
  public final static Kind CONST_STRING = new Kind("CONST_STRING");
  public final static Kind STRING_TO_REGEXP = new Kind("STRING_TO_REGEXP");
  public final static Kind REGEXP_CONCAT = new Kind("REGEXP_CONCAT");
  public final static Kind REGEXP_UNION = new Kind("REGEXP_UNION");
  public final static Kind REGEXP_INTER = new Kind("REGEXP_INTER");
  public final static Kind REGEXP_STAR = new Kind("REGEXP_STAR");
  public final static Kind REGEXP_PLUS = new Kind("REGEXP_PLUS");
  public final static Kind REGEXP_OPT = new Kind("REGEXP_OPT");
  public final static Kind REGEXP_RANGE = new Kind("REGEXP_RANGE");
  public final static Kind REGEXP_LOOP = new Kind("REGEXP_LOOP");
  public final static Kind REGEXP_EMPTY = new Kind("REGEXP_EMPTY");
  public final static Kind REGEXP_SIGMA = new Kind("REGEXP_SIGMA");
  public final static Kind REGEXP_RV = new Kind("REGEXP_RV");
  public final static Kind FORALL = new Kind("FORALL");
  public final static Kind EXISTS = new Kind("EXISTS");
  public final static Kind INST_CONSTANT = new Kind("INST_CONSTANT");
  public final static Kind BOUND_VAR_LIST = new Kind("BOUND_VAR_LIST");
  public final static Kind INST_PATTERN = new Kind("INST_PATTERN");
  public final static Kind INST_NO_PATTERN = new Kind("INST_NO_PATTERN");
  public final static Kind INST_ATTRIBUTE = new Kind("INST_ATTRIBUTE");
  public final static Kind INST_PATTERN_LIST = new Kind("INST_PATTERN_LIST");
  public final static Kind INST_CLOSURE = new Kind("INST_CLOSURE");
  public final static Kind REWRITE_RULE = new Kind("REWRITE_RULE");
  public final static Kind RR_REWRITE = new Kind("RR_REWRITE");
  public final static Kind RR_REDUCTION = new Kind("RR_REDUCTION");
  public final static Kind RR_DEDUCTION = new Kind("RR_DEDUCTION");
  public final static Kind LAST_KIND = new Kind("LAST_KIND");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static Kind swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + Kind.class + " with value " + swigValue);
  }

  private Kind(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private Kind(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private Kind(String swigName, Kind swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static Kind[] swigValues = { UNDEFINED_KIND, NULL_EXPR, SORT_TAG, SORT_TYPE, UNINTERPRETED_CONSTANT, ABSTRACT_VALUE, BUILTIN, FUNCTION, APPLY, EQUAL, DISTINCT, VARIABLE, BOUND_VARIABLE, SKOLEM, SEXPR, LAMBDA, CHOICE, CHAIN, CHAIN_OP, TYPE_CONSTANT, FUNCTION_TYPE, SEXPR_TYPE, CONST_BOOLEAN, NOT, AND, IMPLIES, OR, XOR, ITE, APPLY_UF, BOOLEAN_TERM_VARIABLE, CARDINALITY_CONSTRAINT, COMBINED_CARDINALITY_CONSTRAINT, PARTIAL_APPLY_UF, CARDINALITY_VALUE, HO_APPLY, PLUS, MULT, NONLINEAR_MULT, MINUS, UMINUS, DIVISION, DIVISION_TOTAL, INTS_DIVISION, INTS_DIVISION_TOTAL, INTS_MODULUS, INTS_MODULUS_TOTAL, ABS, DIVISIBLE, POW, EXPONENTIAL, SINE, COSINE, TANGENT, COSECANT, SECANT, COTANGENT, ARCSINE, ARCCOSINE, ARCTANGENT, ARCCOSECANT, ARCSECANT, ARCCOTANGENT, SQRT, DIVISIBLE_OP, CONST_RATIONAL, LT, LEQ, GT, GEQ, IS_INTEGER, TO_INTEGER, TO_REAL, PI, BITVECTOR_TYPE, CONST_BITVECTOR, BITVECTOR_CONCAT, BITVECTOR_AND, BITVECTOR_COMP, BITVECTOR_OR, BITVECTOR_XOR, BITVECTOR_NOT, BITVECTOR_NAND, BITVECTOR_NOR, BITVECTOR_XNOR, BITVECTOR_MULT, BITVECTOR_NEG, BITVECTOR_PLUS, BITVECTOR_SUB, BITVECTOR_UDIV, BITVECTOR_UREM, BITVECTOR_SDIV, BITVECTOR_SMOD, BITVECTOR_SREM, BITVECTOR_UDIV_TOTAL, BITVECTOR_UREM_TOTAL, BITVECTOR_ASHR, BITVECTOR_LSHR, BITVECTOR_SHL, BITVECTOR_ULE, BITVECTOR_ULT, BITVECTOR_UGE, BITVECTOR_UGT, BITVECTOR_SLE, BITVECTOR_SLT, BITVECTOR_SGE, BITVECTOR_SGT, BITVECTOR_ULTBV, BITVECTOR_SLTBV, BITVECTOR_REDAND, BITVECTOR_REDOR, BITVECTOR_ITE, BITVECTOR_TO_NAT, BITVECTOR_ACKERMANNIZE_UDIV, BITVECTOR_ACKERMANNIZE_UREM, BITVECTOR_EAGER_ATOM, BITVECTOR_BITOF_OP, BITVECTOR_BITOF, BITVECTOR_EXTRACT_OP, BITVECTOR_EXTRACT, BITVECTOR_REPEAT_OP, BITVECTOR_REPEAT, BITVECTOR_ROTATE_LEFT_OP, BITVECTOR_ROTATE_LEFT, BITVECTOR_ROTATE_RIGHT_OP, BITVECTOR_ROTATE_RIGHT, BITVECTOR_SIGN_EXTEND_OP, BITVECTOR_SIGN_EXTEND, BITVECTOR_ZERO_EXTEND_OP, BITVECTOR_ZERO_EXTEND, INT_TO_BITVECTOR_OP, INT_TO_BITVECTOR, CONST_FLOATINGPOINT, CONST_ROUNDINGMODE, FLOATINGPOINT_TYPE, FLOATINGPOINT_FP, FLOATINGPOINT_EQ, FLOATINGPOINT_ABS, FLOATINGPOINT_NEG, FLOATINGPOINT_PLUS, FLOATINGPOINT_SUB, FLOATINGPOINT_MULT, FLOATINGPOINT_DIV, FLOATINGPOINT_FMA, FLOATINGPOINT_SQRT, FLOATINGPOINT_REM, FLOATINGPOINT_RTI, FLOATINGPOINT_MIN, FLOATINGPOINT_MAX, FLOATINGPOINT_MIN_TOTAL, FLOATINGPOINT_MAX_TOTAL, FLOATINGPOINT_LEQ, FLOATINGPOINT_LT, FLOATINGPOINT_GEQ, FLOATINGPOINT_GT, FLOATINGPOINT_ISN, FLOATINGPOINT_ISSN, FLOATINGPOINT_ISZ, FLOATINGPOINT_ISINF, FLOATINGPOINT_ISNAN, FLOATINGPOINT_ISNEG, FLOATINGPOINT_ISPOS, FLOATINGPOINT_TO_FP_IEEE_BITVECTOR_OP, FLOATINGPOINT_TO_FP_IEEE_BITVECTOR, FLOATINGPOINT_TO_FP_FLOATINGPOINT_OP, FLOATINGPOINT_TO_FP_FLOATINGPOINT, FLOATINGPOINT_TO_FP_REAL_OP, FLOATINGPOINT_TO_FP_REAL, FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR_OP, FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR, FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR_OP, FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR, FLOATINGPOINT_TO_FP_GENERIC_OP, FLOATINGPOINT_TO_FP_GENERIC, FLOATINGPOINT_TO_UBV_OP, FLOATINGPOINT_TO_UBV, FLOATINGPOINT_TO_UBV_TOTAL_OP, FLOATINGPOINT_TO_UBV_TOTAL, FLOATINGPOINT_TO_SBV_OP, FLOATINGPOINT_TO_SBV, FLOATINGPOINT_TO_SBV_TOTAL_OP, FLOATINGPOINT_TO_SBV_TOTAL, FLOATINGPOINT_TO_REAL, FLOATINGPOINT_TO_REAL_TOTAL, FLOATINGPOINT_COMPONENT_NAN, FLOATINGPOINT_COMPONENT_INF, FLOATINGPOINT_COMPONENT_ZERO, FLOATINGPOINT_COMPONENT_SIGN, FLOATINGPOINT_COMPONENT_EXPONENT, FLOATINGPOINT_COMPONENT_SIGNIFICAND, ROUNDINGMODE_BITBLAST, ARRAY_TYPE, SELECT, STORE, STORE_ALL, ARR_TABLE_FUN, ARRAY_LAMBDA, PARTIAL_SELECT_0, PARTIAL_SELECT_1, CONSTRUCTOR_TYPE, SELECTOR_TYPE, TESTER_TYPE, APPLY_CONSTRUCTOR, APPLY_SELECTOR, APPLY_SELECTOR_TOTAL, APPLY_TESTER, DATATYPE_TYPE, PARAMETRIC_DATATYPE, APPLY_TYPE_ASCRIPTION, ASCRIPTION_TYPE, TUPLE_UPDATE_OP, TUPLE_UPDATE, RECORD_UPDATE_OP, RECORD_UPDATE, DT_SIZE, DT_HEIGHT_BOUND, DT_SIZE_BOUND, DT_SYGUS_BOUND, DT_SYGUS_EVAL, SEP_NIL, SEP_EMP, SEP_PTO, SEP_STAR, SEP_WAND, SEP_LABEL, EMPTYSET, SET_TYPE, UNION, INTERSECTION, SETMINUS, SUBSET, MEMBER, SINGLETON, INSERT, CARD, COMPLEMENT, UNIVERSE_SET, JOIN, PRODUCT, TRANSPOSE, TCLOSURE, JOIN_IMAGE, IDEN, STRING_CONCAT, STRING_IN_REGEXP, STRING_LENGTH, STRING_SUBSTR, STRING_CHARAT, STRING_STRCTN, STRING_LT, STRING_LEQ, STRING_STRIDOF, STRING_STRREPL, STRING_STRREPLALL, STRING_PREFIX, STRING_SUFFIX, STRING_ITOS, STRING_STOI, STRING_CODE, CONST_STRING, STRING_TO_REGEXP, REGEXP_CONCAT, REGEXP_UNION, REGEXP_INTER, REGEXP_STAR, REGEXP_PLUS, REGEXP_OPT, REGEXP_RANGE, REGEXP_LOOP, REGEXP_EMPTY, REGEXP_SIGMA, REGEXP_RV, FORALL, EXISTS, INST_CONSTANT, BOUND_VAR_LIST, INST_PATTERN, INST_NO_PATTERN, INST_ATTRIBUTE, INST_PATTERN_LIST, INST_CLOSURE, REWRITE_RULE, RR_REWRITE, RR_REDUCTION, RR_DEDUCTION, LAST_KIND };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

