/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.nyu.acsys.CVC4;

public class Integer {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Integer(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Integer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

/*   protected void finalize() {
    delete();
  } */

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CVC4JNI.delete_Integer(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Integer() {
    this(CVC4JNI.new_Integer__SWIG_0(), true);
  }

  public Integer(String s, long base) {
    this(CVC4JNI.new_Integer__SWIG_1(s, base), true);
  }

  public Integer(String s) {
    this(CVC4JNI.new_Integer__SWIG_2(s), true);
  }

  public Integer(Integer q) {
    this(CVC4JNI.new_Integer__SWIG_3(Integer.getCPtr(q), q), true);
  }

  public Integer(int z) {
    this(CVC4JNI.new_Integer__SWIG_4(z), true);
  }

  public Integer(long z) {
    this(CVC4JNI.new_Integer__SWIG_5(z), true);
  }

  public SWIGTYPE_p_mpz_class getValue() {
    return new SWIGTYPE_p_mpz_class(CVC4JNI.Integer_getValue(swigCPtr, this), true);
  }

  public Integer assign(Integer x) {
    return new Integer(CVC4JNI.Integer_assign(swigCPtr, this, Integer.getCPtr(x), x), false);
  }

  public boolean equals(Integer y) {
    return CVC4JNI.Integer_equals(swigCPtr, this, Integer.getCPtr(y), y);
  }

  public Integer minus() {
    return new Integer(CVC4JNI.Integer_minus__SWIG_0(swigCPtr, this), true);
  }

  public boolean less(Integer y) {
    return CVC4JNI.Integer_less(swigCPtr, this, Integer.getCPtr(y), y);
  }

  public boolean lessEqual(Integer y) {
    return CVC4JNI.Integer_lessEqual(swigCPtr, this, Integer.getCPtr(y), y);
  }

  public boolean greater(Integer y) {
    return CVC4JNI.Integer_greater(swigCPtr, this, Integer.getCPtr(y), y);
  }

  public boolean greaterEqual(Integer y) {
    return CVC4JNI.Integer_greaterEqual(swigCPtr, this, Integer.getCPtr(y), y);
  }

  public Integer plus(Integer y) {
    return new Integer(CVC4JNI.Integer_plus(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer plusAssign(Integer y) {
    return new Integer(CVC4JNI.Integer_plusAssign(swigCPtr, this, Integer.getCPtr(y), y), false);
  }

  public Integer minus(Integer y) {
    return new Integer(CVC4JNI.Integer_minus__SWIG_1(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer minusAssign(Integer y) {
    return new Integer(CVC4JNI.Integer_minusAssign(swigCPtr, this, Integer.getCPtr(y), y), false);
  }

  public Integer times(Integer y) {
    return new Integer(CVC4JNI.Integer_times(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer timesAssign(Integer y) {
    return new Integer(CVC4JNI.Integer_timesAssign(swigCPtr, this, Integer.getCPtr(y), y), false);
  }

  public Integer bitwiseOr(Integer y) {
    return new Integer(CVC4JNI.Integer_bitwiseOr(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer bitwiseAnd(Integer y) {
    return new Integer(CVC4JNI.Integer_bitwiseAnd(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer bitwiseXor(Integer y) {
    return new Integer(CVC4JNI.Integer_bitwiseXor(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer bitwiseNot() {
    return new Integer(CVC4JNI.Integer_bitwiseNot(swigCPtr, this), true);
  }

  public Integer multiplyByPow2(long pow) {
    return new Integer(CVC4JNI.Integer_multiplyByPow2(swigCPtr, this, pow), true);
  }

  public Integer setBit(long i) {
    return new Integer(CVC4JNI.Integer_setBit(swigCPtr, this, i), true);
  }

  public boolean isBitSet(long i) {
    return CVC4JNI.Integer_isBitSet(swigCPtr, this, i);
  }

  public Integer oneExtend(long size, long amount) {
    return new Integer(CVC4JNI.Integer_oneExtend(swigCPtr, this, size, amount), true);
  }

  public long toUnsignedInt() {
    return CVC4JNI.Integer_toUnsignedInt(swigCPtr, this);
  }

  public Integer extractBitRange(long bitCount, long low) {
    return new Integer(CVC4JNI.Integer_extractBitRange(swigCPtr, this, bitCount, low), true);
  }

  public Integer floorDivideQuotient(Integer y) {
    return new Integer(CVC4JNI.Integer_floorDivideQuotient(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer floorDivideRemainder(Integer y) {
    return new Integer(CVC4JNI.Integer_floorDivideRemainder(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public static void floorQR(Integer q, Integer r, Integer x, Integer y) {
    CVC4JNI.Integer_floorQR(Integer.getCPtr(q), q, Integer.getCPtr(r), r, Integer.getCPtr(x), x, Integer.getCPtr(y), y);
  }

  public Integer ceilingDivideQuotient(Integer y) {
    return new Integer(CVC4JNI.Integer_ceilingDivideQuotient(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer ceilingDivideRemainder(Integer y) {
    return new Integer(CVC4JNI.Integer_ceilingDivideRemainder(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public static void euclidianQR(Integer q, Integer r, Integer x, Integer y) {
    CVC4JNI.Integer_euclidianQR(Integer.getCPtr(q), q, Integer.getCPtr(r), r, Integer.getCPtr(x), x, Integer.getCPtr(y), y);
  }

  public Integer euclidianDivideQuotient(Integer y) {
    return new Integer(CVC4JNI.Integer_euclidianDivideQuotient(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer euclidianDivideRemainder(Integer y) {
    return new Integer(CVC4JNI.Integer_euclidianDivideRemainder(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer exactQuotient(Integer y) {
    return new Integer(CVC4JNI.Integer_exactQuotient(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer modByPow2(long exp) {
    return new Integer(CVC4JNI.Integer_modByPow2(swigCPtr, this, exp), true);
  }

  public Integer divByPow2(long exp) {
    return new Integer(CVC4JNI.Integer_divByPow2(swigCPtr, this, exp), true);
  }

  public int sgn() {
    return CVC4JNI.Integer_sgn(swigCPtr, this);
  }

  public boolean strictlyPositive() {
    return CVC4JNI.Integer_strictlyPositive(swigCPtr, this);
  }

  public boolean strictlyNegative() {
    return CVC4JNI.Integer_strictlyNegative(swigCPtr, this);
  }

  public boolean isZero() {
    return CVC4JNI.Integer_isZero(swigCPtr, this);
  }

  public boolean isOne() {
    return CVC4JNI.Integer_isOne(swigCPtr, this);
  }

  public boolean isNegativeOne() {
    return CVC4JNI.Integer_isNegativeOne(swigCPtr, this);
  }

  public Integer pow(long exp) {
    return new Integer(CVC4JNI.Integer_pow(swigCPtr, this, exp), true);
  }

  public Integer gcd(Integer y) {
    return new Integer(CVC4JNI.Integer_gcd(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer lcm(Integer y) {
    return new Integer(CVC4JNI.Integer_lcm(swigCPtr, this, Integer.getCPtr(y), y), true);
  }

  public Integer modAdd(Integer y, Integer m) {
    return new Integer(CVC4JNI.Integer_modAdd(swigCPtr, this, Integer.getCPtr(y), y, Integer.getCPtr(m), m), true);
  }

  public Integer modMultiply(Integer y, Integer m) {
    return new Integer(CVC4JNI.Integer_modMultiply(swigCPtr, this, Integer.getCPtr(y), y, Integer.getCPtr(m), m), true);
  }

  public Integer modInverse(Integer m) {
    return new Integer(CVC4JNI.Integer_modInverse(swigCPtr, this, Integer.getCPtr(m), m), true);
  }

  public boolean divides(Integer y) {
    return CVC4JNI.Integer_divides(swigCPtr, this, Integer.getCPtr(y), y);
  }

  public Integer abs() {
    return new Integer(CVC4JNI.Integer_abs(swigCPtr, this), true);
  }

  public String toString(int base) {
    return CVC4JNI.Integer_toString__SWIG_0(swigCPtr, this, base);
  }

  public String toString() {
    return CVC4JNI.Integer_toString__SWIG_1(swigCPtr, this);
  }

  public boolean fitsSignedInt() {
    return CVC4JNI.Integer_fitsSignedInt(swigCPtr, this);
  }

  public boolean fitsUnsignedInt() {
    return CVC4JNI.Integer_fitsUnsignedInt(swigCPtr, this);
  }

  public int getSignedInt() {
    return CVC4JNI.Integer_getSignedInt(swigCPtr, this);
  }

  public long getUnsignedInt() {
    return CVC4JNI.Integer_getUnsignedInt(swigCPtr, this);
  }

  public boolean fitsSignedLong() {
    return CVC4JNI.Integer_fitsSignedLong(swigCPtr, this);
  }

  public boolean fitsUnsignedLong() {
    return CVC4JNI.Integer_fitsUnsignedLong(swigCPtr, this);
  }

  public int getLong() {
    return CVC4JNI.Integer_getLong(swigCPtr, this);
  }

  public long getUnsignedLong() {
    return CVC4JNI.Integer_getUnsignedLong(swigCPtr, this);
  }

  public long hash() {
    return CVC4JNI.Integer_hash(swigCPtr, this);
  }

  public boolean testBit(long n) {
    return CVC4JNI.Integer_testBit(swigCPtr, this, n);
  }

  public long isPow2() {
    return CVC4JNI.Integer_isPow2(swigCPtr, this);
  }

  public long length() {
    return CVC4JNI.Integer_length(swigCPtr, this);
  }

  public static void extendedGcd(Integer g, Integer s, Integer t, Integer a, Integer b) {
    CVC4JNI.Integer_extendedGcd(Integer.getCPtr(g), g, Integer.getCPtr(s), s, Integer.getCPtr(t), t, Integer.getCPtr(a), a, Integer.getCPtr(b), b);
  }

  public static Integer min(Integer a, Integer b) {
    return new Integer(CVC4JNI.Integer_min(Integer.getCPtr(a), a, Integer.getCPtr(b), b), false);
  }

  public static Integer max(Integer a, Integer b) {
    return new Integer(CVC4JNI.Integer_max(Integer.getCPtr(a), a, Integer.getCPtr(b), b), false);
  }

}
