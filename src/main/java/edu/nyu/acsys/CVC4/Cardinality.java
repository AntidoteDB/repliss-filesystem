/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.nyu.acsys.CVC4;

public class Cardinality {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Cardinality(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Cardinality obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

/*   protected void finalize() {
    delete();
  } */

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CVC4JNI.delete_Cardinality(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static Cardinality getINTEGERS() {
    long cPtr = CVC4JNI.Cardinality_INTEGERS_get();
    return (cPtr == 0) ? null : new Cardinality(cPtr, false);
  }

  public static Cardinality getREALS() {
    long cPtr = CVC4JNI.Cardinality_REALS_get();
    return (cPtr == 0) ? null : new Cardinality(cPtr, false);
  }

  public static Cardinality getUNKNOWN_CARD() {
    long cPtr = CVC4JNI.Cardinality_UNKNOWN_CARD_get();
    return (cPtr == 0) ? null : new Cardinality(cPtr, false);
  }

  public Cardinality(int card) {
    this(CVC4JNI.new_Cardinality__SWIG_0(card), true);
  }

  public Cardinality(Integer card) {
    this(CVC4JNI.new_Cardinality__SWIG_1(Integer.getCPtr(card), card), true);
  }

  public Cardinality(CardinalityBeth beth) {
    this(CVC4JNI.new_Cardinality__SWIG_2(CardinalityBeth.getCPtr(beth), beth), true);
  }

  public Cardinality(CardinalityUnknown arg0) {
    this(CVC4JNI.new_Cardinality__SWIG_3(CardinalityUnknown.getCPtr(arg0), arg0), true);
  }

  public boolean isUnknown() {
    return CVC4JNI.Cardinality_isUnknown(swigCPtr, this);
  }

  public boolean isFinite() {
    return CVC4JNI.Cardinality_isFinite(swigCPtr, this);
  }

  public boolean isOne() {
    return CVC4JNI.Cardinality_isOne(swigCPtr, this);
  }

  public boolean isLargeFinite() {
    return CVC4JNI.Cardinality_isLargeFinite(swigCPtr, this);
  }

  public boolean isInfinite() {
    return CVC4JNI.Cardinality_isInfinite(swigCPtr, this);
  }

  public boolean isCountable() {
    return CVC4JNI.Cardinality_isCountable(swigCPtr, this);
  }

  public Integer getFiniteCardinality() {
    return new Integer(CVC4JNI.Cardinality_getFiniteCardinality(swigCPtr, this), true);
  }

  public Integer getBethNumber() {
    return new Integer(CVC4JNI.Cardinality_getBethNumber(swigCPtr, this), true);
  }

  public Cardinality plusAssign(Cardinality c) {
    return new Cardinality(CVC4JNI.Cardinality_plusAssign(swigCPtr, this, Cardinality.getCPtr(c), c), false);
  }

  public Cardinality timesAssign(Cardinality c) {
    return new Cardinality(CVC4JNI.Cardinality_timesAssign(swigCPtr, this, Cardinality.getCPtr(c), c), false);
  }

  public Cardinality powerAssign(Cardinality c) {
    return new Cardinality(CVC4JNI.Cardinality_powerAssign(swigCPtr, this, Cardinality.getCPtr(c), c), false);
  }

  public Cardinality plus(Cardinality c) {
    return new Cardinality(CVC4JNI.Cardinality_plus(swigCPtr, this, Cardinality.getCPtr(c), c), true);
  }

  public Cardinality times(Cardinality c) {
    return new Cardinality(CVC4JNI.Cardinality_times(swigCPtr, this, Cardinality.getCPtr(c), c), true);
  }

  public Cardinality power(Cardinality c) {
    return new Cardinality(CVC4JNI.Cardinality_power(swigCPtr, this, Cardinality.getCPtr(c), c), true);
  }

  public CardinalityComparison compare(Cardinality c) {
    return CardinalityComparison.swigToEnum(CVC4JNI.Cardinality_compare(swigCPtr, this, Cardinality.getCPtr(c), c));
  }

  public String toString() {
    return CVC4JNI.Cardinality_toString(swigCPtr, this);
  }

  public boolean knownLessThanOrEqual(Cardinality c) {
    return CVC4JNI.Cardinality_knownLessThanOrEqual(swigCPtr, this, Cardinality.getCPtr(c), c);
  }

  public final static class CardinalityComparison {
    public final static CardinalityComparison LESS = new CardinalityComparison("LESS");
    public final static CardinalityComparison EQUAL = new CardinalityComparison("EQUAL");
    public final static CardinalityComparison GREATER = new CardinalityComparison("GREATER");
    public final static CardinalityComparison UNKNOWN = new CardinalityComparison("UNKNOWN");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static CardinalityComparison swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + CardinalityComparison.class + " with value " + swigValue);
    }

    private CardinalityComparison(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private CardinalityComparison(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private CardinalityComparison(String swigName, CardinalityComparison swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static CardinalityComparison[] swigValues = { LESS, EQUAL, GREATER, UNKNOWN };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
