/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.nyu.acsys.CVC4;

public class LogicInfo {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected LogicInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LogicInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CVC4JNI.delete_LogicInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public LogicInfo() {
    this(CVC4JNI.new_LogicInfo__SWIG_0(), true);
  }

  public LogicInfo(String logicString) {
    this(CVC4JNI.new_LogicInfo__SWIG_1(logicString), true);
  }

  public String getLogicString() {
    return CVC4JNI.LogicInfo_getLogicString(swigCPtr, this);
  }

  public boolean isSharingEnabled() {
    return CVC4JNI.LogicInfo_isSharingEnabled(swigCPtr, this);
  }

  public boolean isTheoryEnabled(TheoryId theory) {
    return CVC4JNI.LogicInfo_isTheoryEnabled(swigCPtr, this, theory.swigValue());
  }

  public boolean isQuantified() {
    return CVC4JNI.LogicInfo_isQuantified(swigCPtr, this);
  }

  public boolean hasEverything() {
    return CVC4JNI.LogicInfo_hasEverything(swigCPtr, this);
  }

  public boolean hasNothing() {
    return CVC4JNI.LogicInfo_hasNothing(swigCPtr, this);
  }

  public boolean isPure(TheoryId theory) {
    return CVC4JNI.LogicInfo_isPure(swigCPtr, this, theory.swigValue());
  }

  public boolean areIntegersUsed() {
    return CVC4JNI.LogicInfo_areIntegersUsed(swigCPtr, this);
  }

  public boolean areRealsUsed() {
    return CVC4JNI.LogicInfo_areRealsUsed(swigCPtr, this);
  }

  public boolean areTranscendentalsUsed() {
    return CVC4JNI.LogicInfo_areTranscendentalsUsed(swigCPtr, this);
  }

  public boolean isLinear() {
    return CVC4JNI.LogicInfo_isLinear(swigCPtr, this);
  }

  public boolean isDifferenceLogic() {
    return CVC4JNI.LogicInfo_isDifferenceLogic(swigCPtr, this);
  }

  public boolean hasCardinalityConstraints() {
    return CVC4JNI.LogicInfo_hasCardinalityConstraints(swigCPtr, this);
  }

  public boolean isHigherOrder() {
    return CVC4JNI.LogicInfo_isHigherOrder(swigCPtr, this);
  }

  public void setLogicString(String logicString) {
    CVC4JNI.LogicInfo_setLogicString(swigCPtr, this, logicString);
  }

  public void enableEverything() {
    CVC4JNI.LogicInfo_enableEverything(swigCPtr, this);
  }

  public void disableEverything() {
    CVC4JNI.LogicInfo_disableEverything(swigCPtr, this);
  }

  public void enableTheory(TheoryId theory) {
    CVC4JNI.LogicInfo_enableTheory(swigCPtr, this, theory.swigValue());
  }

  public void disableTheory(TheoryId theory) {
    CVC4JNI.LogicInfo_disableTheory(swigCPtr, this, theory.swigValue());
  }

  public void enableQuantifiers() {
    CVC4JNI.LogicInfo_enableQuantifiers(swigCPtr, this);
  }

  public void disableQuantifiers() {
    CVC4JNI.LogicInfo_disableQuantifiers(swigCPtr, this);
  }

  public void enableIntegers() {
    CVC4JNI.LogicInfo_enableIntegers(swigCPtr, this);
  }

  public void disableIntegers() {
    CVC4JNI.LogicInfo_disableIntegers(swigCPtr, this);
  }

  public void enableReals() {
    CVC4JNI.LogicInfo_enableReals(swigCPtr, this);
  }

  public void disableReals() {
    CVC4JNI.LogicInfo_disableReals(swigCPtr, this);
  }

  public void arithTranscendentals() {
    CVC4JNI.LogicInfo_arithTranscendentals(swigCPtr, this);
  }

  public void arithOnlyDifference() {
    CVC4JNI.LogicInfo_arithOnlyDifference(swigCPtr, this);
  }

  public void arithOnlyLinear() {
    CVC4JNI.LogicInfo_arithOnlyLinear(swigCPtr, this);
  }

  public void arithNonLinear() {
    CVC4JNI.LogicInfo_arithNonLinear(swigCPtr, this);
  }

  public void enableCardinalityConstraints() {
    CVC4JNI.LogicInfo_enableCardinalityConstraints(swigCPtr, this);
  }

  public void disableCardinalityConstraints() {
    CVC4JNI.LogicInfo_disableCardinalityConstraints(swigCPtr, this);
  }

  public void enableHigherOrder() {
    CVC4JNI.LogicInfo_enableHigherOrder(swigCPtr, this);
  }

  public void disableHigherOrder() {
    CVC4JNI.LogicInfo_disableHigherOrder(swigCPtr, this);
  }

  public void lock() {
    CVC4JNI.LogicInfo_lock(swigCPtr, this);
  }

  public boolean isLocked() {
    return CVC4JNI.LogicInfo_isLocked(swigCPtr, this);
  }

  public LogicInfo getUnlockedCopy() {
    return new LogicInfo(CVC4JNI.LogicInfo_getUnlockedCopy(swigCPtr, this), true);
  }

  public boolean equals(LogicInfo other) {
    return CVC4JNI.LogicInfo_equals(swigCPtr, this, LogicInfo.getCPtr(other), other);
  }

  public boolean greater(LogicInfo other) {
    return CVC4JNI.LogicInfo_greater(swigCPtr, this, LogicInfo.getCPtr(other), other);
  }

  public boolean less(LogicInfo other) {
    return CVC4JNI.LogicInfo_less(swigCPtr, this, LogicInfo.getCPtr(other), other);
  }

  public boolean lessEqual(LogicInfo other) {
    return CVC4JNI.LogicInfo_lessEqual(swigCPtr, this, LogicInfo.getCPtr(other), other);
  }

  public boolean greaterEqual(LogicInfo other) {
    return CVC4JNI.LogicInfo_greaterEqual(swigCPtr, this, LogicInfo.getCPtr(other), other);
  }

  public boolean isComparableTo(LogicInfo other) {
    return CVC4JNI.LogicInfo_isComparableTo(swigCPtr, this, LogicInfo.getCPtr(other), other);
  }

}
