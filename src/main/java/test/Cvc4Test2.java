package test;

import edu.nyu.acsys.CVC4.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

import static java.nio.charset.StandardCharsets.UTF_8;

@SuppressWarnings("Duplicates")
class Cvc4Test2 {

    static int count = 0;
    private static Map<String, Expr> assertions = new LinkedHashMap<>();

    public static void main(String... args) throws InterruptedException, IOException {
        System.loadLibrary("cvc4jni");
        ExprManager em = new ExprManager();
        SmtEngine smt = new SmtEngine(em);

        SExpr e0 = new SExpr(true);
        smt.setOption("produce-models", e0);
        SExpr e1 = new SExpr(true);
        smt.setOption("finite-model-find", e1);
        SExpr e2 = new SExpr(true);
        smt.setOption("e-matching", e2);
        SExpr e3 = new SExpr(true);
        smt.setOption("incremental", e3);
        SExpr e4 = new SExpr(30000);
        smt.setOption("tlimit", e4);
        SExpr e5 = new SExpr(true);
        smt.setOption("produce-assertions", e5);
        SExpr e6 = new SExpr("cvc4");
        smt.setOption("output-language", e6);
        SExpr e7 = new SExpr(0);
        smt.setOption("default-dag-thresh", e7);
        smt.setOption("produce-unsat-cores", new SExpr(true));
        SortType e8 = em.mkSort("InvocationId");
        DatatypeConstructor e9 = new DatatypeConstructor("removeUser");
        SortType e10 = em.mkSort("UserId");
        e9.addArg("id1", e10);
        DatatypeConstructor e11 = new DatatypeConstructor("updateMail");
        e11.addArg("id", e10);
        SortType e12 = em.mkSort("String");
        e11.addArg("newMail", e12);
        DatatypeConstructor e13 = new DatatypeConstructor("registerUser");
        e13.addArg("name", e12);
        e13.addArg("mail", e12);
        DatatypeConstructor e14 = new DatatypeConstructor("getUser");
        e14.addArg("id2", e10);
        DatatypeConstructor e15 = new DatatypeConstructor("no_invocation");
        Datatype e16 = new Datatype("invocationInfo");
        e16.addConstructor(e9);
        e16.addConstructor(e11);
        e16.addConstructor(e13);
        e16.addConstructor(e14);
        e16.addConstructor(e15);
        DatatypeType e17 = em.mkDatatypeType(e16);
        DatatypeConstructor e18 = e17.getDatatype().get("removeUser");
        DatatypeConstructor e20 = e17.getDatatype().get("registerUser");
        DatatypeConstructor e21 = e17.getDatatype().get("getUser");
        DatatypeConstructor e22 = e17.getDatatype().get("no_invocation");
        ArrayType e23 = em.mkArrayType(e8, e17);
        Expr e24 = em.mkVar("invocationOp", e23);
        Expr e25 = em.mkVar("currentInvocation", e8);
        Expr e27 = e22.getConstructor();
        SortType e30 = em.mkSort("TxId");
        Expr e31 = em.mkBoundVar("bound_tx", e30);
        DatatypeConstructor e33 = new DatatypeConstructor("Uncommitted");
        DatatypeConstructor e34 = new DatatypeConstructor("Committed");
        Datatype e35 = new Datatype("transactionStatus");
        e35.addConstructor(e33);
        e35.addConstructor(e34);
        DatatypeType e36 = em.mkDatatypeType(e35);
        DatatypeConstructor e37 = e36.getDatatype().get("Uncommitted");
        DatatypeConstructor e38 = e36.getDatatype().get("Committed");
        Datatype e39 = new Datatype("Option_transactionStatus");
        DatatypeConstructor e40 = new DatatypeConstructor("None_transactionStatus");
        DatatypeConstructor e41 = new DatatypeConstructor("Some_transactionStatus");
        e41.addArg("Some_transactionStatus_value", e36);
        e39.addConstructor(e40);
        e39.addConstructor(e41);
        DatatypeType e42 = em.mkDatatypeType(e39);
        DatatypeConstructor e43 = e42.getDatatype().get("None_transactionStatus");
        DatatypeConstructor e44 = e42.getDatatype().get("Some_transactionStatus");
        ArrayType e45 = em.mkArrayType(e30, e42);
        Expr e46 = em.mkVar("transactionStatus", e45);
        Expr e47 = em.mkExpr(Kind.SELECT, e46, e31);
        Expr e48 = e44.getConstructor();
        Expr e49 = e37.getConstructor();
        Expr e50 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e49);
        Expr e51 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e48, e50);
        Expr e52 = em.mkExpr(Kind.EQUAL, e47, e51);
        Expr e53 = em.mkExpr(Kind.NOT, e52);
        Expr e55 = em.mkBoundVar("bound_r", e8);
        Expr e56 = em.mkExpr(Kind.BOUND_VAR_LIST, e55);
        Expr e57 = em.mkBoundVar("bound_g", e8);
        Expr e58 = em.mkExpr(Kind.BOUND_VAR_LIST, e57);
        Expr e59 = em.mkBoundVar("bound_u", e10);
        Expr e60 = em.mkExpr(Kind.BOUND_VAR_LIST, e59);
        Expr e61 = em.mkExpr(Kind.SELECT, e24, e55);
        vectorExpr e62 = new vectorExpr();
        e62.add(e59);
        Expr e63 = e18.getConstructor();
        Expr e64 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e63, e62);
        Expr e65 = em.mkExpr(Kind.EQUAL, e61, e64);
        Expr e66 = em.mkExpr(Kind.SELECT, e24, e57);
        vectorExpr e67 = new vectorExpr();
        e67.add(e59);
        Expr e68 = e21.getConstructor();
        Expr e69 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e68, e67);
        Expr e70 = em.mkExpr(Kind.EQUAL, e66, e69);
        Expr e71 = em.mkExpr(Kind.AND, e65, e70);
        SortType e72 = em.mkSort("CallId");
        SetType e73 = em.mkSetType(e72);
        ArrayType e74 = em.mkArrayType(e8, e73);
        Expr e75 = em.mkVar("invocationCalls", e74);
        Expr e76 = em.mkExpr(Kind.SELECT, e75, e55);
        EmptySet e77 = new EmptySet(e73);
        Expr e78 = em.mkConst(e77);
        Expr e79 = em.mkExpr(Kind.EQUAL, e76, e78);
        Expr e80 = em.mkExpr(Kind.NOT, e79);
        Expr e81 = em.mkExpr(Kind.SELECT, e75, e57);
        Expr e82 = em.mkExpr(Kind.EQUAL, e81, e78);
        Expr e83 = em.mkExpr(Kind.NOT, e82);
        Expr e84 = em.mkExpr(Kind.AND, e80, e83);
        Expr e85 = em.mkBoundVar("bound_ca", e72);
        Expr e86 = em.mkExpr(Kind.BOUND_VAR_LIST, e85);
        Expr e87 = em.mkExpr(Kind.SELECT, e75, e55);
        Expr e88 = em.mkExpr(Kind.MEMBER, e85, e87);
        Expr e89 = em.mkBoundVar("bound_cb", e72);
        Expr e90 = em.mkExpr(Kind.BOUND_VAR_LIST, e89);
        Expr e91 = em.mkExpr(Kind.SELECT, e75, e57);
        Expr e92 = em.mkExpr(Kind.MEMBER, e89, e91);
        ArrayType e93 = em.mkArrayType(e72, e73);
        Expr e94 = em.mkVar("happensBefore", e93);
        Expr e95 = em.mkExpr(Kind.SELECT, e94, e89);
        Expr e96 = em.mkExpr(Kind.MEMBER, e85, e95);
        Expr e97 = em.mkExpr(Kind.IMPLIES, e92, e96);
        Expr e98 = em.mkExpr(Kind.FORALL, e90, e97);
        Expr e99 = em.mkExpr(Kind.IMPLIES, e88, e98);
        Expr e100 = em.mkExpr(Kind.FORALL, e86, e99);
        Expr e101 = em.mkExpr(Kind.AND, e84, e100);
        Expr e102 = em.mkExpr(Kind.AND, e71, e101);
        DatatypeConstructor e103 = new DatatypeConstructor("NoResult");
        DatatypeConstructor e104 = new DatatypeConstructor("getUser_res");
        DatatypeConstructor e105 = new DatatypeConstructor("notFound");
        DatatypeConstructor e106 = new DatatypeConstructor("found");
        e106.addArg("name1", e12);
        e106.addArg("mail1", e12);
        Datatype e107 = new Datatype("getUserResult");
        e107.addConstructor(e105);
        e107.addConstructor(e106);
        DatatypeType e108 = em.mkDatatypeType(e107);
        DatatypeConstructor e109 = e108.getDatatype().get("notFound");
        e104.addArg("getUser_res_arg", e108);
        DatatypeConstructor e111 = new DatatypeConstructor("registerUser_res");
        e111.addArg("registerUser_res_arg", e10);
        DatatypeConstructor e112 = new DatatypeConstructor("removeUser_res");
        DatatypeConstructor e113 = new DatatypeConstructor("updateMail_res");
        Datatype e114 = new Datatype("invocationResult");
        e114.addConstructor(e103);
        e114.addConstructor(e104);
        e114.addConstructor(e111);
        e114.addConstructor(e112);
        e114.addConstructor(e113);
        DatatypeType e115 = em.mkDatatypeType(e114);
        DatatypeConstructor e116 = e115.getDatatype().get("NoResult");
        DatatypeConstructor e117 = e115.getDatatype().get("getUser_res");
        ArrayType e121 = em.mkArrayType(e8, e115);
        Expr e122 = em.mkVar("invocationRes", e121);
        Expr e123 = em.mkExpr(Kind.SELECT, e122, e57);
        vectorExpr e124 = new vectorExpr();
        Expr e125 = e109.getConstructor();
        Expr e126 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e125, e124);
        vectorExpr e127 = new vectorExpr();
        e127.add(e126);
        Expr e128 = e117.getConstructor();
        Expr e129 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e128, e127);
        Expr e130 = em.mkExpr(Kind.EQUAL, e123, e129);
        Expr e131 = em.mkExpr(Kind.IMPLIES, e102, e130);
        Expr e132 = em.mkExpr(Kind.FORALL, e60, e131);
        Expr e133 = em.mkExpr(Kind.FORALL, e58, e132);
        Expr e135 = em.mkBoundVar("bound_u1", e10);
        Expr e137 = em.mkBoundVar("bound_i", e8);
        Expr e139 = em.mkExpr(Kind.SELECT, e24, e137);
        vectorExpr e140 = new vectorExpr();
        e140.add(e135);
        Expr e141 = e18.getConstructor();
        Expr e142 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e141, e140);
        Expr e143 = em.mkExpr(Kind.EQUAL, e139, e142);
        Expr e144 = em.mkExpr(Kind.SELECT, e122, e137);
        vectorExpr e145 = new vectorExpr();
        Expr e146 = e116.getConstructor();
        Expr e147 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e146, e145);
        Expr e148 = em.mkExpr(Kind.EQUAL, e144, e147);
        Expr e149 = em.mkExpr(Kind.NOT, e148);
        Expr e150 = em.mkExpr(Kind.AND, e143, e149);
        Expr e151 = em.mkBoundVar("bound_c", e72);
        Expr e152 = em.mkExpr(Kind.BOUND_VAR_LIST, e151);
        Datatype e153 = new Datatype("Option_TxId");
        DatatypeConstructor e154 = new DatatypeConstructor("None_TxId");
        DatatypeConstructor e155 = new DatatypeConstructor("Some_TxId");
        e155.addArg("Some_TxId_value", e30);
        e153.addConstructor(e154);
        e153.addConstructor(e155);
        DatatypeType e156 = em.mkDatatypeType(e153);
        DatatypeConstructor e157 = e156.getDatatype().get("None_TxId");
        DatatypeConstructor e158 = e156.getDatatype().get("Some_TxId");
        ArrayType e159 = em.mkArrayType(e72, e156);
        Expr e160 = em.mkVar("callOrigin", e159);
        Expr e161 = em.mkExpr(Kind.SELECT, e160, e151);
        Datatype e162 = new Datatype("Option_InvocationId");
        DatatypeConstructor e163 = new DatatypeConstructor("None_InvocationId");
        DatatypeConstructor e164 = new DatatypeConstructor("Some_InvocationId");
        e164.addArg("Some_InvocationId_value", e8);
        e162.addConstructor(e163);
        e162.addConstructor(e164);
        DatatypeType e165 = em.mkDatatypeType(e162);
        DatatypeConstructor e166 = e165.getDatatype().get("None_InvocationId");
        DatatypeConstructor e167 = e165.getDatatype().get("Some_InvocationId");
        Expr e168 = e166.getConstructor();
        Expr e169 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e168);
        Expr e170 = e158.getSelector("Some_TxId_value");
        Expr e171 = em.mkExpr(Kind.APPLY_SELECTOR_TOTAL, e170, e161);
        ArrayType e172 = em.mkArrayType(e30, e165);
        Expr e173 = em.mkVar("transactionOrigin", e172);
        Expr e174 = em.mkExpr(Kind.SELECT, e173, e171);
        Expr e175 = e157.getTester();
        Expr e176 = em.mkExpr(Kind.APPLY_TESTER, e175, e161);
        Expr e177 = em.mkExpr(Kind.ITE, e176, e169, e174);
        Expr e178 = e167.getConstructor();
        Expr e179 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e178, e137);
        Expr e180 = em.mkExpr(Kind.EQUAL, e177, e179);
        DatatypeConstructor e181 = new DatatypeConstructor("queryop_user_mail_get");
        e181.addArg("key5", e10);
        e181.addArg("result2", e12);
        DatatypeConstructor e182 = new DatatypeConstructor("queryop_user_name_isEqualTo");
        e182.addArg("key4", e10);
        e182.addArg("other", e12);
        BooleanType e183 = em.booleanType();
        e182.addArg("result1", e183);
        DatatypeConstructor e184 = new DatatypeConstructor("user_delete");
        e184.addArg("key2", e10);
        DatatypeConstructor e185 = new DatatypeConstructor("queryop_user_mail_isEqualTo");
        e185.addArg("key6", e10);
        e185.addArg("other1", e12);
        e185.addArg("result3", e183);
        DatatypeConstructor e186 = new DatatypeConstructor("user_mail_assign");
        e186.addArg("key1", e10);
        e186.addArg("value1", e12);
        DatatypeConstructor e187 = new DatatypeConstructor("user_name_assign");
        e187.addArg("key", e10);
        e187.addArg("value", e12);
        DatatypeConstructor e188 = new DatatypeConstructor("queryop_user_name_get");
        e188.addArg("key3", e10);
        e188.addArg("result", e12);
        DatatypeConstructor e189 = new DatatypeConstructor("queryop_user_exists");
        e189.addArg("key7", e10);
        e189.addArg("result4", e183);
        DatatypeConstructor e190 = new DatatypeConstructor("no_call");
        Datatype e191 = new Datatype("callInfo");
        e191.addConstructor(e181);
        e191.addConstructor(e182);
        e191.addConstructor(e184);
        e191.addConstructor(e185);
        e191.addConstructor(e186);
        e191.addConstructor(e187);
        e191.addConstructor(e188);
        e191.addConstructor(e189);
        e191.addConstructor(e190);
        DatatypeType e192 = em.mkDatatypeType(e191);
        DatatypeConstructor e195 = e192.getDatatype().get("user_delete");
        DatatypeConstructor e197 = e192.getDatatype().get("user_mail_assign");
        DatatypeConstructor e198 = e192.getDatatype().get("user_name_assign");
        DatatypeConstructor e201 = e192.getDatatype().get("no_call");
        ArrayType e202 = em.mkArrayType(e72, e192);
        Expr e203 = em.mkVar("calls", e202);
        Expr e204 = em.mkExpr(Kind.SELECT, e203, e151);
        vectorExpr e205 = new vectorExpr();
        e205.add(e135);
        Expr e206 = e195.getConstructor();
        Expr e207 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e206, e205);
        Expr e208 = em.mkExpr(Kind.EQUAL, e204, e207);
        Expr e209 = em.mkExpr(Kind.AND, e180, e208);
        Expr e210 = em.mkExpr(Kind.EXISTS, e152, e209);
        Expr e211 = em.mkExpr(Kind.IMPLIES, e150, e210);
        Expr e214 = em.mkBoundVar("bound_write", e72);
        Expr e216 = em.mkBoundVar("bound_delete", e72);
        Expr e217 = em.mkExpr(Kind.BOUND_VAR_LIST, e216);
        Expr e218 = em.mkBoundVar("bound_u2", e10);
        Expr e219 = em.mkExpr(Kind.BOUND_VAR_LIST, e218);
        Expr e220 = em.mkBoundVar("bound_v", e12);
        Expr e221 = em.mkExpr(Kind.BOUND_VAR_LIST, e220);
        Expr e222 = em.mkExpr(Kind.SELECT, e203, e214);
        vectorExpr e223 = new vectorExpr();
        e223.add(e218);
        e223.add(e220);
        Expr e224 = e197.getConstructor();
        Expr e225 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e224, e223);
        Expr e226 = em.mkExpr(Kind.EQUAL, e222, e225);
        vectorExpr e227 = new vectorExpr();
        e227.add(e218);
        e227.add(e220);
        Expr e228 = e198.getConstructor();
        Expr e229 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e228, e227);
        Expr e230 = em.mkExpr(Kind.EQUAL, e222, e229);
        Expr e231 = em.mkExpr(Kind.OR, e226, e230);
        Expr e232 = em.mkExpr(Kind.SELECT, e203, e216);
        vectorExpr e233 = new vectorExpr();
        e233.add(e218);
        Expr e234 = e195.getConstructor();
        Expr e235 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e234, e233);
        Expr e236 = em.mkExpr(Kind.EQUAL, e232, e235);
        Expr e237 = em.mkExpr(Kind.AND, e231, e236);
        Expr e238 = em.mkExpr(Kind.SELECT, e94, e214);
        Expr e239 = em.mkExpr(Kind.MEMBER, e216, e238);
        Expr e240 = em.mkExpr(Kind.AND, e237, e239);
        Expr e241 = em.mkExpr(Kind.EXISTS, e221, e240);
        Expr e242 = em.mkExpr(Kind.EXISTS, e219, e241);
        EmptySet e247 = new EmptySet(e73);
        Expr e250 = em.mkVar("name_init", e12);
        Expr e251 = em.mkVar("mail_init", e12);
        vectorExpr e252 = new vectorExpr();
        e252.add(e250);
        e252.add(e251);
        Expr e253 = e20.getConstructor();
        Expr e254 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e253, e252);
        Expr e255 = em.mkExpr(Kind.STORE, e24, e25, e254);
        vectorExpr e294 = new vectorExpr();
        Expr e295 = e109.getConstructor();
        Expr e296 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e295, e294);
        vectorExpr e297 = new vectorExpr();
        e297.add(e296);
        vectorExpr e311 = new vectorExpr();
        Expr e312 = e116.getConstructor();
        Expr e313 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e312, e311);
        Expr e373 = em.mkBoundVar("c", e72);
        Expr e374 = em.mkExpr(Kind.BOUND_VAR_LIST, e373);
        Expr e375 = em.mkBoundVar("tx1", e30);
        Expr e376 = em.mkExpr(Kind.BOUND_VAR_LIST, e375);
        Expr e377 = em.mkExpr(Kind.SELECT, e160, e373);
        Expr e378 = e158.getConstructor();
        Expr e379 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e378, e375);
        Expr e380 = em.mkExpr(Kind.EQUAL, e377, e379);
        Expr e381 = em.mkVar("callOrigin1", e159);
        Expr e382 = em.mkExpr(Kind.SELECT, e381, e373);
        Expr e383 = em.mkExpr(Kind.EQUAL, e382, e379);
        Expr e384 = em.mkExpr(Kind.IMPLIES, e380, e383);
        Expr e387 = em.mkBoundVar("tx2", e30);
        Expr e389 = em.mkExpr(Kind.SELECT, e46, e387);
        Expr e390 = e44.getConstructor();
        Expr e391 = e38.getConstructor();
        Expr e392 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e391);
        Expr e393 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e390, e392);
        Expr e394 = em.mkExpr(Kind.EQUAL, e389, e393);
        Expr e395 = em.mkVar("transactionStatus1", e45);
        Expr e396 = em.mkExpr(Kind.SELECT, e395, e387);
        Expr e397 = em.mkExpr(Kind.EQUAL, e396, e393);
        Expr e400 = em.mkBoundVar("bound_i1", e8);
        Expr e402 = em.mkBoundVar("bound_c2", e72);
        Expr e404 = em.mkVar("invocationCalls1", e74);
        Expr e405 = em.mkExpr(Kind.SELECT, e404, e400);
        Expr e406 = em.mkExpr(Kind.MEMBER, e402, e405);
        Expr e407 = em.mkBoundVar("bound_tx3", e30);
        Expr e408 = em.mkExpr(Kind.BOUND_VAR_LIST, e407);
        Expr e409 = em.mkExpr(Kind.SELECT, e381, e402);
        Expr e410 = e158.getConstructor();
        Expr e411 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e410, e407);
        Expr e412 = em.mkExpr(Kind.EQUAL, e409, e411);
        Expr e413 = em.mkVar("transactionOrigin1", e172);
        Expr e414 = em.mkExpr(Kind.SELECT, e413, e407);
        Expr e415 = e167.getConstructor();
        Expr e416 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e415, e400);
        Expr e417 = em.mkExpr(Kind.EQUAL, e414, e416);
        Expr e418 = em.mkExpr(Kind.AND, e412, e417);
        Expr e419 = em.mkExpr(Kind.EXISTS, e408, e418);
        Expr e423 = em.mkBoundVar("bound_c3", e72);
        Expr e425 = em.mkExpr(Kind.SELECT, e381, e423);
        Expr e426 = e157.getConstructor();
        Expr e429 = em.mkVar("calls1", e202);
        Expr e431 = e201.getConstructor();
        Expr e436 = em.mkBoundVar("bound_tx4", e30);
        Expr e439 = e43.getConstructor();
        Expr e442 = em.mkBoundVar("bound_c4", e72);
        Expr e444 = em.mkExpr(Kind.SELECT, e381, e442);
        Expr e445 = e158.getConstructor();
        Expr e446 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e445, e436);
        Expr e447 = em.mkExpr(Kind.EQUAL, e444, e446);
        Expr e458 = em.mkVar("happensBefore1", e93);
        Expr e497 = em.mkBoundVar("bound_i2", e8);
        vectorExpr e503 = new vectorExpr();
        e503.add(e250);
        e503.add(e251);
        Expr e504 = e20.getConstructor();
        Expr e505 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e504, e503);
        Expr e506 = em.mkExpr(Kind.STORE, e24, e25, e505);
        Expr e508 = e22.getConstructor();
        Expr e515 = em.mkVar("tx", e30);
        Expr e532 = em.mkBoundVar("bound_r1", e8);
        Expr e534 = em.mkBoundVar("bound_g1", e8);
        Expr e536 = em.mkBoundVar("bound_u4", e10);
        vectorExpr e538 = new vectorExpr();
        e538.add(e250);
        e538.add(e251);
        Expr e539 = e20.getConstructor();
        Expr e540 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e539, e538);
        Expr e541 = em.mkExpr(Kind.STORE, e24, e25, e540);
        Expr e542 = em.mkExpr(Kind.SELECT, e541, e532);
        vectorExpr e543 = new vectorExpr();
        e543.add(e536);
        Expr e544 = e18.getConstructor();
        Expr e545 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e544, e543);
        Expr e546 = em.mkExpr(Kind.EQUAL, e542, e545);
        Expr e547 = em.mkExpr(Kind.SELECT, e541, e534);
        vectorExpr e548 = new vectorExpr();
        e548.add(e536);
        Expr e549 = e21.getConstructor();
        Expr e550 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e549, e548);
        Expr e551 = em.mkExpr(Kind.EQUAL, e547, e550);
        Expr e552 = em.mkExpr(Kind.AND, e546, e551);
        Expr e553 = em.mkExpr(Kind.SELECT, e404, e532);
        EmptySet e554 = new EmptySet(e73);
        Expr e555 = em.mkConst(e554);
        Expr e556 = em.mkExpr(Kind.EQUAL, e553, e555);
        Expr e557 = em.mkExpr(Kind.NOT, e556);
        Expr e558 = em.mkExpr(Kind.SELECT, e404, e534);
        Expr e559 = em.mkExpr(Kind.EQUAL, e558, e555);
        Expr e560 = em.mkExpr(Kind.NOT, e559);
        Expr e561 = em.mkExpr(Kind.AND, e557, e560);
        Expr e562 = em.mkBoundVar("bound_ca4", e72);
        Expr e563 = em.mkExpr(Kind.BOUND_VAR_LIST, e562);
        Expr e564 = em.mkExpr(Kind.SELECT, e404, e532);
        Expr e565 = em.mkExpr(Kind.MEMBER, e562, e564);
        Expr e566 = em.mkBoundVar("bound_cb3", e72);
        Expr e567 = em.mkExpr(Kind.BOUND_VAR_LIST, e566);
        Expr e568 = em.mkExpr(Kind.SELECT, e404, e534);
        Expr e569 = em.mkExpr(Kind.MEMBER, e566, e568);
        Expr e570 = em.mkExpr(Kind.SELECT, e458, e566);
        Expr e571 = em.mkExpr(Kind.MEMBER, e562, e570);
        Expr e572 = em.mkExpr(Kind.IMPLIES, e569, e571);
        Expr e573 = em.mkExpr(Kind.FORALL, e567, e572);
        Expr e574 = em.mkExpr(Kind.IMPLIES, e565, e573);
        Expr e575 = em.mkExpr(Kind.FORALL, e563, e574);
        Expr e576 = em.mkExpr(Kind.AND, e561, e575);
        Expr e577 = em.mkExpr(Kind.AND, e552, e576);
        Expr e578 = em.mkExpr(Kind.SELECT, e122, e534);
        vectorExpr e579 = new vectorExpr();
        Expr e580 = e109.getConstructor();
        Expr e581 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e580, e579);
        vectorExpr e582 = new vectorExpr();
        e582.add(e581);
        Expr e583 = e117.getConstructor();
        Expr e584 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e583, e582);
        Expr e585 = em.mkExpr(Kind.EQUAL, e578, e584);
        Expr e590 = em.mkBoundVar("bound_u5", e10);
        Expr e591 = em.mkExpr(Kind.BOUND_VAR_LIST, e590);
        Expr e592 = em.mkBoundVar("bound_i3", e8);
        Expr e593 = em.mkExpr(Kind.BOUND_VAR_LIST, e592);
        vectorExpr e594 = new vectorExpr();
        e594.add(e250);
        e594.add(e251);
        Expr e595 = e20.getConstructor();
        Expr e596 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e595, e594);
        Expr e597 = em.mkExpr(Kind.STORE, e24, e25, e596);
        Expr e598 = em.mkExpr(Kind.SELECT, e597, e592);
        vectorExpr e599 = new vectorExpr();
        e599.add(e590);
        Expr e600 = e18.getConstructor();
        Expr e601 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e600, e599);
        Expr e602 = em.mkExpr(Kind.EQUAL, e598, e601);
        Expr e603 = em.mkExpr(Kind.SELECT, e122, e592);
        vectorExpr e604 = new vectorExpr();
        Expr e605 = e116.getConstructor();
        Expr e606 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e605, e604);
        Expr e607 = em.mkExpr(Kind.EQUAL, e603, e606);
        Expr e608 = em.mkExpr(Kind.NOT, e607);
        Expr e609 = em.mkExpr(Kind.AND, e602, e608);
        Expr e610 = em.mkBoundVar("bound_c6", e72);
        Expr e611 = em.mkExpr(Kind.BOUND_VAR_LIST, e610);
        Expr e612 = em.mkExpr(Kind.SELECT, e381, e610);
        Expr e613 = e166.getConstructor();
        Expr e614 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e613);
        Expr e615 = e158.getSelector("Some_TxId_value");
        Expr e616 = em.mkExpr(Kind.APPLY_SELECTOR_TOTAL, e615, e612);
        Expr e617 = em.mkExpr(Kind.SELECT, e413, e616);
        Expr e618 = e157.getTester();
        Expr e619 = em.mkExpr(Kind.APPLY_TESTER, e618, e612);
        Expr e620 = em.mkExpr(Kind.ITE, e619, e614, e617);
        Expr e621 = e167.getConstructor();
        Expr e622 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e621, e592);
        Expr e623 = em.mkExpr(Kind.EQUAL, e620, e622);
        Expr e624 = em.mkExpr(Kind.SELECT, e429, e610);
        vectorExpr e625 = new vectorExpr();
        e625.add(e590);
        Expr e626 = e195.getConstructor();
        Expr e627 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e626, e625);
        Expr e628 = em.mkExpr(Kind.EQUAL, e624, e627);
        Expr e629 = em.mkExpr(Kind.AND, e623, e628);
        Expr e630 = em.mkExpr(Kind.EXISTS, e611, e629);
        Expr e631 = em.mkExpr(Kind.IMPLIES, e609, e630);
        Expr e632 = em.mkExpr(Kind.FORALL, e593, e631);
        Expr e633 = em.mkExpr(Kind.FORALL, e591, e632);
        assertFormula(smt, "e633", e633);
        Expr e634 = em.mkBoundVar("bound_write2", e72);
        Expr e636 = em.mkBoundVar("bound_delete2", e72);
        Expr e638 = em.mkBoundVar("bound_u6", e10);
        Expr e639 = em.mkExpr(Kind.BOUND_VAR_LIST, e638);
        Expr e640 = em.mkBoundVar("bound_v2", e12);
        Expr e641 = em.mkExpr(Kind.BOUND_VAR_LIST, e640);
        Expr e642 = em.mkExpr(Kind.SELECT, e429, e634);
        vectorExpr e643 = new vectorExpr();
        e643.add(e638);
        e643.add(e640);
        Expr e644 = e197.getConstructor();
        Expr e645 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e644, e643);
        Expr e646 = em.mkExpr(Kind.EQUAL, e642, e645);
        vectorExpr e647 = new vectorExpr();
        e647.add(e638);
        e647.add(e640);
        Expr e648 = e198.getConstructor();
        Expr e649 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e648, e647);
        Expr e650 = em.mkExpr(Kind.EQUAL, e642, e649);
        Expr e651 = em.mkExpr(Kind.OR, e646, e650);
        Expr e652 = em.mkExpr(Kind.SELECT, e429, e636);
        vectorExpr e653 = new vectorExpr();
        e653.add(e638);
        Expr e654 = e195.getConstructor();
        Expr e655 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e654, e653);
        Expr e656 = em.mkExpr(Kind.EQUAL, e652, e655);
        Expr e657 = em.mkExpr(Kind.AND, e651, e656);
        Expr e658 = em.mkExpr(Kind.SELECT, e458, e634);
        Expr e659 = em.mkExpr(Kind.MEMBER, e636, e658);
        Expr e660 = em.mkExpr(Kind.AND, e657, e659);
        Expr e661 = em.mkExpr(Kind.EXISTS, e641, e660);
        Expr e662 = em.mkExpr(Kind.EXISTS, e639, e661);
        // assertFormula(smt, "e665", e665);
        Expr e666 = em.mkBoundVar("bound_tx21", e30);
        Expr e668 = em.mkExpr(Kind.SELECT, e395, e666);
        Expr e669 = e44.getConstructor();
        Expr e670 = e37.getConstructor();
        Expr e671 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e670);
        Expr e672 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e669, e671);
        Expr e673 = em.mkExpr(Kind.EQUAL, e668, e672);
        Expr e676 = em.mkBoundVar("bound_x", e30);
        SetType e678 = em.mkSetType(e30);
        Expr e679 = em.mkVar("newTxns", e678);
        Expr e681 = em.mkExpr(Kind.SELECT, e395, e676);
        Expr e682 = e43.getConstructor();
        Expr e683 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e682);
        Expr e684 = em.mkExpr(Kind.EQUAL, e681, e683);
        Expr e688 = em.mkVar("vis", e73);
        ArrayType e692 = em.mkArrayType(e10, e165);
        Expr e694 = em.mkVar("u2", e10);
        Expr e700 = em.mkVar("c0", e72);
        Expr e701 = em.mkExpr(Kind.SELECT, e429, e700);
        Expr e702 = e201.getConstructor();
        Expr e703 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e702);
        Expr e704 = em.mkExpr(Kind.EQUAL, e701, e703);
        assertFormula(smt, "e704", e704);
        Expr e705 = em.mkVar("c1", e72);
        vectorExpr e706 = new vectorExpr();
        e706.add(e705);
        e706.add(e700);
        // assertFormula(smt, "e707", e707);
        Expr e708 = e198.getConstructor();
        vectorExpr e709 = new vectorExpr();
        e709.add(e694);
        e709.add(e250);
        Expr e710 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e708, e709);
        Expr e711 = em.mkExpr(Kind.STORE, e429, e700, e710);
        Expr e712 = em.mkExpr(Kind.SELECT, e711, e705);
        Expr e713 = em.mkExpr(Kind.EQUAL, e712, e703);
        assertFormula(smt, "e713", e713);
        Expr e714 = em.mkBoundVar("bound_i4", e8);
        Expr e715 = em.mkExpr(Kind.BOUND_VAR_LIST, e714);
        Expr e716 = em.mkBoundVar("bound_c7", e72);
        Expr e717 = em.mkExpr(Kind.BOUND_VAR_LIST, e716);
        Expr e718 = em.mkExpr(Kind.SINGLETON, e705);
        vectorExpr e719 = new vectorExpr();
        e719.add(e700);
        e719.add(e718);
        Expr e720 = em.mkExpr(Kind.INSERT, e719);
        Expr e721 = em.mkExpr(Kind.STORE, e404, e25, e720);
        Expr e722 = em.mkExpr(Kind.SELECT, e721, e714);
        Expr e723 = em.mkExpr(Kind.MEMBER, e716, e722);
        Expr e724 = em.mkBoundVar("bound_tx8", e30);
        Expr e725 = em.mkExpr(Kind.BOUND_VAR_LIST, e724);
        Expr e726 = e158.getConstructor();
        Expr e727 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e726, e515);
        Expr e728 = em.mkExpr(Kind.STORE, e381, e700, e727);
        Expr e729 = em.mkExpr(Kind.STORE, e728, e705, e727);
        Expr e730 = em.mkExpr(Kind.SELECT, e729, e716);
        Expr e731 = e158.getConstructor();
        Expr e732 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e731, e724);
        Expr e733 = em.mkExpr(Kind.EQUAL, e730, e732);
        Expr e734 = e167.getConstructor();
        Expr e735 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e734, e25);
        Expr e736 = em.mkExpr(Kind.STORE, e413, e515, e735);
        Expr e737 = em.mkExpr(Kind.SELECT, e736, e724);
        Expr e738 = e167.getConstructor();
        Expr e739 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e738, e714);
        Expr e740 = em.mkExpr(Kind.EQUAL, e737, e739);
        Expr e741 = em.mkExpr(Kind.AND, e733, e740);
        Expr e742 = em.mkExpr(Kind.EXISTS, e725, e741);
        Expr e743 = em.mkExpr(Kind.EQUAL, e723, e742);
        Expr e744 = em.mkExpr(Kind.FORALL, e717, e743);
        Expr e745 = em.mkExpr(Kind.FORALL, e715, e744);
        assertFormula(smt, "e745", e745);
        Expr e746 = em.mkBoundVar("bound_c8", e72);
        Expr e748 = e158.getConstructor();
        Expr e749 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e748, e515);
        Expr e750 = em.mkExpr(Kind.STORE, e381, e700, e749);
        Expr e751 = em.mkExpr(Kind.STORE, e750, e705, e749);
        Expr e752 = em.mkExpr(Kind.SELECT, e751, e746);
        Expr e753 = e157.getConstructor();
        Expr e754 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e753);
        Expr e756 = e198.getConstructor();
        vectorExpr e757 = new vectorExpr();
        e757.add(e694);
        e757.add(e250);
        Expr e758 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e756, e757);
        Expr e759 = em.mkExpr(Kind.STORE, e429, e700, e758);
        Expr e760 = e197.getConstructor();
        vectorExpr e761 = new vectorExpr();
        e761.add(e694);
        e761.add(e251);
        Expr e762 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e760, e761);
        Expr e763 = em.mkExpr(Kind.STORE, e759, e705, e762);
        Expr e764 = em.mkExpr(Kind.SELECT, e763, e746);
        Expr e765 = e201.getConstructor();
        Expr e766 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e765);
        Expr e770 = em.mkBoundVar("bound_tx9", e30);
        Expr e772 = e44.getConstructor();
        Expr e773 = e38.getConstructor();
        Expr e774 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e773);
        Expr e775 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e772, e774);
        Expr e776 = em.mkExpr(Kind.STORE, e395, e515, e775);
        Expr e777 = em.mkExpr(Kind.SELECT, e776, e770);
        Expr e778 = e43.getConstructor();
        Expr e779 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e778);
        Expr e781 = em.mkBoundVar("bound_c9", e72);
        Expr e782 = em.mkExpr(Kind.BOUND_VAR_LIST, e781);
        Expr e783 = e158.getConstructor();
        Expr e784 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e783, e515);
        Expr e785 = em.mkExpr(Kind.STORE, e381, e700, e784);
        Expr e786 = em.mkExpr(Kind.STORE, e785, e705, e784);
        Expr e787 = em.mkExpr(Kind.SELECT, e786, e781);
        Expr e788 = e158.getConstructor();
        Expr e789 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e788, e770);
        Expr e790 = em.mkExpr(Kind.EQUAL, e787, e789);
        Expr e791 = em.mkExpr(Kind.NOT, e790);
        Expr e792 = em.mkExpr(Kind.FORALL, e782, e791);
        // assertFormula(smt, "e794", e794);
        Expr e795 = em.mkBoundVar("bound_c10", e72);
        Expr e797 = e158.getConstructor();
        Expr e798 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e797, e515);
        Expr e799 = em.mkExpr(Kind.STORE, e381, e700, e798);
        Expr e800 = em.mkExpr(Kind.STORE, e799, e705, e798);
        Expr e801 = em.mkExpr(Kind.SELECT, e800, e795);
        Expr e802 = e157.getConstructor();
        Expr e803 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e802);
        Expr e804 = em.mkExpr(Kind.EQUAL, e801, e803);
        Expr e805 = em.mkExpr(Kind.STORE, e458, e700, e688);
        vectorExpr e806 = new vectorExpr();
        e806.add(e700);
        e806.add(e688);
        Expr e807 = em.mkExpr(Kind.INSERT, e806);
        Expr e808 = em.mkExpr(Kind.STORE, e805, e705, e807);
        Expr e809 = em.mkExpr(Kind.SELECT, e808, e795);
        EmptySet e810 = new EmptySet(e73);
        Expr e811 = em.mkConst(e810);
        Expr e812 = em.mkExpr(Kind.EQUAL, e809, e811);
        // assertFormula(smt, "e814", e814);
        Expr e815 = em.mkBoundVar("bound_ca5", e72);
        Expr e817 = em.mkBoundVar("bound_cb4", e72);
        Expr e818 = em.mkExpr(Kind.BOUND_VAR_LIST, e817);
        Expr e819 = e158.getConstructor();
        Expr e820 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e819, e515);
        Expr e821 = em.mkExpr(Kind.STORE, e381, e700, e820);
        Expr e822 = em.mkExpr(Kind.STORE, e821, e705, e820);
        Expr e823 = em.mkExpr(Kind.SELECT, e822, e815);
        Expr e824 = e157.getConstructor();
        Expr e825 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e824);
        Expr e826 = em.mkExpr(Kind.EQUAL, e823, e825);
        Expr e827 = em.mkExpr(Kind.STORE, e458, e700, e688);
        vectorExpr e828 = new vectorExpr();
        e828.add(e700);
        e828.add(e688);
        Expr e829 = em.mkExpr(Kind.INSERT, e828);
        Expr e830 = em.mkExpr(Kind.STORE, e827, e705, e829);
        Expr e831 = em.mkExpr(Kind.SELECT, e830, e817);
        Expr e832 = em.mkExpr(Kind.MEMBER, e815, e831);
        Expr e833 = em.mkExpr(Kind.NOT, e832);
        Expr e834 = em.mkExpr(Kind.IMPLIES, e826, e833);
        Expr e837 = em.mkBoundVar("bound_ca6", e72);
        Expr e839 = em.mkBoundVar("bound_tx10", e30);
        Expr e840 = em.mkExpr(Kind.BOUND_VAR_LIST, e839);
        Expr e841 = e158.getConstructor();
        Expr e842 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e841, e515);
        Expr e843 = em.mkExpr(Kind.STORE, e381, e700, e842);
        Expr e844 = em.mkExpr(Kind.STORE, e843, e705, e842);
        Expr e845 = em.mkExpr(Kind.SELECT, e844, e837);
        Expr e846 = e158.getConstructor();
        Expr e847 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e846, e839);
        Expr e848 = em.mkExpr(Kind.EQUAL, e845, e847);
        Expr e849 = e167.getConstructor();
        Expr e850 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e849, e25);
        Expr e851 = em.mkExpr(Kind.STORE, e413, e515, e850);
        Expr e852 = em.mkExpr(Kind.SELECT, e851, e839);
        Expr e853 = e166.getConstructor();
        Expr e854 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e853);
        Expr e855 = em.mkExpr(Kind.EQUAL, e852, e854);
        Expr e856 = em.mkExpr(Kind.NOT, e855);
        Expr e857 = em.mkExpr(Kind.IMPLIES, e848, e856);
        // assertFormula(smt, "e859", e859);
        Expr e860 = em.mkBoundVar("bound_tx11", e30);
        Expr e862 = em.mkBoundVar("bound_i5", e8);
        Expr e864 = e167.getConstructor();
        Expr e865 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e864, e25);
        Expr e866 = em.mkExpr(Kind.STORE, e413, e515, e865);
        Expr e867 = em.mkExpr(Kind.SELECT, e866, e860);
        Expr e868 = e167.getConstructor();
        Expr e869 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e868, e862);
        Expr e870 = em.mkExpr(Kind.EQUAL, e867, e869);
        vectorExpr e871 = new vectorExpr();
        e871.add(e250);
        e871.add(e251);
        Expr e872 = e20.getConstructor();
        Expr e873 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e872, e871);
        Expr e874 = em.mkExpr(Kind.STORE, e24, e25, e873);
        Expr e875 = em.mkExpr(Kind.SELECT, e874, e862);
        Expr e876 = e22.getConstructor();
        Expr e877 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e876);
        Expr e878 = em.mkExpr(Kind.EQUAL, e875, e877);
        Expr e879 = em.mkExpr(Kind.NOT, e878);
        Expr e880 = em.mkExpr(Kind.IMPLIES, e870, e879);
        smt.push();
        {
            smt.push();
            {
                Expr e940 = em.mkVar("i1", e8);
                Expr e941 = em.mkExpr(Kind.SELECT, e255, e940);
                Expr e942 = em.mkVar("u4", e10);
                vectorExpr e943 = new vectorExpr();
                e943.add(e942);
                Expr e944 = e18.getConstructor();
                Expr e945 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e944, e943);
                Expr e946 = em.mkExpr(Kind.EQUAL, e941, e945);
                Expr e947 = em.mkExpr(Kind.SELECT, e122, e940);
                Expr e948 = em.mkExpr(Kind.EQUAL, e947, e313);
                Expr e949 = em.mkExpr(Kind.NOT, e948);
                Expr e950 = em.mkExpr(Kind.AND, e946, e949);
                Expr e951 = em.mkBoundVar("bound_c11", e72);
                Expr e952 = em.mkExpr(Kind.BOUND_VAR_LIST, e951);
                Expr e953 = e158.getConstructor();
                Expr e954 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e953, e515);
                Expr e955 = em.mkExpr(Kind.STORE, e381, e700, e954);
                Expr e956 = em.mkExpr(Kind.STORE, e955, e705, e954);
                Expr e957 = em.mkExpr(Kind.SELECT, e956, e951);
                Expr e958 = e166.getConstructor();
                Expr e959 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e958);
                Expr e960 = e158.getSelector("Some_TxId_value");
                Expr e961 = em.mkExpr(Kind.APPLY_SELECTOR_TOTAL, e960, e957);
                Expr e962 = e167.getConstructor();
                Expr e963 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e962, e25);
                Expr e964 = em.mkExpr(Kind.STORE, e413, e515, e963);
                Expr e965 = em.mkExpr(Kind.SELECT, e964, e961);
                Expr e966 = e157.getTester();
                Expr e967 = em.mkExpr(Kind.APPLY_TESTER, e966, e957);
                Expr e968 = em.mkExpr(Kind.ITE, e967, e959, e965);
                Expr e969 = e167.getConstructor();
                Expr e970 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e969, e940);
                Expr e971 = em.mkExpr(Kind.EQUAL, e968, e970);
                Expr e972 = e198.getConstructor();
                vectorExpr e973 = new vectorExpr();
                e973.add(e694);
                e973.add(e250);
                Expr e974 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e972, e973);
                Expr e975 = em.mkExpr(Kind.STORE, e429, e700, e974);
                Expr e976 = e197.getConstructor();
                vectorExpr e977 = new vectorExpr();
                e977.add(e694);
                e977.add(e251);
                Expr e978 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e976, e977);
                Expr e979 = em.mkExpr(Kind.STORE, e975, e705, e978);
                Expr e980 = em.mkExpr(Kind.SELECT, e979, e951);
                vectorExpr e981 = new vectorExpr();
                e981.add(e942);
                Expr e982 = e195.getConstructor();
                Expr e983 = em.mkExpr(Kind.APPLY_CONSTRUCTOR, e982, e981);
                Expr e984 = em.mkExpr(Kind.EQUAL, e980, e983);
                Expr e985 = em.mkExpr(Kind.AND, e971, e984);
                Expr e986 = em.mkExpr(Kind.EXISTS, e952, e985);
                Expr e987 = em.mkExpr(Kind.IMPLIES, e950, e986);
                Expr e988 = em.mkExpr(Kind.NOT, e987);
                assertFormula(smt, "e988", e988);


                Result res = smt.checkSat();
                System.out.println("Res = " + res);
            }
        }


//        UnsatCore core = smt.getUnsatCore();
//        JavaIteratorAdapter_UnsatCore it = core.iterator();
//        while (it.hasNext()) {
//            Expr e = it.next();
//            System.out.println("unsat core: " + e);
//        }

        List<Assertion> core = findMinAssertions(assertions);

        System.out.println("core = ");
        if (core != null) {
            for (Assertion s : core) {
                System.out.println("% " + s.name);
                System.out.println(s.formula);
            }
        } else {
            System.out.println("no core (SAT)");
        }
    }

    private static void assertFormula(SmtEngine smt, String v, Expr e) {
        assertions.put(v, e);
        smt.assertFormula(e);
    }

    private static List<Assertion> findMinAssertions(Map<String, Expr> smt) throws IOException {
        List<Assertion> assertionsS = new ArrayList<>();
        for (Map.Entry<String, Expr> e : smt.entrySet()) {
            Expr expr = e.getValue();
            assertionsS.add(new Assertion(e.getKey(), "ASSERT " + expr + ";\n"));
        }

        return findMinAssertionsH(assertionsS);
    }

    private static List<Assertion> findMinAssertionsH(List<Assertion> a) throws IOException {
        if (assertionsUnsat(a)) {
            List<Assertion> a2 = new ArrayList<>();

            for (int i = 0; i < a.size(); i++) {
                for (int j = 0; j < a.size(); j++) {
                    if (i != j) {
                        a2.add(a.get(j));
                    }
                }
                List<Assertion> r = findMinAssertionsH(a2);
                if (r != null) {
                    return r;
                }
                a2.clear();
            }
            return a;
        } else {
            return null;
        }
    }

    private static boolean assertionsUnsat(Collection<Assertion> assertions) throws IOException {
        StringBuilder sb = new StringBuilder();

        sb.append("\n");
        sb.append("OPTION \"finite-model-find\" TRUE;\n");
        sb.append("OPTION \"produce-models\" TRUE;\n");
        sb.append("      InvocationId: TYPE;\n");
        sb.append(" % cardinality = beth[0]\n");
        sb.append("UserId: TYPE;\n");
        sb.append(" % cardinality = beth[0]\n");
        sb.append("String: TYPE;\n");
        sb.append(" % cardinality = beth[0]\n");
        sb.append("DATATYPE invocationInfo =\n");
        sb.append("   removeUser(id1: UserId)\n");
        sb.append(" | updateMail(id: UserId, newMail: String)\n");
        sb.append(" | registerUser(name: String, mail: String)\n");
        sb.append(" | getUser(id2: UserId)\n");
        sb.append(" | no_invocation\n");
        sb.append("END;\n");
        sb.append("\n");
        sb.append("% ARRAY InvocationId OF invocationInfo\n");
        sb.append("TxId: TYPE;\n");
        sb.append(" % cardinality = beth[0]\n");
        sb.append("DATATYPE transactionStatus =\n");
        sb.append("   Uncommitted\n");
        sb.append(" | Committed\n");
        sb.append("END;\n");
        sb.append("\n");
        sb.append("DATATYPE Option_transactionStatus =\n");
        sb.append("   None_transactionStatus\n");
        sb.append(" | Some_transactionStatus(Some_transactionStatus_value: transactionStatus)\n");
        sb.append("END;\n");
        sb.append("\n");
        sb.append("% ARRAY TxId OF Option_transactionStatus\n");
        sb.append("CallId: TYPE;\n");
        sb.append(" % cardinality = beth[0]\n");
        sb.append("% SET OF CallId\n");
        sb.append("% ARRAY InvocationId OF SET OF CallId\n");
        sb.append("% ARRAY CallId OF SET OF CallId\n");
        sb.append("DATATYPE getUserResult =\n");
        sb.append("   notFound\n");
        sb.append(" | found(name1: String, mail1: String)\n");
        sb.append("END;\n");
        sb.append("\n");
        sb.append("DATATYPE invocationResult =\n");
        sb.append("   NoResult\n");
        sb.append(" | getUser_res(getUser_res_arg: getUserResult)\n");
        sb.append(" | registerUser_res(registerUser_res_arg: UserId)\n");
        sb.append(" | removeUser_res\n");
        sb.append(" | updateMail_res\n");
        sb.append("END;\n");
        sb.append("\n");
        sb.append("% ARRAY InvocationId OF invocationResult\n");
        sb.append("DATATYPE Option_TxId =\n");
        sb.append("   None_TxId\n");
        sb.append(" | Some_TxId(Some_TxId_value: TxId)\n");
        sb.append("END;\n");
        sb.append("\n");
        sb.append("% ARRAY CallId OF Option_TxId\n");
        sb.append("DATATYPE Option_InvocationId =\n");
        sb.append("   None_InvocationId\n");
        sb.append(" | Some_InvocationId(Some_InvocationId_value: InvocationId)\n");
        sb.append("END;\n");
        sb.append("\n");
        sb.append("% ARRAY TxId OF Option_InvocationId\n");
        sb.append("% BOOLEAN\n");
        sb.append("DATATYPE callInfo =\n");
        sb.append("   queryop_user_mail_get(key5: UserId, result2: String)\n");
        sb.append(" | queryop_user_name_isEqualTo(key4: UserId, other: String, result1: BOOLEAN)\n");
        sb.append(" | user_delete(key2: UserId)\n");
        sb.append(" | queryop_user_mail_isEqualTo(key6: UserId, other1: String, result3: BOOLEAN)\n");
        sb.append(" | user_mail_assign(key1: UserId, value1: String)\n");
        sb.append(" | user_name_assign(key: UserId, value: String)\n");
        sb.append(" | queryop_user_name_get(key3: UserId, result: String)\n");
        sb.append(" | queryop_user_exists(key7: UserId, result4: BOOLEAN)\n");
        sb.append(" | no_call\n");
        sb.append("END;\n");
        sb.append("\n");
        sb.append("% ARRAY CallId OF callInfo\n");
        sb.append("% SET OF TxId\n");
        sb.append("% ARRAY UserId OF Option_InvocationId\n");
        sb.append("transactionOrigin1: ARRAY TxId OF Option_InvocationId;\n");
        sb.append("invocationRes: ARRAY InvocationId OF invocationResult;\n");
        sb.append("generatedIds_UserId1: ARRAY UserId OF Option_InvocationId;\n");
        sb.append("name_init: String;\n");
        sb.append("u1: UserId;\n");
        sb.append("calls1: ARRAY CallId OF callInfo;\n");
        sb.append("u: UserId;\n");
        sb.append("invocationOp: ARRAY InvocationId OF invocationInfo;\n");
        sb.append("callOrigin: ARRAY CallId OF Option_TxId;\n");
        sb.append("u4: UserId;\n");
        sb.append("invocationCalls: ARRAY InvocationId OF SET OF CallId;\n");
        sb.append("calls: ARRAY CallId OF callInfo;\n");
        sb.append("newCalls: SET OF CallId;\n");
        sb.append("mail_init: String;\n");
        sb.append("vis: SET OF CallId;\n");
        sb.append("g1: InvocationId;\n");
        sb.append("transactionOrigin: ARRAY TxId OF Option_InvocationId;\n");
        sb.append("callOrigin1: ARRAY CallId OF Option_TxId;\n");
        sb.append("i: InvocationId;\n");
        sb.append("transactionStatus1: ARRAY TxId OF Option_transactionStatus;\n");
        sb.append("c1: CallId;\n");
        sb.append("transactionStatus: ARRAY TxId OF Option_transactionStatus;\n");
        sb.append("i1: InvocationId;\n");
        sb.append("u3: UserId;\n");
        sb.append("g: InvocationId;\n");
        sb.append("happensBefore1: ARRAY CallId OF SET OF CallId;\n");
        sb.append("r1: InvocationId;\n");
        sb.append("currentInvocation: InvocationId;\n");
        sb.append("invocationCalls1: ARRAY InvocationId OF SET OF CallId;\n");
        sb.append("c0: CallId;\n");
        sb.append("r: InvocationId;\n");
        sb.append("u2: UserId;\n");
        sb.append("tx: TxId;\n");
        sb.append("happensBefore: ARRAY CallId OF SET OF CallId;\n");
        sb.append("newTxns: SET OF TxId;\n");

        for (Assertion assertion : assertions) {
            sb.append(assertion.formula);
            sb.append("\n");
        }


        sb.append("CHECKSAT;");
        Path f = Paths.get("./model/search" + ++count + ".cvc");
        Files.write(f, sb.toString().getBytes(UTF_8));

        ProcessBuilder pb = new ProcessBuilder("cvc4", f.toString());
        Process p = pb.start();
        String output = inputStreamToString(p.getInputStream());
        return output.contains("unsat");
    }

    public static String inputStreamToString(InputStream inputStream) throws IOException {
        try (ByteArrayOutputStream result = new ByteArrayOutputStream()) {
            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) != -1) {
                result.write(buffer, 0, length);
            }

            return result.toString(UTF_8);
        }
    }

    static class Assertion {
        String name;
        String formula;

        public Assertion(String name, String formula) {
            this.name = name;
            this.formula = formula;
        }
    }

}