module CrdtProgram

use import map.Map
 
 use import ref.Ref
 
 use import int.Int
 
 type userRecordField = 
     F_id 
   | F_name 
   | F_mail 
 
 type string 
 
 type getUserResult = 
     NotFound 
   | Found string string
 
 type userId 
 
 type invocationResult = 
     NoResult 
   | RegisterUser_res userId
   | UpdateMail_res 
   | RemoveUser_res 
   | GetUser_res getUserResult
 
 type operation = 
     Noop 
   | Op_mapWrite userId userRecordField string
   | Op_mapDelete userId
   | Op_queryop_mapExists userId bool
   | Op_queryop_mapGet userId userRecordField string
 
 type callId = 
     CallId int
 
 type invocationId = 
     InvocationId int
 
 type invocationInfo = 
     NoInvocation 
   | Invocation_registerUser string string
   | Invocation_updateMail userId string
   | Invocation_removeUser userId
   | Invocation_getUser userId
 
 val state_knownIds_userId: (ref (Map.map userId bool))
 
 val state_callOps: (ref (Map.map callId operation))
 
 val state_visibleCalls: (ref (Map.map callId bool))
 
 val state_happensBefore: (ref (Map.map (callId, callId) bool))
 
 val state_sameTransaction: (ref (Map.map (callId, callId) bool))
 
 val state_currentTransaction: (ref (Map.map callId bool))
 
 val state_origin: (ref (Map.map callId invocationId))
 
 val state_invocations: (ref (Map.map invocationId invocationInfo))
 
 val state_invocationResult: (ref (Map.map invocationId invocationResult))
 
 val state_invocationHappensBefore: (ref (Map.map (invocationId, invocationId) bool))
 
 predicate mapExists 
       (u: userId)
       (state_knownIds_userId: (ref (Map.map userId bool)))
       (state_callOps: (ref (Map.map callId operation)))
       (state_visibleCalls: (ref (Map.map callId bool)))
       (state_happensBefore: (ref (Map.map (callId, callId) bool)))
       (state_sameTransaction: (ref (Map.map (callId, callId) bool)))
       (state_currentTransaction: (ref (Map.map callId bool)))
       (state_origin: (ref (Map.map callId invocationId)))
       (state_invocations: (ref (Map.map invocationId invocationInfo)))
       (state_invocationResult: (ref (Map.map invocationId invocationResult)))
       (state_invocationHappensBefore: (ref (Map.map (invocationId, invocationId) bool)))
    =  (exists c1: callId, f: userRecordField, v: string.
       ((get (! state_visibleCalls) c1)
       && ((get (! state_callOps) c1) = (Op_mapWrite u f v))
       && (forall c2: callId.
              (((get (! state_visibleCalls) c2) && ((get (! state_callOps) c2) = (Op_mapDelete u)))
              -> (get (! state_happensBefore) (c2, c1))))))
 
 function mapGet 
       (u: userId)
       (f: userRecordField)
       (state_knownIds_userId: (ref (Map.map userId bool)))
       (state_callOps: (ref (Map.map callId operation)))
       (state_visibleCalls: (ref (Map.map callId bool)))
       (state_happensBefore: (ref (Map.map (callId, callId) bool)))
       (state_sameTransaction: (ref (Map.map (callId, callId) bool)))
       (state_currentTransaction: (ref (Map.map callId bool)))
       (state_origin: (ref (Map.map callId invocationId)))
       (state_invocations: (ref (Map.map invocationId invocationInfo)))
       (state_invocationResult: (ref (Map.map invocationId invocationResult)))
       (state_invocationHappensBefore: (ref (Map.map (invocationId, invocationId) bool)))
       : string
   
 
 val mapExists_proc
       (u: userId)
       (state_knownIds_userId: (ref (Map.map userId bool)))
       (state_callOps: (ref (Map.map callId operation)))
       (state_visibleCalls: (ref (Map.map callId bool)))
       (state_happensBefore: (ref (Map.map (callId, callId) bool)))
       (state_sameTransaction: (ref (Map.map (callId, callId) bool)))
       (state_currentTransaction: (ref (Map.map callId bool)))
       (state_origin: (ref (Map.map callId invocationId)))
       (state_invocations: (ref (Map.map invocationId invocationInfo)))
       (state_invocationResult: (ref (Map.map invocationId invocationResult)))
       (state_invocationHappensBefore: (ref (Map.map (invocationId, invocationId) bool)))
       : bool
   ensures { (result
   = (mapExists u state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore)) }
   
 
 val mapGet_proc
       (u: userId)
       (f: userRecordField)
       (state_knownIds_userId: (ref (Map.map userId bool)))
       (state_callOps: (ref (Map.map callId operation)))
       (state_visibleCalls: (ref (Map.map callId bool)))
       (state_happensBefore: (ref (Map.map (callId, callId) bool)))
       (state_sameTransaction: (ref (Map.map (callId, callId) bool)))
       (state_currentTransaction: (ref (Map.map callId bool)))
       (state_origin: (ref (Map.map callId invocationId)))
       (state_invocations: (ref (Map.map invocationId invocationInfo)))
       (state_invocationResult: (ref (Map.map invocationId invocationResult)))
       (state_invocationHappensBefore: (ref (Map.map (invocationId, invocationId) bool)))
       : string
   ensures { (result
   = (mapGet u f state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore)) }
   
 
 predicate wellFormed 
       (state_knownIds_userId: (ref (Map.map userId bool)))
       (state_callOps: (ref (Map.map callId operation)))
       (state_visibleCalls: (ref (Map.map callId bool)))
       (state_happensBefore: (ref (Map.map (callId, callId) bool)))
       (state_sameTransaction: (ref (Map.map (callId, callId) bool)))
       (state_currentTransaction: (ref (Map.map callId bool)))
       (state_origin: (ref (Map.map callId invocationId)))
       (state_invocations: (ref (Map.map invocationId invocationInfo)))
       (state_invocationResult: (ref (Map.map invocationId invocationResult)))
       (state_invocationHappensBefore: (ref (Map.map (invocationId, invocationId) bool)))
    =  (( "expl:happensBefore_exists_l" (forall c1: callId, c2: callId.
          (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) )
   && ( "expl:happensBefore_exists_r" (forall c1: callId, c2: callId.
          (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) )
   && ( "expl:visibleCalls_exist" (forall c: callId.
          ((get (! state_visibleCalls) c) -> (not ((get (! state_callOps) c) = (Noop))))) )
   && ( "expl:visibleCalls_transaction_consistent1" (forall c1: callId, c2: callId.
          (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c1, c2)))
          -> (get (! state_visibleCalls) c1))) )
   && ( "expl:visibleCalls_transaction_consistent2" (forall c1: callId, c2: callId.
          (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c2, c1)))
          -> (get (! state_visibleCalls) c1))) )
   && ( "expl:visibleCalls_causally_consistent" (forall c1: callId, c2: callId.
          (((get (! state_visibleCalls) c2) && (get (! state_happensBefore) (c1, c2)))
          -> (get (! state_visibleCalls) c1))) )
   && ( "expl:happensBefore_reflex" (forall c: callId.
          ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_happensBefore) (c, c)))) )
   && ( "expl:happensBefore_trans" (forall x: callId, y: callId, z: callId.
          (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, z)))
          -> (get (! state_happensBefore) (x, z)))) )
   && ( "expl:happensBefore_antisym" (forall x: callId, y: callId.
          (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, x))) -> (x = y))) )
   && ( "expl:happensBefore_reflex" (forall c1: callId, c2: callId.
          (((not ((get (! state_callOps) c1) = (Noop)))
             && (not ((get (! state_callOps) c2) = (Noop)))
             && (get (! state_invocationHappensBefore) ((get (! state_origin) c1), (get (! state_origin) c2))))
          -> (get (! state_happensBefore) (c1, c2)))) )
   && (forall i: invocationId.
          (((get (! state_invocations) i) = (NoInvocation)) -> ((get (! state_invocationResult) i) = (NoResult))))
   && (forall i1: invocationId, i2: invocationId.
          (((get (! state_invocationResult) i1) = (NoResult))
          -> (not (get (! state_invocationHappensBefore) (i1, i2)))))
   && (forall i1: invocationId, i2: invocationId.
          (((get (! state_invocationResult) i1) = (NoResult))
          -> (not (get (! state_invocationHappensBefore) (i2, i1)))))
   && (forall i1: invocationId, i2: invocationId.
          ((get (! state_invocationHappensBefore) (i1, i2))
          -> (not ((get (! state_invocationResult) i1) = (NoResult)))))
   && (forall i1: invocationId, i2: invocationId.
          ((get (! state_invocationHappensBefore) (i1, i2))
          -> (not ((get (! state_invocationResult) i2) = (NoResult)))))
   && (forall c1: callId, c2: callId.
          (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2)))))
   && (forall c1: callId, c2: callId.
          (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2)))))
   && (forall c: callId. ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_sameTransaction) (c, c))))
   && (forall x: callId, y: callId, z: callId.
          (((get (! state_sameTransaction) (x, y)) && (get (! state_sameTransaction) (y, z)))
          -> (get (! state_sameTransaction) (x, z))))
   && (forall x: callId, y: callId. ((get (! state_sameTransaction) (x, y)) = (get (! state_sameTransaction) (y, x))))
   && (forall x1: callId, x2: callId, y1: callId, y2: callId.
          (((get (! state_sameTransaction) (x1, x2))
             && (get (! state_sameTransaction) (y1, y2))
             && (not (get (! state_sameTransaction) (x1, y1)))
             && (get (! state_happensBefore) (x1, y1)))
          -> (get (! state_happensBefore) (x2, y2)))))
 
 val beginAtomic() : unit
   writes { state_callOps, state_visibleCalls, state_happensBefore, state_sameTransaction, state_currentTransaction, state_origin, state_invocations, state_invocationResult, state_invocationHappensBefore }
   ensures { (forall c: callId. (not (get (! state_currentTransaction) c))) }
   ensures { (wellFormed state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore) }
   ensures { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   ensures { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   ensures { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
   ensures { (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_happensBefore) (c1, c2))) -> (get (! state_visibleCalls) c1))) }
   ensures { (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c1) && (get (! state_sameTransaction) (c1, c2)))
       -> (get (! state_visibleCalls) c2))) }
   ensures { (forall c: callId. ((get (! (old state_visibleCalls)) c) -> (get (! state_visibleCalls) c))) }
   ensures { (forall c: callId.
       ((not ((get (! (old state_callOps)) c) = (Noop)))
       -> ((get (! state_callOps) c) = (get (! (old state_callOps)) c)))) }
   ensures { (forall c1: callId, c2: callId.
       ((not ((get (! (old state_callOps)) c2) = (Noop)))
       -> ((get (! state_happensBefore) (c1, c2)) = (get (! (old state_happensBefore)) (c1, c2))))) }
   ensures { (forall c1: callId, c2: callId.
       ((not ((get (! (old state_callOps)) c2) = (Noop)))
       -> ((get (! state_sameTransaction) (c1, c2)) = (get (! (old state_sameTransaction)) (c1, c2))))) }
   ensures { (forall c1: callId, c2: callId.
       ((not ((get (! (old state_callOps)) c1) = (Noop)))
       -> ((get (! state_sameTransaction) (c1, c2)) = (get (! (old state_sameTransaction)) (c1, c2))))) }
   ensures { (forall c: callId.
       ((not ((get (! (old state_callOps)) c) = (Noop)))
       -> ((get (! state_origin) c) = (get (! (old state_origin)) c)))) }
   ensures { (forall i: invocationId.
       ((not ((get (! (old state_invocations)) i) = (NoInvocation)))
       -> ((get (! state_invocations) i) = (get (! (old state_invocations)) i)))) }
   ensures { (forall i: invocationId.
       ((not ((get (! (old state_invocationResult)) i) = (NoResult)))
       -> ((get (! state_invocationResult) i) = (get (! (old state_invocationResult)) i)))) }
   ensures { (forall i1: invocationId, i2: invocationId.
       ((not ((get (! (old state_invocationResult)) i2) = (NoResult)))
       -> ((get (! state_invocationHappensBefore) (i1, i2)) = (get (! (old state_invocationHappensBefore)) (i1, i2))))) }
   
 
 val endAtomic() : unit
   requires { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   requires { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   requires { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
   
 
 val crdtOperation (currentInvocation: invocationId) (operation: operation) : callId
   writes { state_callOps, state_happensBefore, state_visibleCalls, state_sameTransaction, state_currentTransaction, state_origin }
   ensures { ((old (get (! state_callOps) result)) = (Noop)) }
   ensures { ((get (! state_callOps) result) = operation) }
   ensures { (forall c1: callId.
       ((not (c1 = result)) -> ((get (! state_callOps) c1) = (get (! (old state_callOps)) c1)))) }
   ensures { (forall c1: callId, c2: callId.
       ((get (! state_happensBefore) (c1, c2))
       <-> ((get (! (old state_happensBefore)) (c1, c2))
           || (((get (! state_visibleCalls) c1) || (c1 = c2)) && (c2 = result))))) }
   ensures { (forall c1: callId.
       ((get (! state_visibleCalls) c1) <-> ((get (! (old state_visibleCalls)) c1) || (c1 = result)))) }
   ensures { (forall c: callId.
       ((get (! state_currentTransaction) c) <-> ((get (! (old state_currentTransaction)) c) || (c = result)))) }
   ensures { (forall c1: callId, c2: callId.
       ((get (! state_sameTransaction) (c1, c2))
       <-> ((get (! (old state_sameTransaction)) (c1, c2))
           || ((get (! state_currentTransaction) c1) && (get (! state_currentTransaction) c2))))) }
   ensures { (wellFormed state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore) }
   ensures { (forall c: callId. ((not (c = result)) -> ((get (! state_origin) c) = (get (! (old state_origin)) c)))) }
   ensures { ((get (! state_origin) result) = currentInvocation) }
   
 
 val startInvocation (invocation: invocationInfo) : invocationId
   writes { state_invocations }
   ensures { ((get (! (old state_invocations)) result) = (NoInvocation)) }
   ensures { ((get (! state_invocationResult) result) = (NoResult)) }
   ensures { ((get (! state_invocations) result) = invocation) }
   ensures { (forall i: invocationId.
       ((not (i = result)) -> ((get (! state_invocations) i) = (get (! (old state_invocations)) i)))) }
   
 
 val finishInvocation (newInvocId: invocationId) (res: invocationResult) : unit
   writes { state_invocationResult, state_invocationHappensBefore }
   ensures { (wellFormed state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore) }
   ensures { ((get (! state_invocationResult) newInvocId) = res) }
   ensures { (forall i: invocationId.
       ((not (i = newInvocId)) -> ((get (! state_invocationResult) i) = (get (! (old state_invocationResult)) i)))) }
   ensures { (forall i: invocationId. (not (get (! (old state_invocationHappensBefore)) (i, newInvocId)))) }
   ensures { (forall i: invocationId. (not (get (! (old state_invocationHappensBefore)) (newInvocId, i)))) }
   ensures { (forall i: invocationId, c1: callId, c2: callId.
       (((get (! state_invocationHappensBefore) (i, newInvocId))
          && ((get (! (old state_origin)) c1) = i)
          && ((get (! (old state_origin)) c2) = newInvocId))
       -> (get (! state_happensBefore) (c1, c2)))) }
   ensures { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2))
       = ((get (! (old state_invocationHappensBefore)) (i1, i2))
         || ((i2 = newInvocId)
            && (exists c: callId. ((get (! (old state_origin)) c) = newInvocId))
            && (exists c: callId. ((get (! state_origin) c) = i1))
            && (forall c1: callId, c2: callId.
                   ((((get (! state_origin) c1) = i1) && ((get (! (old state_origin)) c2) = newInvocId))
                   -> (get (! state_happensBefore) (c1, c2)))))))) }
   
 
 let check_initialState () : unit
   requires { (forall c: callId. ((get (! state_callOps) c) = (Noop))) }
   requires { (forall c: callId. (not (get (! state_visibleCalls) c))) }
   requires { (forall c1: callId, c2: callId. (not (get (! state_happensBefore) (c1, c2)))) }
   requires { (forall c1: callId, c2: callId. (not (get (! state_sameTransaction) (c1, c2)))) }
   requires { (forall c: callId. (not (get (! state_currentTransaction) c))) }
   requires { (forall i: invocationId. ((get (! state_invocations) i) = (NoInvocation))) }
   requires { (forall i: invocationId. ((get (! state_invocationResult) i) = (NoResult))) }
   requires { (forall i1: invocationId, i2: invocationId. (not (get (! state_invocationHappensBefore) (i1, i2)))) }
   ensures { ( "expl:happensBefore_exists_l" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   ensures { ( "expl:happensBefore_exists_r" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   ensures { ( "expl:visibleCalls_exist" (forall c: callId.
       ((get (! state_visibleCalls) c) -> (not ((get (! state_callOps) c) = (Noop))))) ) }
   ensures { ( "expl:visibleCalls_transaction_consistent1" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c1, c2)))
       -> (get (! state_visibleCalls) c1))) ) }
   ensures { ( "expl:visibleCalls_transaction_consistent2" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c2, c1)))
       -> (get (! state_visibleCalls) c1))) ) }
   ensures { ( "expl:visibleCalls_causally_consistent" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_happensBefore) (c1, c2))) -> (get (! state_visibleCalls) c1))) ) }
   ensures { ( "expl:happensBefore_reflex" (forall c: callId.
       ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_happensBefore) (c, c)))) ) }
   ensures { ( "expl:happensBefore_trans" (forall x: callId, y: callId, z: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, z)))
       -> (get (! state_happensBefore) (x, z)))) ) }
   ensures { ( "expl:happensBefore_antisym" (forall x: callId, y: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, x))) -> (x = y))) ) }
   ensures { ( "expl:happensBefore_reflex" (forall c1: callId, c2: callId.
       (((not ((get (! state_callOps) c1) = (Noop)))
          && (not ((get (! state_callOps) c2) = (Noop)))
          && (get (! state_invocationHappensBefore) ((get (! state_origin) c1), (get (! state_origin) c2))))
       -> (get (! state_happensBefore) (c1, c2)))) ) }
   ensures { (forall i: invocationId.
       (((get (! state_invocations) i) = (NoInvocation)) -> ((get (! state_invocationResult) i) = (NoResult)))) }
   ensures { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i1, i2))))) }
   ensures { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i2, i1))))) }
   ensures { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i1) = (NoResult))))) }
   ensures { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i2) = (NoResult))))) }
   ensures { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   ensures { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   ensures { (forall c: callId. ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_sameTransaction) (c, c)))) }
   ensures { (forall x: callId, y: callId, z: callId.
       (((get (! state_sameTransaction) (x, y)) && (get (! state_sameTransaction) (y, z)))
       -> (get (! state_sameTransaction) (x, z)))) }
   ensures { (forall x: callId, y: callId.
       ((get (! state_sameTransaction) (x, y)) = (get (! state_sameTransaction) (y, x)))) }
   ensures { (forall x1: callId, x2: callId, y1: callId, y2: callId.
       (((get (! state_sameTransaction) (x1, x2))
          && (get (! state_sameTransaction) (y1, y2))
          && (not (get (! state_sameTransaction) (x1, y1)))
          && (get (! state_happensBefore) (x1, y1)))
       -> (get (! state_happensBefore) (x2, y2)))) }
   ensures { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   ensures { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   ensures { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
    =  ()
 
 let registerUser  (name: string) (mail: string) : unit
   requires { ( "expl:happensBefore_exists_l" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   requires { ( "expl:happensBefore_exists_r" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   requires { ( "expl:visibleCalls_exist" (forall c: callId.
       ((get (! state_visibleCalls) c) -> (not ((get (! state_callOps) c) = (Noop))))) ) }
   requires { ( "expl:visibleCalls_transaction_consistent1" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c1, c2)))
       -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:visibleCalls_transaction_consistent2" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c2, c1)))
       -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:visibleCalls_causally_consistent" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_happensBefore) (c1, c2))) -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:happensBefore_reflex" (forall c: callId.
       ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_happensBefore) (c, c)))) ) }
   requires { ( "expl:happensBefore_trans" (forall x: callId, y: callId, z: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, z)))
       -> (get (! state_happensBefore) (x, z)))) ) }
   requires { ( "expl:happensBefore_antisym" (forall x: callId, y: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, x))) -> (x = y))) ) }
   requires { ( "expl:happensBefore_reflex" (forall c1: callId, c2: callId.
       (((not ((get (! state_callOps) c1) = (Noop)))
          && (not ((get (! state_callOps) c2) = (Noop)))
          && (get (! state_invocationHappensBefore) ((get (! state_origin) c1), (get (! state_origin) c2))))
       -> (get (! state_happensBefore) (c1, c2)))) ) }
   requires { (forall i: invocationId.
       (((get (! state_invocations) i) = (NoInvocation)) -> ((get (! state_invocationResult) i) = (NoResult)))) }
   requires { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i1, i2))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i2, i1))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i1) = (NoResult))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i2) = (NoResult))))) }
   requires { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   requires { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   requires { (forall c: callId. ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_sameTransaction) (c, c)))) }
   requires { (forall x: callId, y: callId, z: callId.
       (((get (! state_sameTransaction) (x, y)) && (get (! state_sameTransaction) (y, z)))
       -> (get (! state_sameTransaction) (x, z)))) }
   requires { (forall x: callId, y: callId.
       ((get (! state_sameTransaction) (x, y)) = (get (! state_sameTransaction) (y, x)))) }
   requires { (forall x1: callId, x2: callId, y1: callId, y2: callId.
       (((get (! state_sameTransaction) (x1, x2))
          && (get (! state_sameTransaction) (y1, y2))
          && (not (get (! state_sameTransaction) (x1, y1)))
          && (get (! state_happensBefore) (x1, y1)))
       -> (get (! state_happensBefore) (x2, y2)))) }
   requires { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   requires { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   requires { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
   writes { state_invocations, state_currentTransaction, state_visibleCalls, state_sameTransaction, state_callOps, state_invocationResult, state_invocationHappensBefore, state_happensBefore, state_origin }
   reads { state_knownIds_userId, state_callOps, state_visibleCalls, state_happensBefore, state_sameTransaction, state_currentTransaction, state_origin, state_invocations, state_invocationResult, state_invocationHappensBefore }
   ensures { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   ensures { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   ensures { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
    =  let u = (ref (any userId)) in
   let newInvocationId = (startInvocation (Invocation_registerUser name mail)) in
   (endAtomic);
   (u := (any userId));
   assume {(forall c: callId, _p_uid: userId, _p_field: userRecordField, _p_value: string.
       (((get (! state_callOps) c) = (Op_mapWrite _p_uid _p_field _p_value)) -> (not ((! u) = _p_uid))))};
   assume {(forall c: callId, _p_uid: userId.
       (((get (! state_callOps) c) = (Op_mapDelete _p_uid)) -> (not ((! u) = _p_uid))))};
   assume {(forall c: callId, _p_u: userId, _p_result: bool.
       (((get (! state_callOps) c) = (Op_queryop_mapExists _p_u _p_result)) -> (not ((! u) = _p_u))))};
   assume {(forall c: callId, _p_u: userId, _p_f: userRecordField, _p_result: string.
       (((get (! state_callOps) c) = (Op_queryop_mapGet _p_u _p_f _p_result)) -> (not ((! u) = _p_u))))};
   (beginAtomic ());
   (crdtOperation newInvocationId (Op_mapWrite (! u) (F_name) name));
   ();
   (crdtOperation newInvocationId (Op_mapWrite (! u) (F_mail) mail));
   ();
   (endAtomic ());
   (finishInvocation newInvocationId (RegisterUser_res (! u)));
   (! u);
   ()
 
 let updateMail  (id: userId) (newMail: string) : unit
   requires { ( "expl:happensBefore_exists_l" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   requires { ( "expl:happensBefore_exists_r" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   requires { ( "expl:visibleCalls_exist" (forall c: callId.
       ((get (! state_visibleCalls) c) -> (not ((get (! state_callOps) c) = (Noop))))) ) }
   requires { ( "expl:visibleCalls_transaction_consistent1" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c1, c2)))
       -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:visibleCalls_transaction_consistent2" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c2, c1)))
       -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:visibleCalls_causally_consistent" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_happensBefore) (c1, c2))) -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:happensBefore_reflex" (forall c: callId.
       ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_happensBefore) (c, c)))) ) }
   requires { ( "expl:happensBefore_trans" (forall x: callId, y: callId, z: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, z)))
       -> (get (! state_happensBefore) (x, z)))) ) }
   requires { ( "expl:happensBefore_antisym" (forall x: callId, y: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, x))) -> (x = y))) ) }
   requires { ( "expl:happensBefore_reflex" (forall c1: callId, c2: callId.
       (((not ((get (! state_callOps) c1) = (Noop)))
          && (not ((get (! state_callOps) c2) = (Noop)))
          && (get (! state_invocationHappensBefore) ((get (! state_origin) c1), (get (! state_origin) c2))))
       -> (get (! state_happensBefore) (c1, c2)))) ) }
   requires { (forall i: invocationId.
       (((get (! state_invocations) i) = (NoInvocation)) -> ((get (! state_invocationResult) i) = (NoResult)))) }
   requires { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i1, i2))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i2, i1))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i1) = (NoResult))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i2) = (NoResult))))) }
   requires { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   requires { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   requires { (forall c: callId. ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_sameTransaction) (c, c)))) }
   requires { (forall x: callId, y: callId, z: callId.
       (((get (! state_sameTransaction) (x, y)) && (get (! state_sameTransaction) (y, z)))
       -> (get (! state_sameTransaction) (x, z)))) }
   requires { (forall x: callId, y: callId.
       ((get (! state_sameTransaction) (x, y)) = (get (! state_sameTransaction) (y, x)))) }
   requires { (forall x1: callId, x2: callId, y1: callId, y2: callId.
       (((get (! state_sameTransaction) (x1, x2))
          && (get (! state_sameTransaction) (y1, y2))
          && (not (get (! state_sameTransaction) (x1, y1)))
          && (get (! state_happensBefore) (x1, y1)))
       -> (get (! state_happensBefore) (x2, y2)))) }
   requires { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   requires { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   requires { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
   writes { state_invocations, state_currentTransaction, state_visibleCalls, state_sameTransaction, state_callOps, state_invocationResult, state_invocationHappensBefore, state_happensBefore, state_origin }
   reads { state_knownIds_userId, state_callOps, state_visibleCalls, state_happensBefore, state_sameTransaction, state_currentTransaction, state_origin, state_invocations, state_invocationResult, state_invocationHappensBefore }
   ensures { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   ensures { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   ensures { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
    =  let uExists = (ref false) in
   let __query_1 = (ref false) in
   let newInvocationId = (startInvocation (Invocation_updateMail id newMail)) in
   (endAtomic);
   (beginAtomic ());
   (__query_1
   := (mapExists_proc id state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore));
   (crdtOperation newInvocationId (Op_queryop_mapExists id (! __query_1)));
   ();
   (uExists := (! __query_1));
   if (! uExists) then begin
       (crdtOperation newInvocationId (Op_mapWrite id (F_mail) newMail));
       ()
   end else begin
       
   end;
   (endAtomic ());
   (finishInvocation newInvocationId (UpdateMail_res));
   ();
   ()
 
 let removeUser  (id: userId) : unit
   requires { ( "expl:happensBefore_exists_l" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   requires { ( "expl:happensBefore_exists_r" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   requires { ( "expl:visibleCalls_exist" (forall c: callId.
       ((get (! state_visibleCalls) c) -> (not ((get (! state_callOps) c) = (Noop))))) ) }
   requires { ( "expl:visibleCalls_transaction_consistent1" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c1, c2)))
       -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:visibleCalls_transaction_consistent2" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c2, c1)))
       -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:visibleCalls_causally_consistent" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_happensBefore) (c1, c2))) -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:happensBefore_reflex" (forall c: callId.
       ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_happensBefore) (c, c)))) ) }
   requires { ( "expl:happensBefore_trans" (forall x: callId, y: callId, z: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, z)))
       -> (get (! state_happensBefore) (x, z)))) ) }
   requires { ( "expl:happensBefore_antisym" (forall x: callId, y: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, x))) -> (x = y))) ) }
   requires { ( "expl:happensBefore_reflex" (forall c1: callId, c2: callId.
       (((not ((get (! state_callOps) c1) = (Noop)))
          && (not ((get (! state_callOps) c2) = (Noop)))
          && (get (! state_invocationHappensBefore) ((get (! state_origin) c1), (get (! state_origin) c2))))
       -> (get (! state_happensBefore) (c1, c2)))) ) }
   requires { (forall i: invocationId.
       (((get (! state_invocations) i) = (NoInvocation)) -> ((get (! state_invocationResult) i) = (NoResult)))) }
   requires { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i1, i2))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i2, i1))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i1) = (NoResult))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i2) = (NoResult))))) }
   requires { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   requires { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   requires { (forall c: callId. ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_sameTransaction) (c, c)))) }
   requires { (forall x: callId, y: callId, z: callId.
       (((get (! state_sameTransaction) (x, y)) && (get (! state_sameTransaction) (y, z)))
       -> (get (! state_sameTransaction) (x, z)))) }
   requires { (forall x: callId, y: callId.
       ((get (! state_sameTransaction) (x, y)) = (get (! state_sameTransaction) (y, x)))) }
   requires { (forall x1: callId, x2: callId, y1: callId, y2: callId.
       (((get (! state_sameTransaction) (x1, x2))
          && (get (! state_sameTransaction) (y1, y2))
          && (not (get (! state_sameTransaction) (x1, y1)))
          && (get (! state_happensBefore) (x1, y1)))
       -> (get (! state_happensBefore) (x2, y2)))) }
   requires { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   requires { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   requires { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
   writes { state_invocations, state_currentTransaction, state_visibleCalls, state_sameTransaction, state_callOps, state_invocationResult, state_invocationHappensBefore, state_happensBefore, state_origin }
   reads { state_knownIds_userId, state_callOps, state_visibleCalls, state_happensBefore, state_sameTransaction, state_currentTransaction, state_origin, state_invocations, state_invocationResult, state_invocationHappensBefore }
   ensures { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   ensures { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   ensures { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
    =  let newInvocationId = (startInvocation (Invocation_removeUser id)) in
   (endAtomic);
   (beginAtomic ());
   (crdtOperation newInvocationId (Op_mapDelete id));
   ();
   (endAtomic ());
   (finishInvocation newInvocationId (RemoveUser_res));
   ();
   ()
 
 let getUser  (id: userId) : unit
   requires { ( "expl:happensBefore_exists_l" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   requires { ( "expl:happensBefore_exists_r" (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_happensBefore) (c1, c2))))) ) }
   requires { ( "expl:visibleCalls_exist" (forall c: callId.
       ((get (! state_visibleCalls) c) -> (not ((get (! state_callOps) c) = (Noop))))) ) }
   requires { ( "expl:visibleCalls_transaction_consistent1" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c1, c2)))
       -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:visibleCalls_transaction_consistent2" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_sameTransaction) (c2, c1)))
       -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:visibleCalls_causally_consistent" (forall c1: callId, c2: callId.
       (((get (! state_visibleCalls) c2) && (get (! state_happensBefore) (c1, c2))) -> (get (! state_visibleCalls) c1))) ) }
   requires { ( "expl:happensBefore_reflex" (forall c: callId.
       ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_happensBefore) (c, c)))) ) }
   requires { ( "expl:happensBefore_trans" (forall x: callId, y: callId, z: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, z)))
       -> (get (! state_happensBefore) (x, z)))) ) }
   requires { ( "expl:happensBefore_antisym" (forall x: callId, y: callId.
       (((get (! state_happensBefore) (x, y)) && (get (! state_happensBefore) (y, x))) -> (x = y))) ) }
   requires { ( "expl:happensBefore_reflex" (forall c1: callId, c2: callId.
       (((not ((get (! state_callOps) c1) = (Noop)))
          && (not ((get (! state_callOps) c2) = (Noop)))
          && (get (! state_invocationHappensBefore) ((get (! state_origin) c1), (get (! state_origin) c2))))
       -> (get (! state_happensBefore) (c1, c2)))) ) }
   requires { (forall i: invocationId.
       (((get (! state_invocations) i) = (NoInvocation)) -> ((get (! state_invocationResult) i) = (NoResult)))) }
   requires { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i1, i2))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       (((get (! state_invocationResult) i1) = (NoResult)) -> (not (get (! state_invocationHappensBefore) (i2, i1))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i1) = (NoResult))))) }
   requires { (forall i1: invocationId, i2: invocationId.
       ((get (! state_invocationHappensBefore) (i1, i2)) -> (not ((get (! state_invocationResult) i2) = (NoResult))))) }
   requires { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c1) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   requires { (forall c1: callId, c2: callId.
       (((get (! state_callOps) c2) = (Noop)) -> (not (get (! state_sameTransaction) (c1, c2))))) }
   requires { (forall c: callId. ((not ((get (! state_callOps) c) = (Noop))) -> (get (! state_sameTransaction) (c, c)))) }
   requires { (forall x: callId, y: callId, z: callId.
       (((get (! state_sameTransaction) (x, y)) && (get (! state_sameTransaction) (y, z)))
       -> (get (! state_sameTransaction) (x, z)))) }
   requires { (forall x: callId, y: callId.
       ((get (! state_sameTransaction) (x, y)) = (get (! state_sameTransaction) (y, x)))) }
   requires { (forall x1: callId, x2: callId, y1: callId, y2: callId.
       (((get (! state_sameTransaction) (x1, x2))
          && (get (! state_sameTransaction) (y1, y2))
          && (not (get (! state_sameTransaction) (x1, y1)))
          && (get (! state_happensBefore) (x1, y1)))
       -> (get (! state_happensBefore) (x2, y2)))) }
   requires { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   requires { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   requires { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
   writes { state_invocations, state_currentTransaction, state_visibleCalls, state_sameTransaction, state_callOps, state_invocationResult, state_invocationHappensBefore, state_happensBefore, state_origin }
   reads { state_knownIds_userId, state_callOps, state_visibleCalls, state_happensBefore, state_sameTransaction, state_currentTransaction, state_origin, state_invocations, state_invocationResult, state_invocationHappensBefore }
   ensures { (forall r: invocationId, g: invocationId, u: userId.
       ((((get (! state_invocations) r) = (Invocation_removeUser u))
          && ((get (! state_invocations) g) = (Invocation_getUser u))
          && (get (! state_invocationHappensBefore) (r, g)))
       -> ((get (! state_invocationResult) g) = (GetUser_res (NotFound))))) }
   ensures { (forall u: userId, i: invocationId.
       ((((get (! state_invocations) i) = (Invocation_removeUser u))
          && (not ((get (! state_invocationResult) i) = (NoResult))))
       -> (exists c: callId. (((get (! state_origin) c) = i) && ((get (! state_callOps) c) = (Op_mapDelete u)))))) }
   ensures { (not (exists write: callId, delete: callId, u: userId, f: userRecordField, v: string.
       (((get (! state_callOps) write) = (Op_mapWrite u f v))
       && ((get (! state_callOps) delete) = (Op_mapDelete u))
       && (get (! state_happensBefore) (delete, write))))) }
    =  let __query_1 = (ref false) in
   let __query_2 = (ref (any string)) in
   let __query_3 = (ref (any string)) in
   let newInvocationId = (startInvocation (Invocation_getUser id)) in
   (endAtomic);
   (beginAtomic ());
   (__query_1
   := (mapExists_proc id state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore));
   (crdtOperation newInvocationId (Op_queryop_mapExists id (! __query_1)));
   ();
   if (! __query_1) then begin
       (__query_2
       := (mapGet_proc id (F_name) state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore));
       (crdtOperation newInvocationId (Op_queryop_mapGet id (F_name) (! __query_2)));
       ();
       (__query_3
       := (mapGet_proc id (F_mail) state_knownIds_userId state_callOps state_visibleCalls state_happensBefore state_sameTransaction state_currentTransaction state_origin state_invocations state_invocationResult state_invocationHappensBefore));
       (crdtOperation newInvocationId (Op_queryop_mapGet id (F_mail) (! __query_3)));
       ();
       (endAtomic);
       (finishInvocation newInvocationId (GetUser_res (Found (! __query_2) (! __query_3))));
       (Found (! __query_2) (! __query_3))
   end else begin
       (endAtomic);
       (finishInvocation newInvocationId (GetUser_res (NotFound)));
       (NotFound)
   end;
   (endAtomic ());
   ()
 
 
end