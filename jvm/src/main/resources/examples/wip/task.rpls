def createBoard(name: String): BoardId {
	var b: BoardId
	b = new BoardId
	call board_writename(b, name)
	// add board id to list_boards
	return b
}

def addColumn(board_id: BoardId, name:String): ColumnId {
	var c: ColumnId
	c = new ColumnId
	call column_writename(c, name)
	call column_writeboardid(c, board_id)
	call board_addcolumn(board_id, c)
	return c
}

def createTask(column_id: ColumnId, title: String) : TaskId {
	var t: TaskId
	t = new TaskId
	call column_addtask(column_id, t)
	call task_writetitle(t, title)
	call task_writecolumnid(t, column_id)
	return t
}

def moveTask(task_id: TaskId, column_id: ColumnId) {
	var oldcolumn_id: ColumnId
	atomic {
		oldcolumn_id = task_getcolumnid(task_id)
		call column_removetask(oldcolumn_id, task_id)
		call column_addtask(column_id, task_id)
		call task_writecolumnid(task_id, column_id)
	}
}

idtype BoardId
idtype ColumnId
idtype TaskId
type String

type BoardField = 
    f_board_name()
  | f_columns()

type ColumnField = 
	f_board_id()
  | f_column_name()
  | f_tasks()

type TaskField = 
	f_task_name()
  | f_column_id()
  | f_due_date()

operation board_writename(bid: BoardId, value: String)
operation board_addcolumn(bid: BoardId, cid: ColumnId)

operation column_writename(cid: ColumnId, value: String)
operation column_writeboardid(cid: ColumnId, bid: BoardId)
operation column_addtask(cid: ColumnId, tid: TaskId)
operation column_removetask(cid: ColumnId, tid: TaskId)


operation task_writetitle(tid: TaskId, value: String)
operation task_writecolumnid(tid: TaskId, cid: ColumnId)

query task_getcolumnid(tid: TaskId) : ColumnId
    ensures exists c1: callId ::
        	c1 is visible
     	&& c1.op == task_writecolumnid(tid, result)
      	&& !(exists c2: callId, x: ColumnId ::
            	c2 is visible
            && c2 != c1
            && c2.op == task_writecolumnid(tid, x)
			&& c2 happened after c1)

query column_containstaskid(cid: ColumnId, tid: TaskId) : boolean = 
(exists c1: callId ::
       c1 is visible
    && c1.op == column_addtask(cid, tid)
	&& !(exists c2: callId :: c2 is visible && c2.op == column_removetask(cid, tid) && c2 happened after c1))

//invariant (forall c1: ColumnId, c2: ColumnId, t: TaskId ::
//	column_containstaskid(c1, t) && column_containstaskid(c2, t) ==> c1 == c2)

invariant (forall c1: ColumnId, t: TaskId ::
	c1 == task_getcolumnid(t) ==> column_containstaskid(c1, t))

// TODO check why not working
invariant (forall c1: ColumnId, t: TaskId ::
	column_containstaskid(c1, t) ==> c1 == task_getcolumnid(t))