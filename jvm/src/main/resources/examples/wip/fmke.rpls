// Operations

def createRx(doc: DocId, patient: PatientId, pharma: PharmaId): RxId {
  atomic {
    var c: RxId
    c = new RxId
    call Rx_doc_assign(c, doc)
    call Rx_patient_assign(c, patient)
    call Rx_pharma_assign(c, pharma)
    call Rx_isSealed_assign(c, false)  // initial value
//    call Rx_numProcessed_assign(c, 0)          // initial valu
    call doctor_prescriptions_add(doc, c)
    return c
  }
}

def addMedication(rx: RxId, medname: String, qty: int) {
  atomic {
    if (Rx_exists(rx) && !Rx_isSealed_get(rx)) {
      call Rx_medications_assign(rx, medname, qty)
    }
  }
}

def sealRx(rx: RxId) {
  // precond rx.medications != emptyset
  atomic {
    if (exists m: String :: Rx_medications_exists(rx, m)) {
      var p : PatientId
      p = Rx_patient_get(rx)
      var d : DocId
      d = Rx_doc_get(rx)
      call patient_prescriptions_add(p, rx)
      call doctor_prescriptions_add(d, rx)
      call pharma_prescriptions_add(Rx_pharma_get(rx), rx)
      call Rx_isSealed_assign(rx,true)
    }
  }
}

def processRx(rx: RxId) {
  atomic {
    if(Rx_isSealed_get(rx) && Rx_numProcessed_get(rx) == 0) {
    // assert rx.medications != emptyset
      call Rx_numProcessed_increment(rx)
      // print Rx_medications(rx)
    }
  }
}

def getMedicationsQty(rx: RxId, m: String): int {
  return Rx_medications_get(rx, m)
}


// Datatypes

type String

// type Med = med(name: String, count: int)

type DocId
type PatientId
type PharmaId
idtype RxId

crdt doctor: Map_aw[DocId, {
  name: Register[String],
  prescriptions: Set_aw[RxId]
}]

crdt patient: Map_aw[PatientId, {
  name: Register[String],
  prescriptions: Set_aw[RxId]
}]

crdt pharma: Map_aw[PharmaId, {
  name: Register[String],
  prescriptions: Set_aw[RxId]
}]

crdt Rx: Map_aw[RxId, {
  doc: Register[DocId],
  patient: Register[PatientId],
  pharma: Register[PharmaId],
  medications: Map_aw[String, Register[int]],
  isSealed: Register[boolean],
  numProcessed: Counter
}]

invariant forall rx: RxId ::
       // precond-check
       0 <= Rx_numProcessed_get(rx)
    && Rx_numProcessed_get(rx) <= 1
// precond-check + mutual ordering
invariant forall rx: RxId :: (Rx_isSealed_get(rx) ==> (exists m: String :: Rx_medications_exists(rx, m)))
invariant forall rx: RxId :: (Rx_numProcessed_get(rx) > 0 ==> Rx_isSealed_get(rx))
invariant forall rx: RxId :: Rx_exists(rx) ==> doctor_prescriptions_contains(Rx_doc_get(rx), rx)

// mutual order + all-or-nothing
invariant forall rx: RxId :: (Rx_isSealed_get(rx) ==> patient_prescriptions_contains(Rx_patient_get(rx), rx))
invariant forall rx: RxId :: (Rx_isSealed_get(rx) ==> pharma_prescriptions_contains(Rx_pharma_get(rx), rx))