/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.nyu.acsys.CVC4;

public class CVC4JNI {
  public final static native long new_vectorCommandPtr__SWIG_0();
  public final static native long new_vectorCommandPtr__SWIG_1(long jarg1);
  public final static native long vectorCommandPtr_size(long jarg1, vectorCommandPtr jarg1_);
  public final static native long vectorCommandPtr_capacity(long jarg1, vectorCommandPtr jarg1_);
  public final static native void vectorCommandPtr_reserve(long jarg1, vectorCommandPtr jarg1_, long jarg2);
  public final static native boolean vectorCommandPtr_isEmpty(long jarg1, vectorCommandPtr jarg1_);
  public final static native void vectorCommandPtr_clear(long jarg1, vectorCommandPtr jarg1_);
  public final static native void vectorCommandPtr_add(long jarg1, vectorCommandPtr jarg1_, long jarg2, Command jarg2_);
  public final static native long vectorCommandPtr_get(long jarg1, vectorCommandPtr jarg1_, int jarg2);
  public final static native void vectorCommandPtr_set(long jarg1, vectorCommandPtr jarg1_, int jarg2, long jarg3, Command jarg3_);
  public final static native void delete_vectorCommandPtr(long jarg1);
  public final static native long new_vectorType__SWIG_0();
  public final static native long new_vectorType__SWIG_1(long jarg1);
  public final static native long vectorType_size(long jarg1, vectorType jarg1_);
  public final static native long vectorType_capacity(long jarg1, vectorType jarg1_);
  public final static native void vectorType_reserve(long jarg1, vectorType jarg1_, long jarg2);
  public final static native boolean vectorType_isEmpty(long jarg1, vectorType jarg1_);
  public final static native void vectorType_clear(long jarg1, vectorType jarg1_);
  public final static native void vectorType_add(long jarg1, vectorType jarg1_, long jarg2, Type jarg2_);
  public final static native long vectorType_get(long jarg1, vectorType jarg1_, int jarg2);
  public final static native void vectorType_set(long jarg1, vectorType jarg1_, int jarg2, long jarg3, Type jarg3_);
  public final static native void delete_vectorType(long jarg1);
  public final static native long new_vectorExpr__SWIG_0();
  public final static native long new_vectorExpr__SWIG_1(long jarg1);
  public final static native long vectorExpr_size(long jarg1, vectorExpr jarg1_);
  public final static native long vectorExpr_capacity(long jarg1, vectorExpr jarg1_);
  public final static native void vectorExpr_reserve(long jarg1, vectorExpr jarg1_, long jarg2);
  public final static native boolean vectorExpr_isEmpty(long jarg1, vectorExpr jarg1_);
  public final static native void vectorExpr_clear(long jarg1, vectorExpr jarg1_);
  public final static native void vectorExpr_add(long jarg1, vectorExpr jarg1_, long jarg2, Expr jarg2_);
  public final static native long vectorExpr_get(long jarg1, vectorExpr jarg1_, int jarg2);
  public final static native void vectorExpr_set(long jarg1, vectorExpr jarg1_, int jarg2, long jarg3, Expr jarg3_);
  public final static native void delete_vectorExpr(long jarg1);
  public final static native long new_vectorUnsignedInt__SWIG_0();
  public final static native long new_vectorUnsignedInt__SWIG_1(long jarg1);
  public final static native long vectorUnsignedInt_size(long jarg1, vectorUnsignedInt jarg1_);
  public final static native long vectorUnsignedInt_capacity(long jarg1, vectorUnsignedInt jarg1_);
  public final static native void vectorUnsignedInt_reserve(long jarg1, vectorUnsignedInt jarg1_, long jarg2);
  public final static native boolean vectorUnsignedInt_isEmpty(long jarg1, vectorUnsignedInt jarg1_);
  public final static native void vectorUnsignedInt_clear(long jarg1, vectorUnsignedInt jarg1_);
  public final static native void vectorUnsignedInt_add(long jarg1, vectorUnsignedInt jarg1_, long jarg2);
  public final static native long vectorUnsignedInt_get(long jarg1, vectorUnsignedInt jarg1_, int jarg2);
  public final static native void vectorUnsignedInt_set(long jarg1, vectorUnsignedInt jarg1_, int jarg2, long jarg3);
  public final static native void delete_vectorUnsignedInt(long jarg1);
  public final static native long new_vectorVectorExpr__SWIG_0();
  public final static native long new_vectorVectorExpr__SWIG_1(long jarg1);
  public final static native long vectorVectorExpr_size(long jarg1, vectorVectorExpr jarg1_);
  public final static native long vectorVectorExpr_capacity(long jarg1, vectorVectorExpr jarg1_);
  public final static native void vectorVectorExpr_reserve(long jarg1, vectorVectorExpr jarg1_, long jarg2);
  public final static native boolean vectorVectorExpr_isEmpty(long jarg1, vectorVectorExpr jarg1_);
  public final static native void vectorVectorExpr_clear(long jarg1, vectorVectorExpr jarg1_);
  public final static native void vectorVectorExpr_add(long jarg1, vectorVectorExpr jarg1_, long jarg2, vectorExpr jarg2_);
  public final static native long vectorVectorExpr_get(long jarg1, vectorVectorExpr jarg1_, int jarg2);
  public final static native void vectorVectorExpr_set(long jarg1, vectorVectorExpr jarg1_, int jarg2, long jarg3, vectorExpr jarg3_);
  public final static native void delete_vectorVectorExpr(long jarg1);
  public final static native long new_vectorDatatypeType__SWIG_0();
  public final static native long new_vectorDatatypeType__SWIG_1(long jarg1);
  public final static native long vectorDatatypeType_size(long jarg1, vectorDatatypeType jarg1_);
  public final static native long vectorDatatypeType_capacity(long jarg1, vectorDatatypeType jarg1_);
  public final static native void vectorDatatypeType_reserve(long jarg1, vectorDatatypeType jarg1_, long jarg2);
  public final static native boolean vectorDatatypeType_isEmpty(long jarg1, vectorDatatypeType jarg1_);
  public final static native void vectorDatatypeType_clear(long jarg1, vectorDatatypeType jarg1_);
  public final static native void vectorDatatypeType_add(long jarg1, vectorDatatypeType jarg1_, long jarg2, DatatypeType jarg2_);
  public final static native long vectorDatatypeType_get(long jarg1, vectorDatatypeType jarg1_, int jarg2);
  public final static native void vectorDatatypeType_set(long jarg1, vectorDatatypeType jarg1_, int jarg2, long jarg3, DatatypeType jarg3_);
  public final static native void delete_vectorDatatypeType(long jarg1);
  public final static native long new_vectorSExpr__SWIG_0();
  public final static native long new_vectorSExpr__SWIG_1(long jarg1);
  public final static native long vectorSExpr_size(long jarg1, vectorSExpr jarg1_);
  public final static native long vectorSExpr_capacity(long jarg1, vectorSExpr jarg1_);
  public final static native void vectorSExpr_reserve(long jarg1, vectorSExpr jarg1_, long jarg2);
  public final static native boolean vectorSExpr_isEmpty(long jarg1, vectorSExpr jarg1_);
  public final static native void vectorSExpr_clear(long jarg1, vectorSExpr jarg1_);
  public final static native void vectorSExpr_add(long jarg1, vectorSExpr jarg1_, long jarg2, SExpr jarg2_);
  public final static native long vectorSExpr_get(long jarg1, vectorSExpr jarg1_, int jarg2);
  public final static native void vectorSExpr_set(long jarg1, vectorSExpr jarg1_, int jarg2, long jarg3, SExpr jarg3_);
  public final static native void delete_vectorSExpr(long jarg1);
  public final static native long new_vectorString__SWIG_0();
  public final static native long new_vectorString__SWIG_1(long jarg1);
  public final static native long vectorString_size(long jarg1, vectorString jarg1_);
  public final static native long vectorString_capacity(long jarg1, vectorString jarg1_);
  public final static native void vectorString_reserve(long jarg1, vectorString jarg1_, long jarg2);
  public final static native boolean vectorString_isEmpty(long jarg1, vectorString jarg1_);
  public final static native void vectorString_clear(long jarg1, vectorString jarg1_);
  public final static native void vectorString_add(long jarg1, vectorString jarg1_, String jarg2);
  public final static native String vectorString_get(long jarg1, vectorString jarg1_, int jarg2);
  public final static native void vectorString_set(long jarg1, vectorString jarg1_, int jarg2, String jarg3);
  public final static native void delete_vectorString(long jarg1);
  public final static native long new_vectorPairStringType__SWIG_0();
  public final static native long new_vectorPairStringType__SWIG_1(long jarg1);
  public final static native long vectorPairStringType_size(long jarg1, vectorPairStringType jarg1_);
  public final static native long vectorPairStringType_capacity(long jarg1, vectorPairStringType jarg1_);
  public final static native void vectorPairStringType_reserve(long jarg1, vectorPairStringType jarg1_, long jarg2);
  public final static native boolean vectorPairStringType_isEmpty(long jarg1, vectorPairStringType jarg1_);
  public final static native void vectorPairStringType_clear(long jarg1, vectorPairStringType jarg1_);
  public final static native void vectorPairStringType_add(long jarg1, vectorPairStringType jarg1_, long jarg2, pairStringType jarg2_);
  public final static native long vectorPairStringType_get(long jarg1, vectorPairStringType jarg1_, int jarg2);
  public final static native void vectorPairStringType_set(long jarg1, vectorPairStringType jarg1_, int jarg2, long jarg3, pairStringType jarg3_);
  public final static native void delete_vectorPairStringType(long jarg1);
  public final static native long new_pairStringType__SWIG_0();
  public final static native long new_pairStringType__SWIG_1(String jarg1, long jarg2, Type jarg2_);
  public final static native long new_pairStringType__SWIG_2(long jarg1, pairStringType jarg1_);
  public final static native void pairStringType_first_set(long jarg1, pairStringType jarg1_, String jarg2);
  public final static native String pairStringType_first_get(long jarg1, pairStringType jarg1_);
  public final static native void pairStringType_second_set(long jarg1, pairStringType jarg1_, long jarg2, Type jarg2_);
  public final static native long pairStringType_second_get(long jarg1, pairStringType jarg1_);
  public final static native void delete_pairStringType(long jarg1);
  public final static native long new_setOfType();
  public final static native void delete_setOfType(long jarg1);
  public final static native long new_hashmapExpr();
  public final static native void delete_hashmapExpr(long jarg1);
  public final static native String Configuration_getName();
  public final static native boolean Configuration_isDebugBuild();
  public final static native boolean Configuration_isStatisticsBuild();
  public final static native boolean Configuration_isReplayBuild();
  public final static native boolean Configuration_isTracingBuild();
  public final static native boolean Configuration_isDumpingBuild();
  public final static native boolean Configuration_isMuzzledBuild();
  public final static native boolean Configuration_isAssertionBuild();
  public final static native boolean Configuration_isProofBuild();
  public final static native boolean Configuration_isCoverageBuild();
  public final static native boolean Configuration_isProfilingBuild();
  public final static native boolean Configuration_isAsanBuild();
  public final static native boolean Configuration_isCompetitionBuild();
  public final static native String Configuration_getPackageName();
  public final static native String Configuration_getVersionString();
  public final static native long Configuration_getVersionMajor();
  public final static native long Configuration_getVersionMinor();
  public final static native long Configuration_getVersionRelease();
  public final static native String Configuration_getVersionExtra();
  public final static native String Configuration_copyright();
  public final static native String Configuration_about();
  public final static native boolean Configuration_licenseIsGpl();
  public final static native boolean Configuration_isBuiltWithGmp();
  public final static native boolean Configuration_isBuiltWithCln();
  public final static native boolean Configuration_isBuiltWithGlpk();
  public final static native boolean Configuration_isBuiltWithAbc();
  public final static native boolean Configuration_isBuiltWithCadical();
  public final static native boolean Configuration_isBuiltWithCryptominisat();
  public final static native boolean Configuration_isBuiltWithDrat2Er();
  public final static native boolean Configuration_isBuiltWithReadline();
  public final static native boolean Configuration_isBuiltWithLfsc();
  public final static native boolean Configuration_isBuiltWithSymFPU();
  public final static native long Configuration_getNumDebugTags();
  public final static native String[] Configuration_getDebugTags();
  public final static native boolean Configuration_isDebugTag(String jarg1);
  public final static native long Configuration_getNumTraceTags();
  public final static native String[] Configuration_getTraceTags();
  public final static native boolean Configuration_isTraceTag(String jarg1);
  public final static native boolean Configuration_isGitBuild();
  public final static native String Configuration_getGitBranchName();
  public final static native String Configuration_getGitCommit();
  public final static native boolean Configuration_hasGitModifications();
  public final static native String Configuration_getGitId();
  public final static native String Configuration_getCompiler();
  public final static native String Configuration_getCompiledDateTime();
  public final static native void delete_Configuration(long jarg1);
  public final static native long new_Exception__SWIG_0();
  public final static native long new_Exception__SWIG_1(String jarg1);
  public final static native void delete_Exception(long jarg1);
  public final static native void Exception_setMessage(long jarg1, Exception jarg1_, String jarg2);
  public final static native String Exception_getMessage(long jarg1, Exception jarg1_);
  public final static native String Exception_what(long jarg1, Exception jarg1_);
  public final static native String Exception_toString(long jarg1, Exception jarg1_);
  public final static native void Exception_toStream(long jarg1, Exception jarg1_, long jarg2);
  public final static native long new_CVC4IllegalArgumentException__SWIG_1(String jarg1, String jarg2, String jarg3, String jarg4);
  public final static native long new_CVC4IllegalArgumentException__SWIG_2(String jarg1, String jarg2, String jarg3);
  public final static native String CVC4IllegalArgumentException_formatVariadic__SWIG_0();
  public final static native String CVC4IllegalArgumentException_formatVariadic__SWIG_1(String jarg1);
  public final static native void delete_CVC4IllegalArgumentException(long jarg1);
  public final static native long new_LastExceptionBuffer();
  public final static native void delete_LastExceptionBuffer(long jarg1);
  public final static native void LastExceptionBuffer_setContents(long jarg1, LastExceptionBuffer jarg1_, String jarg2);
  public final static native String LastExceptionBuffer_getContents(long jarg1, LastExceptionBuffer jarg1_);
  public final static native long LastExceptionBuffer_getCurrent();
  public final static native void LastExceptionBuffer_setCurrent(long jarg1, LastExceptionBuffer jarg1_);
  public final static native String LastExceptionBuffer_currentContents();
  public final static native long new_ModalException__SWIG_0();
  public final static native long new_ModalException__SWIG_1(String jarg1);
  public final static native void delete_ModalException(long jarg1);
  public final static native long new_RecoverableModalException__SWIG_0(String jarg1);
  public final static native void delete_RecoverableModalException(long jarg1);
  public final static native int INPUT_LANG_AUTO_get();
  public final static native int INPUT_LANG_SMTLIB_V1_get();
  public final static native int INPUT_LANG_SMTLIB_V2_get();
  public final static native int OUTPUT_LANG_AUTO_get();
  public final static native int OUTPUT_LANG_SMTLIB_V1_get();
  public final static native int OUTPUT_LANG_SMTLIB_V2_0_get();
  public final static native int OUTPUT_LANG_SMTLIB_V2_5_get();
  public final static native int OUTPUT_LANG_SMTLIB_V2_6_get();
  public final static native int OUTPUT_LANG_SMTLIB_V2_get();
  public final static native int OUTPUT_LANG_SMTLIB_V2_6_1_get();
  public final static native int OUTPUT_LANG_TPTP_get();
  public final static native int OUTPUT_LANG_CVC4_get();
  public final static native int OUTPUT_LANG_Z3STR_get();
  public final static native int OUTPUT_LANG_SYGUS_get();
  public final static native int OUTPUT_LANG_AST_get();
  public final static native boolean isInputLang_smt2(int jarg1);
  public final static native boolean isOutputLang_smt2(int jarg1);
  public final static native boolean isInputLang_smt2_5__SWIG_0(int jarg1, boolean jarg2);
  public final static native boolean isInputLang_smt2_5__SWIG_1(int jarg1);
  public final static native boolean isOutputLang_smt2_5__SWIG_0(int jarg1, boolean jarg2);
  public final static native boolean isOutputLang_smt2_5__SWIG_1(int jarg1);
  public final static native boolean isInputLang_smt2_6__SWIG_0(int jarg1, boolean jarg2);
  public final static native boolean isInputLang_smt2_6__SWIG_1(int jarg1);
  public final static native boolean isOutputLang_smt2_6__SWIG_0(int jarg1, boolean jarg2);
  public final static native boolean isOutputLang_smt2_6__SWIG_1(int jarg1);
  public final static native int toInputLanguage__SWIG_0(int jarg1);
  public final static native int toOutputLanguage__SWIG_0(int jarg1);
  public final static native int toInputLanguage__SWIG_1(String jarg1);
  public final static native int toOutputLanguage__SWIG_1(String jarg1);
  public final static native long new_Integer__SWIG_0();
  public final static native long new_Integer__SWIG_1(String jarg1, long jarg2);
  public final static native long new_Integer__SWIG_2(String jarg1);
  public final static native long new_Integer__SWIG_3(long jarg1, Integer jarg1_);
  public final static native long new_Integer__SWIG_4(int jarg1);
  public final static native long new_Integer__SWIG_5(long jarg1);
  public final static native void delete_Integer(long jarg1);
  public final static native long Integer_getValue(long jarg1, Integer jarg1_);
  public final static native long Integer_assign(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native boolean Integer_equals(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_minus__SWIG_0(long jarg1, Integer jarg1_);
  public final static native boolean Integer_less(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native boolean Integer_lessEqual(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native boolean Integer_greater(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native boolean Integer_greaterEqual(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_plus(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_plusAssign(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_minus__SWIG_1(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_minusAssign(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_times(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_timesAssign(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_bitwiseOr(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_bitwiseAnd(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_bitwiseXor(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_bitwiseNot(long jarg1, Integer jarg1_);
  public final static native long Integer_multiplyByPow2(long jarg1, Integer jarg1_, long jarg2);
  public final static native long Integer_setBit(long jarg1, Integer jarg1_, long jarg2);
  public final static native boolean Integer_isBitSet(long jarg1, Integer jarg1_, long jarg2);
  public final static native long Integer_oneExtend(long jarg1, Integer jarg1_, long jarg2, long jarg3);
  public final static native long Integer_toUnsignedInt(long jarg1, Integer jarg1_);
  public final static native long Integer_extractBitRange(long jarg1, Integer jarg1_, long jarg2, long jarg3);
  public final static native long Integer_floorDivideQuotient(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_floorDivideRemainder(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native void Integer_floorQR(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_, long jarg3, Integer jarg3_, long jarg4, Integer jarg4_);
  public final static native long Integer_ceilingDivideQuotient(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_ceilingDivideRemainder(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native void Integer_euclidianQR(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_, long jarg3, Integer jarg3_, long jarg4, Integer jarg4_);
  public final static native long Integer_euclidianDivideQuotient(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_euclidianDivideRemainder(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_exactQuotient(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_modByPow2(long jarg1, Integer jarg1_, long jarg2);
  public final static native long Integer_divByPow2(long jarg1, Integer jarg1_, long jarg2);
  public final static native int Integer_sgn(long jarg1, Integer jarg1_);
  public final static native boolean Integer_strictlyPositive(long jarg1, Integer jarg1_);
  public final static native boolean Integer_strictlyNegative(long jarg1, Integer jarg1_);
  public final static native boolean Integer_isZero(long jarg1, Integer jarg1_);
  public final static native boolean Integer_isOne(long jarg1, Integer jarg1_);
  public final static native boolean Integer_isNegativeOne(long jarg1, Integer jarg1_);
  public final static native long Integer_pow(long jarg1, Integer jarg1_, long jarg2);
  public final static native long Integer_gcd(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_lcm(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_modAdd(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_, long jarg3, Integer jarg3_);
  public final static native long Integer_modMultiply(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_, long jarg3, Integer jarg3_);
  public final static native long Integer_modInverse(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native boolean Integer_divides(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_abs(long jarg1, Integer jarg1_);
  public final static native String Integer_toString__SWIG_0(long jarg1, Integer jarg1_, int jarg2);
  public final static native String Integer_toString__SWIG_1(long jarg1, Integer jarg1_);
  public final static native boolean Integer_fitsSignedInt(long jarg1, Integer jarg1_);
  public final static native boolean Integer_fitsUnsignedInt(long jarg1, Integer jarg1_);
  public final static native int Integer_getSignedInt(long jarg1, Integer jarg1_);
  public final static native long Integer_getUnsignedInt(long jarg1, Integer jarg1_);
  public final static native boolean Integer_fitsSignedLong(long jarg1, Integer jarg1_);
  public final static native boolean Integer_fitsUnsignedLong(long jarg1, Integer jarg1_);
  public final static native int Integer_getLong(long jarg1, Integer jarg1_);
  public final static native long Integer_getUnsignedLong(long jarg1, Integer jarg1_);
  public final static native long Integer_hash(long jarg1, Integer jarg1_);
  public final static native boolean Integer_testBit(long jarg1, Integer jarg1_, long jarg2);
  public final static native long Integer_isPow2(long jarg1, Integer jarg1_);
  public final static native long Integer_length(long jarg1, Integer jarg1_);
  public final static native void Integer_extendedGcd(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_, long jarg3, Integer jarg3_, long jarg4, Integer jarg4_, long jarg5, Integer jarg5_);
  public final static native long Integer_min(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long Integer_max(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long IntegerHashFunction_apply(long jarg1, IntegerHashFunction jarg1_, long jarg2, Integer jarg2_);
  public final static native long new_IntegerHashFunction();
  public final static native void delete_IntegerHashFunction(long jarg1);
  public final static native long Rational_fromDecimal(String jarg1);
  public final static native long new_Rational__SWIG_0();
  public final static native long new_Rational__SWIG_1(String jarg1, long jarg2);
  public final static native long new_Rational__SWIG_2(String jarg1);
  public final static native long new_Rational__SWIG_3(long jarg1, Rational jarg1_);
  public final static native long new_Rational__SWIG_4(int jarg1);
  public final static native long new_Rational__SWIG_5(long jarg1);
  public final static native long new_Rational__SWIG_6(int jarg1, int jarg2);
  public final static native long new_Rational__SWIG_7(long jarg1, long jarg2);
  public final static native long new_Rational__SWIG_8(long jarg1, Integer jarg1_, long jarg2, Integer jarg2_);
  public final static native long new_Rational__SWIG_9(long jarg1, Integer jarg1_);
  public final static native void delete_Rational(long jarg1);
  public final static native long Rational_getValue(long jarg1, Rational jarg1_);
  public final static native long Rational_getNumerator(long jarg1, Rational jarg1_);
  public final static native long Rational_getDenominator(long jarg1, Rational jarg1_);
  public final static native long Rational_fromDouble(double jarg1);
  public final static native double Rational_getDouble(long jarg1, Rational jarg1_);
  public final static native long Rational_inverse(long jarg1, Rational jarg1_);
  public final static native int Rational_cmp(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native int Rational_sgn(long jarg1, Rational jarg1_);
  public final static native boolean Rational_isZero(long jarg1, Rational jarg1_);
  public final static native boolean Rational_isOne(long jarg1, Rational jarg1_);
  public final static native boolean Rational_isNegativeOne(long jarg1, Rational jarg1_);
  public final static native long Rational_abs(long jarg1, Rational jarg1_);
  public final static native long Rational_floor(long jarg1, Rational jarg1_);
  public final static native long Rational_ceiling(long jarg1, Rational jarg1_);
  public final static native long Rational_floor_frac(long jarg1, Rational jarg1_);
  public final static native long Rational_assign(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_minus__SWIG_0(long jarg1, Rational jarg1_);
  public final static native boolean Rational_equals(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native boolean Rational_less(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native boolean Rational_lessEqual(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native boolean Rational_greater(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native boolean Rational_greaterEqual(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_plus(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_minus__SWIG_1(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_times(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_dividedBy(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_plusAssign(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_minusAssign(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_timesAssign(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long Rational_dividedByAssign(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native boolean Rational_isIntegral(long jarg1, Rational jarg1_);
  public final static native String Rational_toString__SWIG_0(long jarg1, Rational jarg1_, int jarg2);
  public final static native String Rational_toString__SWIG_1(long jarg1, Rational jarg1_);
  public final static native long Rational_hash(long jarg1, Rational jarg1_);
  public final static native long Rational_complexity(long jarg1, Rational jarg1_);
  public final static native int Rational_absCmp(long jarg1, Rational jarg1_, long jarg2, Rational jarg2_);
  public final static native long RationalHashFunction_apply(long jarg1, RationalHashFunction jarg1_, long jarg2, Rational jarg2_);
  public final static native long new_RationalHashFunction();
  public final static native void delete_RationalHashFunction(long jarg1);
  public final static native long new_BitVector__SWIG_0(long jarg1, long jarg2, Integer jarg2_);
  public final static native long new_BitVector__SWIG_1(long jarg1);
  public final static native long new_BitVector__SWIG_2();
  public final static native long new_BitVector__SWIG_3(long jarg1, long jarg2);
  public final static native long new_BitVector__SWIG_4(long jarg1, java.math.BigInteger jarg2);
  public final static native long new_BitVector__SWIG_5(long jarg1, long jarg2, BitVector jarg2_);
  public final static native long new_BitVector__SWIG_6(String jarg1, long jarg2);
  public final static native long new_BitVector__SWIG_7(String jarg1);
  public final static native void delete_BitVector(long jarg1);
  public final static native long BitVector_assign(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_getSize(long jarg1, BitVector jarg1_);
  public final static native long BitVector_getValue(long jarg1, BitVector jarg1_);
  public final static native long BitVector_toInteger(long jarg1, BitVector jarg1_);
  public final static native long BitVector_toSignedInteger(long jarg1, BitVector jarg1_);
  public final static native String BitVector_toString__SWIG_0(long jarg1, BitVector jarg1_, long jarg2);
  public final static native String BitVector_toString__SWIG_1(long jarg1, BitVector jarg1_);
  public final static native long BitVector_hash(long jarg1, BitVector jarg1_);
  public final static native long BitVector_setBit(long jarg1, BitVector jarg1_, long jarg2);
  public final static native boolean BitVector_isBitSet(long jarg1, BitVector jarg1_, long jarg2);
  public final static native long BitVector_isPow2(long jarg1, BitVector jarg1_);
  public final static native long BitVector_concat(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_extract(long jarg1, BitVector jarg1_, long jarg2, long jarg3);
  public final static native boolean BitVector_equals(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native boolean BitVector_less(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native boolean BitVector_lessEqual(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native boolean BitVector_greater(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native boolean BitVector_greaterEqual(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native boolean BitVector_unsignedLessThan(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native boolean BitVector_unsignedLessThanEq(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native boolean BitVector_signedLessThan(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native boolean BitVector_signedLessThanEq(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_bitXor(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_bitOr(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_bitAnd(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_complement(long jarg1, BitVector jarg1_);
  public final static native long BitVector_plus(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_minus__SWIG_0(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_minus__SWIG_1(long jarg1, BitVector jarg1_);
  public final static native long BitVector_times(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_unsignedDivTotal(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_unsignedRemTotal(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_zeroExtend(long jarg1, BitVector jarg1_, long jarg2);
  public final static native long BitVector_signExtend(long jarg1, BitVector jarg1_, long jarg2);
  public final static native long BitVector_leftShift(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_logicalRightShift(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_arithRightShift(long jarg1, BitVector jarg1_, long jarg2, BitVector jarg2_);
  public final static native long BitVector_mkOnes(long jarg1);
  public final static native long BitVector_mkMinSigned(long jarg1);
  public final static native long BitVector_mkMaxSigned(long jarg1);
  public final static native void BitVectorExtract_high_set(long jarg1, BitVectorExtract jarg1_, long jarg2);
  public final static native long BitVectorExtract_high_get(long jarg1, BitVectorExtract jarg1_);
  public final static native void BitVectorExtract_low_set(long jarg1, BitVectorExtract jarg1_, long jarg2);
  public final static native long BitVectorExtract_low_get(long jarg1, BitVectorExtract jarg1_);
  public final static native long new_BitVectorExtract(long jarg1, long jarg2);
  public final static native boolean BitVectorExtract_equals(long jarg1, BitVectorExtract jarg1_, long jarg2, BitVectorExtract jarg2_);
  public final static native void delete_BitVectorExtract(long jarg1);
  public final static native void BitVectorBitOf_bitIndex_set(long jarg1, BitVectorBitOf jarg1_, long jarg2);
  public final static native long BitVectorBitOf_bitIndex_get(long jarg1, BitVectorBitOf jarg1_);
  public final static native long new_BitVectorBitOf(long jarg1);
  public final static native boolean BitVectorBitOf_equals(long jarg1, BitVectorBitOf jarg1_, long jarg2, BitVectorBitOf jarg2_);
  public final static native void delete_BitVectorBitOf(long jarg1);
  public final static native void BitVectorSize_size_set(long jarg1, BitVectorSize jarg1_, long jarg2);
  public final static native long BitVectorSize_size_get(long jarg1, BitVectorSize jarg1_);
  public final static native long new_BitVectorSize(long jarg1);
  public final static native long BitVectorSize_toUnsigned(long jarg1, BitVectorSize jarg1_);
  public final static native void delete_BitVectorSize(long jarg1);
  public final static native void BitVectorRepeat_repeatAmount_set(long jarg1, BitVectorRepeat jarg1_, long jarg2);
  public final static native long BitVectorRepeat_repeatAmount_get(long jarg1, BitVectorRepeat jarg1_);
  public final static native long new_BitVectorRepeat(long jarg1);
  public final static native long BitVectorRepeat_toUnsigned(long jarg1, BitVectorRepeat jarg1_);
  public final static native void delete_BitVectorRepeat(long jarg1);
  public final static native void BitVectorZeroExtend_zeroExtendAmount_set(long jarg1, BitVectorZeroExtend jarg1_, long jarg2);
  public final static native long BitVectorZeroExtend_zeroExtendAmount_get(long jarg1, BitVectorZeroExtend jarg1_);
  public final static native long new_BitVectorZeroExtend(long jarg1);
  public final static native long BitVectorZeroExtend_toUnsigned(long jarg1, BitVectorZeroExtend jarg1_);
  public final static native void delete_BitVectorZeroExtend(long jarg1);
  public final static native void BitVectorSignExtend_signExtendAmount_set(long jarg1, BitVectorSignExtend jarg1_, long jarg2);
  public final static native long BitVectorSignExtend_signExtendAmount_get(long jarg1, BitVectorSignExtend jarg1_);
  public final static native long new_BitVectorSignExtend(long jarg1);
  public final static native long BitVectorSignExtend_toUnsigned(long jarg1, BitVectorSignExtend jarg1_);
  public final static native void delete_BitVectorSignExtend(long jarg1);
  public final static native void BitVectorRotateLeft_rotateLeftAmount_set(long jarg1, BitVectorRotateLeft jarg1_, long jarg2);
  public final static native long BitVectorRotateLeft_rotateLeftAmount_get(long jarg1, BitVectorRotateLeft jarg1_);
  public final static native long new_BitVectorRotateLeft(long jarg1);
  public final static native long BitVectorRotateLeft_toUnsigned(long jarg1, BitVectorRotateLeft jarg1_);
  public final static native void delete_BitVectorRotateLeft(long jarg1);
  public final static native void BitVectorRotateRight_rotateRightAmount_set(long jarg1, BitVectorRotateRight jarg1_, long jarg2);
  public final static native long BitVectorRotateRight_rotateRightAmount_get(long jarg1, BitVectorRotateRight jarg1_);
  public final static native long new_BitVectorRotateRight(long jarg1);
  public final static native long BitVectorRotateRight_toUnsigned(long jarg1, BitVectorRotateRight jarg1_);
  public final static native void delete_BitVectorRotateRight(long jarg1);
  public final static native void IntToBitVector_size_set(long jarg1, IntToBitVector jarg1_, long jarg2);
  public final static native long IntToBitVector_size_get(long jarg1, IntToBitVector jarg1_);
  public final static native long new_IntToBitVector(long jarg1);
  public final static native long IntToBitVector_toUnsigned(long jarg1, IntToBitVector jarg1_);
  public final static native void delete_IntToBitVector(long jarg1);
  public final static native long BitVectorHashFunction_apply(long jarg1, BitVectorHashFunction jarg1_, long jarg2, BitVector jarg2_);
  public final static native long new_BitVectorHashFunction();
  public final static native void delete_BitVectorHashFunction(long jarg1);
  public final static native long BitVectorExtractHashFunction_apply(long jarg1, BitVectorExtractHashFunction jarg1_, long jarg2, BitVectorExtract jarg2_);
  public final static native long new_BitVectorExtractHashFunction();
  public final static native void delete_BitVectorExtractHashFunction(long jarg1);
  public final static native long BitVectorBitOfHashFunction_apply(long jarg1, BitVectorBitOfHashFunction jarg1_, long jarg2, BitVectorBitOf jarg2_);
  public final static native long new_BitVectorBitOfHashFunction();
  public final static native void delete_BitVectorBitOfHashFunction(long jarg1);
  public final static native long BoolHashFunction_apply(long jarg1, BoolHashFunction jarg1_, boolean jarg2);
  public final static native long new_BoolHashFunction();
  public final static native void delete_BoolHashFunction(long jarg1);
  public final static native long new_CardinalityBeth(long jarg1, Integer jarg1_);
  public final static native long CardinalityBeth_getNumber(long jarg1, CardinalityBeth jarg1_);
  public final static native void delete_CardinalityBeth(long jarg1);
  public final static native long new_CardinalityUnknown();
  public final static native void delete_CardinalityUnknown(long jarg1);
  public final static native long Cardinality_INTEGERS_get();
  public final static native long Cardinality_REALS_get();
  public final static native long Cardinality_UNKNOWN_CARD_get();
  public final static native long new_Cardinality__SWIG_0(int jarg1);
  public final static native long new_Cardinality__SWIG_1(long jarg1, Integer jarg1_);
  public final static native long new_Cardinality__SWIG_2(long jarg1, CardinalityBeth jarg1_);
  public final static native long new_Cardinality__SWIG_3(long jarg1, CardinalityUnknown jarg1_);
  public final static native boolean Cardinality_isUnknown(long jarg1, Cardinality jarg1_);
  public final static native boolean Cardinality_isFinite(long jarg1, Cardinality jarg1_);
  public final static native boolean Cardinality_isOne(long jarg1, Cardinality jarg1_);
  public final static native boolean Cardinality_isLargeFinite(long jarg1, Cardinality jarg1_);
  public final static native boolean Cardinality_isInfinite(long jarg1, Cardinality jarg1_);
  public final static native boolean Cardinality_isCountable(long jarg1, Cardinality jarg1_);
  public final static native long Cardinality_getFiniteCardinality(long jarg1, Cardinality jarg1_);
  public final static native long Cardinality_getBethNumber(long jarg1, Cardinality jarg1_);
  public final static native long Cardinality_plusAssign(long jarg1, Cardinality jarg1_, long jarg2, Cardinality jarg2_);
  public final static native long Cardinality_timesAssign(long jarg1, Cardinality jarg1_, long jarg2, Cardinality jarg2_);
  public final static native long Cardinality_powerAssign(long jarg1, Cardinality jarg1_, long jarg2, Cardinality jarg2_);
  public final static native long Cardinality_plus(long jarg1, Cardinality jarg1_, long jarg2, Cardinality jarg2_);
  public final static native long Cardinality_times(long jarg1, Cardinality jarg1_, long jarg2, Cardinality jarg2_);
  public final static native long Cardinality_power(long jarg1, Cardinality jarg1_, long jarg2, Cardinality jarg2_);
  public final static native int Cardinality_compare(long jarg1, Cardinality jarg1_, long jarg2, Cardinality jarg2_);
  public final static native String Cardinality_toString(long jarg1, Cardinality jarg1_);
  public final static native boolean Cardinality_knownLessThanOrEqual(long jarg1, Cardinality jarg1_, long jarg2, Cardinality jarg2_);
  public final static native void delete_Cardinality(long jarg1);
  public final static native java.math.BigInteger fnv1a_64__SWIG_0(java.math.BigInteger jarg1, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger fnv1a_64__SWIG_1(java.math.BigInteger jarg1);
  public final static native void delete_Proof(long jarg1);
  public final static native void Proof_toStream__SWIG_0(long jarg1, Proof jarg1_, long jarg2);
  public final static native void Proof_toStream__SWIG_1(long jarg1, Proof jarg1_, long jarg2, long jarg3);
  public final static native long CVC4String_start_code();
  public final static native long CVC4String_num_codes();
  public final static native long CVC4String_convertCharToUnsignedInt(short jarg1);
  public final static native short CVC4String_convertUnsignedIntToChar(long jarg1);
  public final static native boolean CVC4String_isPrintable(long jarg1);
  public final static native long CVC4String_convertCodeToUnsignedInt(long jarg1);
  public final static native long CVC4String_convertUnsignedIntToCode(long jarg1);
  public final static native long new_CVC4String__SWIG_0();
  public final static native long new_CVC4String__SWIG_1(String jarg1, boolean jarg2);
  public final static native long new_CVC4String__SWIG_3(String jarg1);
  public final static native long new_CVC4String__SWIG_4(long jarg1, vectorUnsignedInt jarg1_);
  public final static native long CVC4String_assign(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native long CVC4String_concat(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native boolean CVC4String_equals(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native boolean CVC4String_less(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native boolean CVC4String_greater(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native boolean CVC4String_lessEqual(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native boolean CVC4String_greaterEqual(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native boolean CVC4String_strncmp(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_, long jarg3);
  public final static native boolean CVC4String_rstrncmp(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_, long jarg3);
  public final static native String CVC4String_toString__SWIG_0(long jarg1, CVC4String jarg1_, boolean jarg2);
  public final static native String CVC4String_toString__SWIG_1(long jarg1, CVC4String jarg1_);
  public final static native boolean CVC4String_empty(long jarg1, CVC4String jarg1_);
  public final static native boolean CVC4String_isEmptyString(long jarg1, CVC4String jarg1_);
  public final static native boolean CVC4String_isLeq(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native long CVC4String_size(long jarg1, CVC4String jarg1_);
  public final static native boolean CVC4String_isRepeated(long jarg1, CVC4String jarg1_);
  public final static native boolean CVC4String_tailcmp(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_, int[] jarg3);
  public final static native long CVC4String_find__SWIG_0(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_, long jarg3);
  public final static native long CVC4String_find__SWIG_1(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native long CVC4String_rfind__SWIG_0(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_, long jarg3);
  public final static native long CVC4String_rfind__SWIG_1(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native long CVC4String_replace(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_, long jarg3, CVC4String jarg3_);
  public final static native long CVC4String_substr__SWIG_0(long jarg1, CVC4String jarg1_, long jarg2);
  public final static native long CVC4String_substr__SWIG_1(long jarg1, CVC4String jarg1_, long jarg2, long jarg3);
  public final static native long CVC4String_prefix(long jarg1, CVC4String jarg1_, long jarg2);
  public final static native long CVC4String_suffix(long jarg1, CVC4String jarg1_, long jarg2);
  public final static native boolean CVC4String_noOverlapWith(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native long CVC4String_overlap(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native long CVC4String_roverlap(long jarg1, CVC4String jarg1_, long jarg2, CVC4String jarg2_);
  public final static native boolean CVC4String_isNumber(long jarg1, CVC4String jarg1_);
  public final static native long CVC4String_toNumber(long jarg1, CVC4String jarg1_);
  public final static native long CVC4String_getVec(long jarg1, CVC4String jarg1_);
  public final static native long CVC4String_front(long jarg1, CVC4String jarg1_);
  public final static native long CVC4String_back(long jarg1, CVC4String jarg1_);
  public final static native boolean CVC4String_isDigit(long jarg1);
  public final static native long CVC4String_maxSize();
  public final static native void delete_CVC4String(long jarg1);
  public final static native long CVC4StringHashFunction_apply(long jarg1, CVC4StringHashFunction jarg1_, long jarg2, CVC4String jarg2_);
  public final static native long new_CVC4StringHashFunction();
  public final static native void delete_CVC4StringHashFunction(long jarg1);
  public final static native long new_Timer();
  public final static native boolean Timer_on(long jarg1, Timer jarg1_);
  public final static native void Timer_set__SWIG_0(long jarg1, Timer jarg1_, java.math.BigInteger jarg2, boolean jarg3);
  public final static native void Timer_set__SWIG_1(long jarg1, Timer jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger Timer_elapsed(long jarg1, Timer jarg1_);
  public final static native boolean Timer_expired(long jarg1, Timer jarg1_);
  public final static native void delete_Timer(long jarg1);
  public final static native long new_ResourceManager();
  public final static native boolean ResourceManager_limitOn(long jarg1, ResourceManager jarg1_);
  public final static native boolean ResourceManager_cumulativeLimitOn(long jarg1, ResourceManager jarg1_);
  public final static native boolean ResourceManager_perCallLimitOn(long jarg1, ResourceManager jarg1_);
  public final static native boolean ResourceManager_outOfResources(long jarg1, ResourceManager jarg1_);
  public final static native boolean ResourceManager_outOfTime(long jarg1, ResourceManager jarg1_);
  public final static native boolean ResourceManager_out(long jarg1, ResourceManager jarg1_);
  public final static native java.math.BigInteger ResourceManager_getResourceUsage(long jarg1, ResourceManager jarg1_);
  public final static native java.math.BigInteger ResourceManager_getTimeUsage(long jarg1, ResourceManager jarg1_);
  public final static native java.math.BigInteger ResourceManager_getResourceRemaining(long jarg1, ResourceManager jarg1_);
  public final static native java.math.BigInteger ResourceManager_getTimeRemaining(long jarg1, ResourceManager jarg1_);
  public final static native java.math.BigInteger ResourceManager_getResourceBudgetForThisCall(long jarg1, ResourceManager jarg1_);
  public final static native void ResourceManager_spendResource(long jarg1, ResourceManager jarg1_, long jarg2);
  public final static native void ResourceManager_setHardLimit(long jarg1, ResourceManager jarg1_, boolean jarg2);
  public final static native void ResourceManager_setResourceLimit__SWIG_0(long jarg1, ResourceManager jarg1_, java.math.BigInteger jarg2, boolean jarg3);
  public final static native void ResourceManager_setResourceLimit__SWIG_1(long jarg1, ResourceManager jarg1_, java.math.BigInteger jarg2);
  public final static native void ResourceManager_setTimeLimit__SWIG_0(long jarg1, ResourceManager jarg1_, java.math.BigInteger jarg2, boolean jarg3);
  public final static native void ResourceManager_setTimeLimit__SWIG_1(long jarg1, ResourceManager jarg1_, java.math.BigInteger jarg2);
  public final static native void ResourceManager_useCPUTime(long jarg1, ResourceManager jarg1_, boolean jarg2);
  public final static native void ResourceManager_enable(long jarg1, ResourceManager jarg1_, boolean jarg2);
  public final static native void ResourceManager_beginCall(long jarg1, ResourceManager jarg1_);
  public final static native void ResourceManager_endCall(long jarg1, ResourceManager jarg1_);
  public final static native java.math.BigInteger ResourceManager_getFrequencyCount();
  public final static native long ResourceManager_registerHardListener(long jarg1, ResourceManager jarg1_, long jarg2);
  public final static native long ResourceManager_registerSoftListener(long jarg1, ResourceManager jarg1_, long jarg2);
  public final static native void delete_ResourceManager(long jarg1);
  public final static native int Result_UNSAT_get();
  public final static native int Result_SAT_get();
  public final static native int Result_SAT_UNKNOWN_get();
  public final static native int Result_INVALID_get();
  public final static native int Result_VALID_get();
  public final static native int Result_VALIDITY_UNKNOWN_get();
  public final static native long new_Result__SWIG_0();
  public final static native long new_Result__SWIG_1(int jarg1, String jarg2);
  public final static native long new_Result__SWIG_2(int jarg1);
  public final static native long new_Result__SWIG_3(int jarg1, String jarg2);
  public final static native long new_Result__SWIG_4(int jarg1);
  public final static native long new_Result__SWIG_5(int jarg1, int jarg2, String jarg3);
  public final static native long new_Result__SWIG_6(int jarg1, int jarg2);
  public final static native long new_Result__SWIG_7(int jarg1, int jarg2, String jarg3);
  public final static native long new_Result__SWIG_8(int jarg1, int jarg2);
  public final static native long new_Result__SWIG_9(String jarg1, String jarg2);
  public final static native long new_Result__SWIG_10(String jarg1);
  public final static native long new_Result__SWIG_11(long jarg1, Result jarg1_, String jarg2);
  public final static native int Result_isSat(long jarg1, Result jarg1_);
  public final static native int Result_isValid(long jarg1, Result jarg1_);
  public final static native boolean Result_isUnknown(long jarg1, Result jarg1_);
  public final static native int Result_getType(long jarg1, Result jarg1_);
  public final static native boolean Result_isNull(long jarg1, Result jarg1_);
  public final static native int Result_whyUnknown(long jarg1, Result jarg1_);
  public final static native boolean Result_equals(long jarg1, Result jarg1_, long jarg2, Result jarg2_);
  public final static native long Result_asSatisfiabilityResult(long jarg1, Result jarg1_);
  public final static native long Result_asValidityResult(long jarg1, Result jarg1_);
  public final static native String Result_toString(long jarg1, Result jarg1_);
  public final static native String Result_getInputName(long jarg1, Result jarg1_);
  public final static native void Result_toStream(long jarg1, Result jarg1_, long jarg2, int jarg3);
  public final static native void Result_toStreamSmt2(long jarg1, Result jarg1_, long jarg2);
  public final static native void Result_toStreamTptp(long jarg1, Result jarg1_, long jarg2);
  public final static native void Result_toStreamDefault(long jarg1, Result jarg1_, long jarg2);
  public final static native void delete_Result(long jarg1);
  public final static native long new_SExprKeyword(String jarg1);
  public final static native String SExprKeyword_getString(long jarg1, SExprKeyword jarg1_);
  public final static native void delete_SExprKeyword(long jarg1);
  public final static native long new_SExpr__SWIG_0();
  public final static native long new_SExpr__SWIG_1(long jarg1, SExpr jarg1_);
  public final static native void delete_SExpr(long jarg1);
  public final static native long new_SExpr__SWIG_2(long jarg1, Integer jarg1_);
  public final static native long new_SExpr__SWIG_3(int jarg1);
  public final static native long new_SExpr__SWIG_4(long jarg1, Rational jarg1_);
  public final static native long new_SExpr__SWIG_5(String jarg1);
  public final static native long new_SExpr__SWIG_6(boolean jarg1);
  public final static native long new_SExpr__SWIG_7(long jarg1, SExprKeyword jarg1_);
  public final static native long new_SExpr__SWIG_8(long jarg1, vectorSExpr jarg1_);
  public final static native boolean SExpr_isAtom(long jarg1, SExpr jarg1_);
  public final static native boolean SExpr_isInteger(long jarg1, SExpr jarg1_);
  public final static native boolean SExpr_isRational(long jarg1, SExpr jarg1_);
  public final static native boolean SExpr_isString(long jarg1, SExpr jarg1_);
  public final static native boolean SExpr_isKeyword(long jarg1, SExpr jarg1_);
  public final static native String SExpr_getValue(long jarg1, SExpr jarg1_);
  public final static native long SExpr_getIntegerValue(long jarg1, SExpr jarg1_);
  public final static native long SExpr_getRationalValue(long jarg1, SExpr jarg1_);
  public final static native long SExpr_getChildren(long jarg1, SExpr jarg1_);
  public final static native boolean SExpr_equals(long jarg1, SExpr jarg1_, long jarg2, SExpr jarg2_);
  public final static native long SExpr_parseAtom(String jarg1);
  public final static native long SExpr_parseListOfAtoms(long jarg1, vectorString jarg1_);
  public final static native long SExpr_parseListOfListOfAtoms(long jarg1);
  public final static native void SExpr_toStream__SWIG_0(long jarg1, long jarg2, SExpr jarg2_);
  public final static native void SExpr_toStream__SWIG_1(long jarg1, long jarg2, SExpr jarg2_, int jarg3);
  public final static native void SExpr_toStream__SWIG_2(long jarg1, long jarg2, SExpr jarg2_, int jarg3, int jarg4);
  public final static native String SExpr_toString(long jarg1, SExpr jarg1_);
  public final static native long new_PrettySExprs(boolean jarg1);
  public final static native void PrettySExprs_applyPrettySExprs(long jarg1, PrettySExprs jarg1_, long jarg2);
  public final static native boolean PrettySExprs_getPrettySExprs(long jarg1);
  public final static native void PrettySExprs_setPrettySExprs(long jarg1, boolean jarg2);
  public final static native long new_PrettySExprs_Scope(long jarg1, boolean jarg2);
  public final static native void delete_PrettySExprs_Scope(long jarg1);
  public final static native void delete_PrettySExprs(long jarg1);
  public final static native void delete_StatisticsBase(long jarg1);
  public final static native void StatisticsBase_setPrefix(long jarg1, StatisticsBase jarg1_, String jarg2);
  public final static native void StatisticsBase_flushInformation(long jarg1, StatisticsBase jarg1_, long jarg2);
  public final static native void StatisticsBase_safeFlushInformation(long jarg1, StatisticsBase jarg1_, int jarg2);
  public final static native long StatisticsBase_getStatistic(long jarg1, StatisticsBase jarg1_, String jarg2);
  public final static native long StatisticsBase_iterator(long jarg1, StatisticsBase jarg1_);
  public final static native long new_Statistics__SWIG_0(long jarg1, StatisticsBase jarg1_);
  public final static native long new_Statistics__SWIG_1(long jarg1, Statistics jarg1_);
  public final static native void delete_Statistics(long jarg1);
  public final static native long Statistics_assign__SWIG_0(long jarg1, Statistics jarg1_, long jarg2, StatisticsBase jarg2_);
  public final static native long Statistics_assign__SWIG_1(long jarg1, Statistics jarg1_, long jarg2, Statistics jarg2_);
  public final static native String JavaOutputStreamAdapter_toString(long jarg1, JavaOutputStreamAdapter jarg1_);
  public final static native long new_JavaOutputStreamAdapter();
  public final static native void delete_JavaOutputStreamAdapter(long jarg1);
  public final static native long new_JavaInputStreamAdapter(Object jarg1);
  public final static native void delete_JavaInputStreamAdapter(long jarg1);
  public final static native Object JavaInputStreamAdapter_getInputStream(long jarg1, JavaInputStreamAdapter jarg1_);
  public final static native long new_JavaIteratorAdapter_StatisticsBase(long jarg1, StatisticsBase jarg1_);
  public final static native boolean JavaIteratorAdapter_StatisticsBase_hasNext(long jarg1, JavaIteratorAdapter_StatisticsBase jarg1_);
  public final static native java.lang.Object[] JavaIteratorAdapter_StatisticsBase_getNext(long jarg1, JavaIteratorAdapter_StatisticsBase jarg1_);
  public final static native void delete_JavaIteratorAdapter_StatisticsBase(long jarg1);
  public final static native long new_TupleUpdate(long jarg1);
  public final static native long TupleUpdate_getIndex(long jarg1, TupleUpdate jarg1_);
  public final static native boolean TupleUpdate_equals(long jarg1, TupleUpdate jarg1_, long jarg2, TupleUpdate jarg2_);
  public final static native void delete_TupleUpdate(long jarg1);
  public final static native long TupleUpdateHashFunction_apply(long jarg1, TupleUpdateHashFunction jarg1_, long jarg2, TupleUpdate jarg2_);
  public final static native long new_TupleUpdateHashFunction();
  public final static native void delete_TupleUpdateHashFunction(long jarg1);
  public final static native long new_UnsafeInterruptException__SWIG_0();
  public final static native long new_UnsafeInterruptException__SWIG_1(String jarg1);
  public final static native void delete_UnsafeInterruptException(long jarg1);
  public final static native long new_UninterpretedConstant(long jarg1, long jarg2, Integer jarg2_);
  public final static native long UninterpretedConstant_getType(long jarg1, UninterpretedConstant jarg1_);
  public final static native long UninterpretedConstant_getIndex(long jarg1, UninterpretedConstant jarg1_);
  public final static native boolean UninterpretedConstant_equals(long jarg1, UninterpretedConstant jarg1_, long jarg2, UninterpretedConstant jarg2_);
  public final static native boolean UninterpretedConstant_less(long jarg1, UninterpretedConstant jarg1_, long jarg2, UninterpretedConstant jarg2_);
  public final static native boolean UninterpretedConstant_lessEqual(long jarg1, UninterpretedConstant jarg1_, long jarg2, UninterpretedConstant jarg2_);
  public final static native boolean UninterpretedConstant_greater(long jarg1, UninterpretedConstant jarg1_, long jarg2, UninterpretedConstant jarg2_);
  public final static native boolean UninterpretedConstant_greaterEqual(long jarg1, UninterpretedConstant jarg1_, long jarg2, UninterpretedConstant jarg2_);
  public final static native void delete_UninterpretedConstant(long jarg1);
  public final static native long UninterpretedConstantHashFunction_apply(long jarg1, UninterpretedConstantHashFunction jarg1_, long jarg2, UninterpretedConstant jarg2_);
  public final static native long new_UninterpretedConstantHashFunction();
  public final static native void delete_UninterpretedConstantHashFunction(long jarg1);
  public final static native long TypeHashFunction_apply(long jarg1, TypeHashFunction jarg1_, long jarg2, Type jarg2_);
  public final static native long new_TypeHashFunction();
  public final static native void delete_TypeHashFunction(long jarg1);
  public final static native void delete_Type(long jarg1);
  public final static native long new_Type__SWIG_1();
  public final static native long new_Type__SWIG_2(long jarg1, Type jarg1_);
  public final static native boolean Type_isNull(long jarg1, Type jarg1_);
  public final static native long Type_getCardinality(long jarg1, Type jarg1_);
  public final static native boolean Type_isWellFounded(long jarg1, Type jarg1_);
  public final static native boolean Type_isFirstClass(long jarg1, Type jarg1_);
  public final static native boolean Type_isFunctionLike(long jarg1, Type jarg1_);
  public final static native long Type_mkGroundTerm(long jarg1, Type jarg1_);
  public final static native boolean Type_isSubtypeOf(long jarg1, Type jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Type_isComparableTo(long jarg1, Type jarg1_, long jarg2, Type jarg2_);
  public final static native long Type_getBaseType(long jarg1, Type jarg1_);
  public final static native long Type_substitute__SWIG_0(long jarg1, Type jarg1_, long jarg2, Type jarg2_, long jarg3, Type jarg3_);
  public final static native long Type_substitute__SWIG_1(long jarg1, Type jarg1_, long jarg2, vectorType jarg2_, long jarg3, vectorType jarg3_);
  public final static native long Type_getExprManager(long jarg1, Type jarg1_);
  public final static native long Type_exportTo(long jarg1, Type jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long Type_assignInternal(long jarg1, Type jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Type_equals(long jarg1, Type jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Type_less(long jarg1, Type jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Type_lessEqual(long jarg1, Type jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Type_greater(long jarg1, Type jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Type_greaterEqual(long jarg1, Type jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Type_isBoolean(long jarg1, Type jarg1_);
  public final static native boolean Type_isInteger(long jarg1, Type jarg1_);
  public final static native boolean Type_isReal(long jarg1, Type jarg1_);
  public final static native boolean Type_isString(long jarg1, Type jarg1_);
  public final static native boolean Type_isRegExp(long jarg1, Type jarg1_);
  public final static native boolean Type_isRoundingMode(long jarg1, Type jarg1_);
  public final static native boolean Type_isBitVector(long jarg1, Type jarg1_);
  public final static native boolean Type_isFloatingPoint(long jarg1, Type jarg1_);
  public final static native boolean Type_isFunction(long jarg1, Type jarg1_);
  public final static native boolean Type_isPredicate(long jarg1, Type jarg1_);
  public final static native boolean Type_isTuple(long jarg1, Type jarg1_);
  public final static native boolean Type_isRecord(long jarg1, Type jarg1_);
  public final static native boolean Type_isSExpr(long jarg1, Type jarg1_);
  public final static native boolean Type_isArray(long jarg1, Type jarg1_);
  public final static native boolean Type_isSet(long jarg1, Type jarg1_);
  public final static native boolean Type_isDatatype(long jarg1, Type jarg1_);
  public final static native boolean Type_isConstructor(long jarg1, Type jarg1_);
  public final static native boolean Type_isSelector(long jarg1, Type jarg1_);
  public final static native boolean Type_isTester(long jarg1, Type jarg1_);
  public final static native boolean Type_isSort(long jarg1, Type jarg1_);
  public final static native boolean Type_isSortConstructor(long jarg1, Type jarg1_);
  public final static native void Type_toStream(long jarg1, Type jarg1_, long jarg2);
  public final static native String Type_toString(long jarg1, Type jarg1_);
  public final static native long new_BooleanType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_BooleanType__SWIG_1();
  public final static native void delete_BooleanType(long jarg1);
  public final static native long new_IntegerType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_IntegerType__SWIG_1();
  public final static native void delete_IntegerType(long jarg1);
  public final static native long new_RealType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_RealType__SWIG_1();
  public final static native void delete_RealType(long jarg1);
  public final static native long new_StringType(long jarg1, Type jarg1_);
  public final static native void delete_StringType(long jarg1);
  public final static native long new_RegExpType(long jarg1, Type jarg1_);
  public final static native void delete_RegExpType(long jarg1);
  public final static native long new_RoundingModeType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_RoundingModeType__SWIG_1();
  public final static native void delete_RoundingModeType(long jarg1);
  public final static native long new_FunctionType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_FunctionType__SWIG_1();
  public final static native long FunctionType_getArity(long jarg1, FunctionType jarg1_);
  public final static native long FunctionType_getArgTypes(long jarg1, FunctionType jarg1_);
  public final static native long FunctionType_getRangeType(long jarg1, FunctionType jarg1_);
  public final static native void delete_FunctionType(long jarg1);
  public final static native long new_SExprType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_SExprType__SWIG_1();
  public final static native long SExprType_getTypes(long jarg1, SExprType jarg1_);
  public final static native void delete_SExprType(long jarg1);
  public final static native long new_ArrayType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_ArrayType__SWIG_1();
  public final static native long ArrayType_getIndexType(long jarg1, ArrayType jarg1_);
  public final static native long ArrayType_getConstituentType(long jarg1, ArrayType jarg1_);
  public final static native void delete_ArrayType(long jarg1);
  public final static native long new_SetType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_SetType__SWIG_1();
  public final static native long SetType_getElementType(long jarg1, SetType jarg1_);
  public final static native void delete_SetType(long jarg1);
  public final static native long new_SortType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_SortType__SWIG_1();
  public final static native String SortType_getName(long jarg1, SortType jarg1_);
  public final static native boolean SortType_isParameterized(long jarg1, SortType jarg1_);
  public final static native long SortType_getParamTypes(long jarg1, SortType jarg1_);
  public final static native void delete_SortType(long jarg1);
  public final static native long new_SortConstructorType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_SortConstructorType__SWIG_1();
  public final static native String SortConstructorType_getName(long jarg1, SortConstructorType jarg1_);
  public final static native long SortConstructorType_getArity(long jarg1, SortConstructorType jarg1_);
  public final static native long SortConstructorType_instantiate(long jarg1, SortConstructorType jarg1_, long jarg2, vectorType jarg2_);
  public final static native void delete_SortConstructorType(long jarg1);
  public final static native long new_BitVectorType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_BitVectorType__SWIG_1();
  public final static native long BitVectorType_getSize(long jarg1, BitVectorType jarg1_);
  public final static native void delete_BitVectorType(long jarg1);
  public final static native long new_FloatingPointType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_FloatingPointType__SWIG_1();
  public final static native long FloatingPointType_getExponentSize(long jarg1, FloatingPointType jarg1_);
  public final static native long FloatingPointType_getSignificandSize(long jarg1, FloatingPointType jarg1_);
  public final static native void delete_FloatingPointType(long jarg1);
  public final static native long new_DatatypeType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_DatatypeType__SWIG_1();
  public final static native long DatatypeType_getDatatype(long jarg1, DatatypeType jarg1_);
  public final static native boolean DatatypeType_isParametric(long jarg1, DatatypeType jarg1_);
  public final static native long DatatypeType_getConstructor(long jarg1, DatatypeType jarg1_, String jarg2);
  public final static native boolean DatatypeType_isInstantiated(long jarg1, DatatypeType jarg1_);
  public final static native boolean DatatypeType_isParameterInstantiated(long jarg1, DatatypeType jarg1_, long jarg2);
  public final static native long DatatypeType_getParamTypes(long jarg1, DatatypeType jarg1_);
  public final static native long DatatypeType_getArity(long jarg1, DatatypeType jarg1_);
  public final static native long DatatypeType_instantiate(long jarg1, DatatypeType jarg1_, long jarg2, vectorType jarg2_);
  public final static native long DatatypeType_getTupleLength(long jarg1, DatatypeType jarg1_);
  public final static native long DatatypeType_getTupleTypes(long jarg1, DatatypeType jarg1_);
  public final static native long DatatypeType_getRecord(long jarg1, DatatypeType jarg1_);
  public final static native void delete_DatatypeType(long jarg1);
  public final static native long new_ConstructorType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_ConstructorType__SWIG_1();
  public final static native long ConstructorType_getRangeType(long jarg1, ConstructorType jarg1_);
  public final static native long ConstructorType_getArgTypes(long jarg1, ConstructorType jarg1_);
  public final static native long ConstructorType_getArity(long jarg1, ConstructorType jarg1_);
  public final static native void delete_ConstructorType(long jarg1);
  public final static native long new_SelectorType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_SelectorType__SWIG_1();
  public final static native long SelectorType_getDomain(long jarg1, SelectorType jarg1_);
  public final static native long SelectorType_getRangeType(long jarg1, SelectorType jarg1_);
  public final static native void delete_SelectorType(long jarg1);
  public final static native long new_TesterType__SWIG_0(long jarg1, Type jarg1_);
  public final static native long new_TesterType__SWIG_1();
  public final static native long TesterType_getDomain(long jarg1, TesterType jarg1_);
  public final static native long TesterType_getRangeType(long jarg1, TesterType jarg1_);
  public final static native void delete_TesterType(long jarg1);
  public final static native long new_ArrayStoreAll__SWIG_0(long jarg1, ArrayType jarg1_, long jarg2, Expr jarg2_);
  public final static native void delete_ArrayStoreAll(long jarg1);
  public final static native long new_ArrayStoreAll__SWIG_1(long jarg1, ArrayStoreAll jarg1_);
  public final static native long ArrayStoreAll_getType(long jarg1, ArrayStoreAll jarg1_);
  public final static native long ArrayStoreAll_getExpr(long jarg1, ArrayStoreAll jarg1_);
  public final static native boolean ArrayStoreAll_equals(long jarg1, ArrayStoreAll jarg1_, long jarg2, ArrayStoreAll jarg2_);
  public final static native boolean ArrayStoreAll_less(long jarg1, ArrayStoreAll jarg1_, long jarg2, ArrayStoreAll jarg2_);
  public final static native boolean ArrayStoreAll_lessEqual(long jarg1, ArrayStoreAll jarg1_, long jarg2, ArrayStoreAll jarg2_);
  public final static native boolean ArrayStoreAll_greater(long jarg1, ArrayStoreAll jarg1_, long jarg2, ArrayStoreAll jarg2_);
  public final static native boolean ArrayStoreAll_greaterEqual(long jarg1, ArrayStoreAll jarg1_, long jarg2, ArrayStoreAll jarg2_);
  public final static native long ArrayStoreAllHashFunction_apply(long jarg1, ArrayStoreAllHashFunction jarg1_, long jarg2, ArrayStoreAll jarg2_);
  public final static native long new_ArrayStoreAllHashFunction();
  public final static native void delete_ArrayStoreAllHashFunction(long jarg1);
  public final static native long new_AscriptionType(long jarg1, Type jarg1_);
  public final static native long AscriptionType_getType(long jarg1, AscriptionType jarg1_);
  public final static native boolean AscriptionType_equals(long jarg1, AscriptionType jarg1_, long jarg2, AscriptionType jarg2_);
  public final static native void delete_AscriptionType(long jarg1);
  public final static native long AscriptionTypeHashFunction_apply(long jarg1, AscriptionTypeHashFunction jarg1_, long jarg2, AscriptionType jarg2_);
  public final static native long new_AscriptionTypeHashFunction();
  public final static native void delete_AscriptionTypeHashFunction(long jarg1);
  public final static native long new_EmptySet__SWIG_0(long jarg1, SetType jarg1_);
  public final static native void delete_EmptySet(long jarg1);
  public final static native long new_EmptySet__SWIG_1(long jarg1, EmptySet jarg1_);
  public final static native long EmptySet_getType(long jarg1, EmptySet jarg1_);
  public final static native boolean EmptySet_equals(long jarg1, EmptySet jarg1_, long jarg2, EmptySet jarg2_);
  public final static native boolean EmptySet_less(long jarg1, EmptySet jarg1_, long jarg2, EmptySet jarg2_);
  public final static native boolean EmptySet_lessEqual(long jarg1, EmptySet jarg1_, long jarg2, EmptySet jarg2_);
  public final static native boolean EmptySet_greater(long jarg1, EmptySet jarg1_, long jarg2, EmptySet jarg2_);
  public final static native boolean EmptySet_greaterEqual(long jarg1, EmptySet jarg1_, long jarg2, EmptySet jarg2_);
  public final static native long EmptySetHashFunction_apply(long jarg1, EmptySetHashFunction jarg1_, long jarg2, EmptySet jarg2_);
  public final static native long new_EmptySetHashFunction();
  public final static native void delete_EmptySetHashFunction(long jarg1);
  public final static native long new_vectorDatatype();
  public final static native long vectorDatatype_size(long jarg1, vectorDatatype jarg1_);
  public final static native long vectorDatatype_capacity(long jarg1, vectorDatatype jarg1_);
  public final static native void vectorDatatype_reserve(long jarg1, vectorDatatype jarg1_, long jarg2);
  public final static native boolean vectorDatatype_isEmpty(long jarg1, vectorDatatype jarg1_);
  public final static native void vectorDatatype_clear(long jarg1, vectorDatatype jarg1_);
  public final static native void vectorDatatype_add(long jarg1, vectorDatatype jarg1_, long jarg2, Datatype jarg2_);
  public final static native long vectorDatatype_get(long jarg1, vectorDatatype jarg1_, int jarg2);
  public final static native void vectorDatatype_set(long jarg1, vectorDatatype jarg1_, int jarg2, long jarg3, Datatype jarg3_);
  public final static native void delete_vectorDatatype(long jarg1);
  public final static native long new_DatatypeResolutionException(String jarg1);
  public final static native void delete_DatatypeResolutionException(long jarg1);
  public final static native long new_DatatypeSelfType();
  public final static native void delete_DatatypeSelfType(long jarg1);
  public final static native long new_DatatypeUnresolvedType(String jarg1);
  public final static native String DatatypeUnresolvedType_getName(long jarg1, DatatypeUnresolvedType jarg1_);
  public final static native void delete_DatatypeUnresolvedType(long jarg1);
  public final static native String DatatypeConstructorArg_getName(long jarg1, DatatypeConstructorArg jarg1_);
  public final static native long DatatypeConstructorArg_getSelector(long jarg1, DatatypeConstructorArg jarg1_);
  public final static native long DatatypeConstructorArg_getConstructor(long jarg1, DatatypeConstructorArg jarg1_);
  public final static native long DatatypeConstructorArg_getType(long jarg1, DatatypeConstructorArg jarg1_);
  public final static native long DatatypeConstructorArg_getRangeType(long jarg1, DatatypeConstructorArg jarg1_);
  public final static native boolean DatatypeConstructorArg_isResolved(long jarg1, DatatypeConstructorArg jarg1_);
  public final static native void DatatypeConstructorArg_toStream(long jarg1, DatatypeConstructorArg jarg1_, long jarg2);
  public final static native String DatatypeConstructorArg_toString(long jarg1, DatatypeConstructorArg jarg1_);
  public final static native void delete_DatatypeConstructorArg(long jarg1);
  public final static native void delete_SygusPrintCallback(long jarg1);
  public final static native void SygusPrintCallback_toStreamSygus(long jarg1, SygusPrintCallback jarg1_, long jarg2, long jarg3, long jarg4, Expr jarg4_);
  public final static native long new_DatatypeConstructor__SWIG_0(String jarg1);
  public final static native long new_DatatypeConstructor__SWIG_1(String jarg1, String jarg2, long jarg3);
  public final static native long new_DatatypeConstructor__SWIG_2(String jarg1, String jarg2);
  public final static native void delete_DatatypeConstructor(long jarg1);
  public final static native void DatatypeConstructor_addArg__SWIG_0(long jarg1, DatatypeConstructor jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native void DatatypeConstructor_addArg__SWIG_1(long jarg1, DatatypeConstructor jarg1_, String jarg2, long jarg3, DatatypeUnresolvedType jarg3_);
  public final static native void DatatypeConstructor_addArg__SWIG_2(long jarg1, DatatypeConstructor jarg1_, String jarg2, long jarg3, DatatypeSelfType jarg3_);
  public final static native String DatatypeConstructor_getName(long jarg1, DatatypeConstructor jarg1_);
  public final static native long DatatypeConstructor_getConstructor(long jarg1, DatatypeConstructor jarg1_);
  public final static native long DatatypeConstructor_getTester(long jarg1, DatatypeConstructor jarg1_);
  public final static native long DatatypeConstructor_getSygusOp(long jarg1, DatatypeConstructor jarg1_);
  public final static native boolean DatatypeConstructor_isSygusIdFunc(long jarg1, DatatypeConstructor jarg1_);
  public final static native long DatatypeConstructor_getSygusPrintCallback(long jarg1, DatatypeConstructor jarg1_);
  public final static native long DatatypeConstructor_getWeight(long jarg1, DatatypeConstructor jarg1_);
  public final static native String DatatypeConstructor_getTesterName(long jarg1, DatatypeConstructor jarg1_);
  public final static native long DatatypeConstructor_getNumArgs(long jarg1, DatatypeConstructor jarg1_);
  public final static native long DatatypeConstructor_getSpecializedConstructorType(long jarg1, DatatypeConstructor jarg1_, long jarg2, Type jarg2_);
  public final static native long DatatypeConstructor_getCardinality(long jarg1, DatatypeConstructor jarg1_, long jarg2, Type jarg2_);
  public final static native boolean DatatypeConstructor_isFinite(long jarg1, DatatypeConstructor jarg1_, long jarg2, Type jarg2_);
  public final static native boolean DatatypeConstructor_isInterpretedFinite(long jarg1, DatatypeConstructor jarg1_, long jarg2, Type jarg2_);
  public final static native boolean DatatypeConstructor_isResolved(long jarg1, DatatypeConstructor jarg1_);
  public final static native long DatatypeConstructor_get__SWIG_0(long jarg1, DatatypeConstructor jarg1_, long jarg2);
  public final static native long DatatypeConstructor_get__SWIG_1(long jarg1, DatatypeConstructor jarg1_, String jarg2);
  public final static native long DatatypeConstructor_getSelector(long jarg1, DatatypeConstructor jarg1_, String jarg2);
  public final static native long DatatypeConstructor_getArgType(long jarg1, DatatypeConstructor jarg1_, long jarg2);
  public final static native long DatatypeConstructor_getSelectorInternal(long jarg1, DatatypeConstructor jarg1_, long jarg2, Type jarg2_, long jarg3);
  public final static native int DatatypeConstructor_getSelectorIndexInternal(long jarg1, DatatypeConstructor jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean DatatypeConstructor_involvesExternalType(long jarg1, DatatypeConstructor jarg1_);
  public final static native boolean DatatypeConstructor_involvesUninterpretedType(long jarg1, DatatypeConstructor jarg1_);
  public final static native void DatatypeConstructor_setSygus(long jarg1, DatatypeConstructor jarg1_, long jarg2, Expr jarg2_, long jarg3);
  public final static native long DatatypeConstructor_getArgs(long jarg1, DatatypeConstructor jarg1_);
  public final static native void DatatypeConstructor_toStream(long jarg1, DatatypeConstructor jarg1_, long jarg2);
  public final static native long DatatypeConstructor_iterator(long jarg1, DatatypeConstructor jarg1_);
  public final static native String DatatypeConstructor_toString(long jarg1, DatatypeConstructor jarg1_);
  public final static native long Datatype_datatypeOf(long jarg1, Expr jarg1_);
  public final static native long Datatype_indexOf(long jarg1, Expr jarg1_);
  public final static native long Datatype_cindexOf(long jarg1, Expr jarg1_);
  public final static native long Datatype_indexOfInternal(long jarg1, Expr jarg1_);
  public final static native long Datatype_cindexOfInternal(long jarg1, Expr jarg1_);
  public final static native long new_Datatype__SWIG_0(String jarg1, boolean jarg2);
  public final static native long new_Datatype__SWIG_1(String jarg1);
  public final static native long new_Datatype__SWIG_2(String jarg1, long jarg2, vectorType jarg2_, boolean jarg3);
  public final static native long new_Datatype__SWIG_3(String jarg1, long jarg2, vectorType jarg2_);
  public final static native void delete_Datatype(long jarg1);
  public final static native void Datatype_addConstructor(long jarg1, Datatype jarg1_, long jarg2, DatatypeConstructor jarg2_);
  public final static native void Datatype_setSygus(long jarg1, Datatype jarg1_, long jarg2, Type jarg2_, long jarg3, Expr jarg3_, boolean jarg4, boolean jarg5);
  public final static native void Datatype_addSygusConstructor__SWIG_0(long jarg1, Datatype jarg1_, long jarg2, Expr jarg2_, String jarg3, long jarg4, vectorType jarg4_, long jarg5, int jarg6);
  public final static native void Datatype_addSygusConstructor__SWIG_1(long jarg1, Datatype jarg1_, long jarg2, Expr jarg2_, String jarg3, long jarg4, vectorType jarg4_, long jarg5);
  public final static native void Datatype_addSygusConstructor__SWIG_2(long jarg1, Datatype jarg1_, long jarg2, Expr jarg2_, String jarg3, long jarg4, vectorType jarg4_);
  public final static native void Datatype_setTuple(long jarg1, Datatype jarg1_);
  public final static native void Datatype_setRecord(long jarg1, Datatype jarg1_);
  public final static native String Datatype_getName(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getNumConstructors(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isParametric(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getNumParameters(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getParameter(long jarg1, Datatype jarg1_, long jarg2);
  public final static native long Datatype_getParameters(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isCodatatype(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isSygus(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isTuple(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isRecord(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getRecord(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getCardinality__SWIG_0(long jarg1, Datatype jarg1_, long jarg2, Type jarg2_);
  public final static native long Datatype_getCardinality__SWIG_1(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isFinite__SWIG_0(long jarg1, Datatype jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Datatype_isFinite__SWIG_1(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isInterpretedFinite__SWIG_0(long jarg1, Datatype jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Datatype_isInterpretedFinite__SWIG_1(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isWellFounded(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_isRecursiveSingleton__SWIG_0(long jarg1, Datatype jarg1_, long jarg2, Type jarg2_);
  public final static native boolean Datatype_isRecursiveSingleton__SWIG_1(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getNumRecursiveSingletonArgTypes__SWIG_0(long jarg1, Datatype jarg1_, long jarg2, Type jarg2_);
  public final static native long Datatype_getRecursiveSingletonArgType__SWIG_0(long jarg1, Datatype jarg1_, long jarg2, Type jarg2_, long jarg3);
  public final static native long Datatype_getNumRecursiveSingletonArgTypes__SWIG_1(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getRecursiveSingletonArgType__SWIG_1(long jarg1, Datatype jarg1_, long jarg2);
  public final static native long Datatype_mkGroundTerm(long jarg1, Datatype jarg1_, long jarg2, Type jarg2_);
  public final static native long Datatype_getDatatypeType__SWIG_0(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getDatatypeType__SWIG_1(long jarg1, Datatype jarg1_, long jarg2, vectorType jarg2_);
  public final static native boolean Datatype_equals(long jarg1, Datatype jarg1_, long jarg2, Datatype jarg2_);
  public final static native boolean Datatype_isResolved(long jarg1, Datatype jarg1_);
  public final static native long Datatype_get__SWIG_0(long jarg1, Datatype jarg1_, long jarg2);
  public final static native long Datatype_get__SWIG_1(long jarg1, Datatype jarg1_, String jarg2);
  public final static native long Datatype_getConstructor(long jarg1, Datatype jarg1_, String jarg2);
  public final static native long Datatype_getSygusType(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getSygusVarList(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_getSygusAllowConst(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_getSygusAllowAll(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_involvesExternalType(long jarg1, Datatype jarg1_);
  public final static native boolean Datatype_involvesUninterpretedType(long jarg1, Datatype jarg1_);
  public final static native long Datatype_getConstructors(long jarg1, Datatype jarg1_);
  public final static native void Datatype_toStream(long jarg1, Datatype jarg1_, long jarg2);
  public final static native long Datatype_iterator(long jarg1, Datatype jarg1_);
  public final static native String Datatype_toString(long jarg1, Datatype jarg1_);
  public final static native long DatatypeHashFunction_apply__SWIG_0(long jarg1, DatatypeHashFunction jarg1_, long jarg2, Datatype jarg2_);
  public final static native long DatatypeHashFunction_apply__SWIG_1(long jarg1, DatatypeHashFunction jarg1_, long jarg2, DatatypeConstructor jarg2_);
  public final static native long new_DatatypeHashFunction();
  public final static native void delete_DatatypeHashFunction(long jarg1);
  public final static native long new_DatatypeIndexConstant(long jarg1);
  public final static native long DatatypeIndexConstant_getIndex(long jarg1, DatatypeIndexConstant jarg1_);
  public final static native boolean DatatypeIndexConstant_equals(long jarg1, DatatypeIndexConstant jarg1_, long jarg2, DatatypeIndexConstant jarg2_);
  public final static native boolean DatatypeIndexConstant_less(long jarg1, DatatypeIndexConstant jarg1_, long jarg2, DatatypeIndexConstant jarg2_);
  public final static native boolean DatatypeIndexConstant_lessEqual(long jarg1, DatatypeIndexConstant jarg1_, long jarg2, DatatypeIndexConstant jarg2_);
  public final static native boolean DatatypeIndexConstant_greater(long jarg1, DatatypeIndexConstant jarg1_, long jarg2, DatatypeIndexConstant jarg2_);
  public final static native boolean DatatypeIndexConstant_greaterEqual(long jarg1, DatatypeIndexConstant jarg1_, long jarg2, DatatypeIndexConstant jarg2_);
  public final static native void delete_DatatypeIndexConstant(long jarg1);
  public final static native long new_DatatypeIndexConstantHashFunction();
  public final static native void delete_DatatypeIndexConstantHashFunction(long jarg1);
  public final static native long new_JavaIteratorAdapter_Datatype(long jarg1, Datatype jarg1_);
  public final static native boolean JavaIteratorAdapter_Datatype_hasNext(long jarg1, JavaIteratorAdapter_Datatype jarg1_);
  public final static native long JavaIteratorAdapter_Datatype_getNext(long jarg1, JavaIteratorAdapter_Datatype jarg1_);
  public final static native void delete_JavaIteratorAdapter_Datatype(long jarg1);
  public final static native long new_JavaIteratorAdapter_DatatypeConstructor(long jarg1, DatatypeConstructor jarg1_);
  public final static native boolean JavaIteratorAdapter_DatatypeConstructor_hasNext(long jarg1, JavaIteratorAdapter_DatatypeConstructor jarg1_);
  public final static native long JavaIteratorAdapter_DatatypeConstructor_getNext(long jarg1, JavaIteratorAdapter_DatatypeConstructor jarg1_);
  public final static native void delete_JavaIteratorAdapter_DatatypeConstructor(long jarg1);
  public final static native long new_RecordUpdate(String jarg1);
  public final static native String RecordUpdate_getField(long jarg1, RecordUpdate jarg1_);
  public final static native boolean RecordUpdate_equals(long jarg1, RecordUpdate jarg1_, long jarg2, RecordUpdate jarg2_);
  public final static native void delete_RecordUpdate(long jarg1);
  public final static native long RecordUpdateHashFunction_apply(long jarg1, RecordUpdateHashFunction jarg1_, long jarg2, RecordUpdate jarg2_);
  public final static native long new_RecordUpdateHashFunction();
  public final static native void delete_RecordUpdateHashFunction(long jarg1);
  public final static native long new_Record__SWIG_0(long jarg1, vectorPairStringType jarg1_);
  public final static native long new_Record__SWIG_1(long jarg1, Record jarg1_);
  public final static native void delete_Record(long jarg1);
  public final static native boolean Record_contains(long jarg1, Record jarg1_, String jarg2);
  public final static native long Record_getIndex(long jarg1, Record jarg1_, String jarg2);
  public final static native long Record_getNumFields(long jarg1, Record jarg1_);
  public final static native long Record_getFields(long jarg1, Record jarg1_);
  public final static native long Record_getField(long jarg1, Record jarg1_, long jarg2);
  public final static native boolean Record_equals(long jarg1, Record jarg1_, long jarg2, Record jarg2_);
  public final static native long RecordHashFunction_apply(long jarg1, RecordHashFunction jarg1_, long jarg2, Record jarg2_);
  public final static native long new_RecordHashFunction();
  public final static native void delete_RecordHashFunction(long jarg1);
  public final static native long new_UnsatCore__SWIG_0();
  public final static native long new_UnsatCore__SWIG_1(long jarg1, SmtEngine jarg1_, long jarg2, vectorExpr jarg2_);
  public final static native void delete_UnsatCore(long jarg1);
  public final static native long UnsatCore_getSmtEngine(long jarg1, UnsatCore jarg1_);
  public final static native long UnsatCore_size(long jarg1, UnsatCore jarg1_);
  public final static native void UnsatCore_toStream(long jarg1, UnsatCore jarg1_, long jarg2);
  public final static native long UnsatCore_iterator(long jarg1, UnsatCore jarg1_);
  public final static native long new_JavaIteratorAdapter_UnsatCore(long jarg1, UnsatCore jarg1_);
  public final static native boolean JavaIteratorAdapter_UnsatCore_hasNext(long jarg1, JavaIteratorAdapter_UnsatCore jarg1_);
  public final static native edu.nyu.acsys.CVC4.Expr JavaIteratorAdapter_UnsatCore_getNext(long jarg1, JavaIteratorAdapter_UnsatCore jarg1_);
  public final static native void delete_JavaIteratorAdapter_UnsatCore(long jarg1);
  public final static native int UNDEFINED_KIND_get();
  public final static native boolean isAssociative(int jarg1);
  public final static native String kindToString(int jarg1);
  public final static native long KindHashFunction_apply(long jarg1, KindHashFunction jarg1_, int jarg2);
  public final static native long new_KindHashFunction();
  public final static native void delete_KindHashFunction(long jarg1);
  public final static native long TypeConstantHashFunction_apply(long jarg1, TypeConstantHashFunction jarg1_, int jarg2);
  public final static native long new_TypeConstantHashFunction();
  public final static native void delete_TypeConstantHashFunction(long jarg1);
  public final static native int THEORY_FIRST_get();
  public final static native int THEORY_SAT_SOLVER_get();
  public final static native int kindToTheoryId(int jarg1);
  public final static native int typeConstantToTheoryId(int jarg1);
  public final static native String getStatsPrefix(int jarg1);
  public final static native long new_TypeCheckingException__SWIG_2(long jarg1, Expr jarg1_, String jarg2);
  public final static native long new_TypeCheckingException__SWIG_3(long jarg1, TypeCheckingException jarg1_);
  public final static native void delete_TypeCheckingException(long jarg1);
  public final static native long TypeCheckingException_getExpression(long jarg1, TypeCheckingException jarg1_);
  public final static native void TypeCheckingException_toStream(long jarg1, TypeCheckingException jarg1_, long jarg2);
  public final static native long new_ExportUnsupportedException__SWIG_0();
  public final static native long new_ExportUnsupportedException__SWIG_1(String jarg1);
  public final static native void delete_ExportUnsupportedException(long jarg1);
  public final static native long ExprHashFunction_apply(long jarg1, ExprHashFunction jarg1_, long jarg2, Expr jarg2_);
  public final static native long new_ExprHashFunction();
  public final static native void delete_ExprHashFunction(long jarg1);
  public final static native long new_Expr__SWIG_0();
  public final static native long new_Expr__SWIG_1(long jarg1, Expr jarg1_);
  public final static native void delete_Expr(long jarg1);
  public final static native long Expr_assignInternal(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean Expr_equals(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean Expr_less(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean Expr_greater(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean Expr_lessEqual(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean Expr_greaterEqual(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native long Expr_getId(long jarg1, Expr jarg1_);
  public final static native int Expr_getKind(long jarg1, Expr jarg1_);
  public final static native long Expr_getNumChildren(long jarg1, Expr jarg1_);
  public final static native long Expr_getChild(long jarg1, Expr jarg1_, long jarg2);
  public final static native long Expr_getChildren(long jarg1, Expr jarg1_);
  public final static native long Expr_notExpr(long jarg1, Expr jarg1_);
  public final static native long Expr_andExpr(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native long Expr_orExpr(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native long Expr_xorExpr(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native long Expr_eqExpr(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native long Expr_impExpr(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_);
  public final static native long Expr_iteExpr(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_);
  public final static native long new_Expr_const_iterator__SWIG_0();
  public final static native long new_Expr_const_iterator__SWIG_1(long jarg1, Expr.const_iterator jarg1_);
  public final static native void delete_Expr_const_iterator(long jarg1);
  public final static native long Expr_const_iterator___ref__(long jarg1, Expr.const_iterator jarg1_);
  public final static native boolean Expr_hasOperator(long jarg1, Expr jarg1_);
  public final static native long Expr_getOperator(long jarg1, Expr jarg1_);
  public final static native long Expr_getType__SWIG_0(long jarg1, Expr jarg1_, boolean jarg2);
  public final static native long Expr_getType__SWIG_1(long jarg1, Expr jarg1_);
  public final static native long Expr_substitute__SWIG_0(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_);
  public final static native long Expr_substitute__SWIG_1(long jarg1, Expr jarg1_, long jarg2, vectorExpr jarg2_, long jarg3, vectorExpr jarg3_);
  public final static native long Expr_substitute__SWIG_2(long jarg1, Expr jarg1_, long jarg2, hashmapExpr jarg2_);
  public final static native String Expr_toString(long jarg1, Expr jarg1_);
  public final static native void Expr_toStream__SWIG_0(long jarg1, Expr jarg1_, long jarg2, int jarg3, boolean jarg4, long jarg5, int jarg6);
  public final static native void Expr_toStream__SWIG_1(long jarg1, Expr jarg1_, long jarg2, int jarg3, boolean jarg4, long jarg5);
  public final static native void Expr_toStream__SWIG_2(long jarg1, Expr jarg1_, long jarg2, int jarg3, boolean jarg4);
  public final static native void Expr_toStream__SWIG_3(long jarg1, Expr jarg1_, long jarg2, int jarg3);
  public final static native void Expr_toStream__SWIG_4(long jarg1, Expr jarg1_, long jarg2);
  public final static native boolean Expr_isNull(long jarg1, Expr jarg1_);
  public final static native boolean Expr_isVariable(long jarg1, Expr jarg1_);
  public final static native boolean Expr_isConst(long jarg1, Expr jarg1_);
  public final static native boolean Expr_hasFreeVariable(long jarg1, Expr jarg1_);
  public final static native long Expr_getExprManager(long jarg1, Expr jarg1_);
  public final static native long Expr_exportTo__SWIG_0(long jarg1, Expr jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_, long jarg4);
  public final static native long Expr_exportTo__SWIG_1(long jarg1, Expr jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native void Expr_printAst__SWIG_0(long jarg1, Expr jarg1_, long jarg2, int jarg3);
  public final static native void Expr_printAst__SWIG_1(long jarg1, Expr jarg1_, long jarg2);
  public final static native long Expr_iterator(long jarg1, Expr jarg1_);
  public final static native int Expr_getConstTypeConstant(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstArrayStoreAll(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVectorSize(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstAscriptionType(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVectorBitOf(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVectorRepeat(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVectorExtract(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVectorRotateLeft(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVectorSignExtend(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVectorZeroExtend(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVectorRotateRight(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstUninterpretedConstant(long jarg1, Expr jarg1_);
  public final static native int Expr_getConstKind(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstDatatypeIndexConstant(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstRational(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstBitVector(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstString(long jarg1, Expr jarg1_);
  public final static native long Expr_getConstEmptySet(long jarg1, Expr jarg1_);
  public final static native boolean Expr_getConstBoolean(long jarg1, Expr jarg1_);
  public final static native long new_JavaIteratorAdapter_Expr(long jarg1, Expr jarg1_);
  public final static native boolean JavaIteratorAdapter_Expr_hasNext(long jarg1, JavaIteratorAdapter_Expr jarg1_);
  public final static native edu.nyu.acsys.CVC4.Expr JavaIteratorAdapter_Expr_getNext(long jarg1, JavaIteratorAdapter_Expr jarg1_);
  public final static native void delete_JavaIteratorAdapter_Expr(long jarg1);
  public final static native long new_ExprManager__SWIG_0();
  public final static native long new_ExprManager__SWIG_1(long jarg1, Options jarg1_);
  public final static native void delete_ExprManager(long jarg1);
  public final static native long ExprManager_getOptions(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_getResourceManager(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_booleanType(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_stringType(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_regExpType(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_realType(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_integerType(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_roundingModeType(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_mkExpr__SWIG_0(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, Expr jarg3_);
  public final static native long ExprManager_mkExpr__SWIG_1(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_);
  public final static native long ExprManager_mkExpr__SWIG_2(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_, long jarg5, Expr jarg5_);
  public final static native long ExprManager_mkExpr__SWIG_3(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_, long jarg5, Expr jarg5_, long jarg6, Expr jarg6_);
  public final static native long ExprManager_mkExpr__SWIG_4(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_, long jarg5, Expr jarg5_, long jarg6, Expr jarg6_, long jarg7, Expr jarg7_);
  public final static native long ExprManager_mkExpr__SWIG_5(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, vectorExpr jarg3_);
  public final static native long ExprManager_mkExpr__SWIG_6(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, Expr jarg3_, long jarg4, vectorExpr jarg4_);
  public final static native long ExprManager_mkExpr__SWIG_7(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_);
  public final static native long ExprManager_mkExpr__SWIG_8(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_);
  public final static native long ExprManager_mkExpr__SWIG_9(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_);
  public final static native long ExprManager_mkExpr__SWIG_10(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_, long jarg5, Expr jarg5_);
  public final static native long ExprManager_mkExpr__SWIG_11(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_, long jarg5, Expr jarg5_, long jarg6, Expr jarg6_);
  public final static native long ExprManager_mkExpr__SWIG_12(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_, long jarg5, Expr jarg5_, long jarg6, Expr jarg6_, long jarg7, Expr jarg7_);
  public final static native long ExprManager_mkExpr__SWIG_13(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_, long jarg3, vectorExpr jarg3_);
  public final static native long ExprManager_mkAssociative(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, vectorExpr jarg3_);
  public final static native long ExprManager_mkLeftAssociative(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, vectorExpr jarg3_);
  public final static native long ExprManager_mkRightAssociative(long jarg1, ExprManager jarg1_, int jarg2, long jarg3, vectorExpr jarg3_);
  public final static native boolean ExprManager_hasOperator(int jarg1);
  public final static native long ExprManager_operatorOf(long jarg1, ExprManager jarg1_, int jarg2);
  public final static native int ExprManager_operatorToKind(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_);
  public final static native long ExprManager_mkFunctionType__SWIG_0(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_, long jarg3, Type jarg3_);
  public final static native long ExprManager_mkFunctionType__SWIG_1(long jarg1, ExprManager jarg1_, long jarg2, vectorType jarg2_, long jarg3, Type jarg3_);
  public final static native long ExprManager_mkFunctionType__SWIG_2(long jarg1, ExprManager jarg1_, long jarg2, vectorType jarg2_);
  public final static native long ExprManager_mkPredicateType(long jarg1, ExprManager jarg1_, long jarg2, vectorType jarg2_);
  public final static native long ExprManager_mkTupleType(long jarg1, ExprManager jarg1_, long jarg2, vectorType jarg2_);
  public final static native long ExprManager_mkRecordType(long jarg1, ExprManager jarg1_, long jarg2, Record jarg2_);
  public final static native long ExprManager_mkSExprType(long jarg1, ExprManager jarg1_, long jarg2, vectorType jarg2_);
  public final static native long ExprManager_mkFloatingPointType(long jarg1, ExprManager jarg1_, long jarg2, long jarg3);
  public final static native long ExprManager_mkBitVectorType(long jarg1, ExprManager jarg1_, long jarg2);
  public final static native long ExprManager_mkArrayType(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_, long jarg3, Type jarg3_);
  public final static native long ExprManager_mkSetType(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_);
  public final static native int ExprManager_DATATYPE_FLAG_NONE_get();
  public final static native int ExprManager_DATATYPE_FLAG_PLACEHOLDER_get();
  public final static native long ExprManager_mkDatatypeType__SWIG_0(long jarg1, ExprManager jarg1_, long jarg2, Datatype jarg2_, long jarg3);
  public final static native long ExprManager_mkDatatypeType__SWIG_1(long jarg1, ExprManager jarg1_, long jarg2, Datatype jarg2_);
  public final static native long ExprManager_mkMutualDatatypeTypes__SWIG_0(long jarg1, ExprManager jarg1_, long jarg2, vectorDatatype jarg2_, long jarg3);
  public final static native long ExprManager_mkMutualDatatypeTypes__SWIG_1(long jarg1, ExprManager jarg1_, long jarg2, vectorDatatype jarg2_);
  public final static native long ExprManager_mkMutualDatatypeTypes__SWIG_2(long jarg1, ExprManager jarg1_, long jarg2, vectorDatatype jarg2_, long jarg3, setOfType jarg3_, long jarg4);
  public final static native long ExprManager_mkMutualDatatypeTypes__SWIG_3(long jarg1, ExprManager jarg1_, long jarg2, vectorDatatype jarg2_, long jarg3, setOfType jarg3_);
  public final static native long ExprManager_mkConstructorType(long jarg1, ExprManager jarg1_, long jarg2, DatatypeConstructor jarg2_, long jarg3, Type jarg3_);
  public final static native long ExprManager_mkSelectorType(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_, long jarg3, Type jarg3_);
  public final static native long ExprManager_mkTesterType(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_);
  public final static native int ExprManager_SORT_FLAG_NONE_get();
  public final static native int ExprManager_SORT_FLAG_PLACEHOLDER_get();
  public final static native long ExprManager_mkSort__SWIG_0(long jarg1, ExprManager jarg1_, String jarg2, long jarg3);
  public final static native long ExprManager_mkSort__SWIG_1(long jarg1, ExprManager jarg1_, String jarg2);
  public final static native long ExprManager_mkSortConstructor__SWIG_0(long jarg1, ExprManager jarg1_, String jarg2, long jarg3, long jarg4);
  public final static native long ExprManager_mkSortConstructor__SWIG_1(long jarg1, ExprManager jarg1_, String jarg2, long jarg3);
  public final static native long ExprManager_getType__SWIG_0(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_, boolean jarg3);
  public final static native long ExprManager_getType__SWIG_1(long jarg1, ExprManager jarg1_, long jarg2, Expr jarg2_);
  public final static native int ExprManager_VAR_FLAG_NONE_get();
  public final static native int ExprManager_VAR_FLAG_GLOBAL_get();
  public final static native int ExprManager_VAR_FLAG_DEFINED_get();
  public final static native long ExprManager_mkVar__SWIG_0(long jarg1, ExprManager jarg1_, String jarg2, long jarg3, Type jarg3_, long jarg4);
  public final static native long ExprManager_mkVar__SWIG_1(long jarg1, ExprManager jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native long ExprManager_mkVar__SWIG_2(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_, long jarg3);
  public final static native long ExprManager_mkVar__SWIG_3(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_);
  public final static native long ExprManager_mkBoundVar__SWIG_0(long jarg1, ExprManager jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native long ExprManager_mkBoundVar__SWIG_1(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_);
  public final static native long ExprManager_mkNullaryOperator(long jarg1, ExprManager jarg1_, long jarg2, Type jarg2_, int jarg3);
  public final static native long ExprManager_getStatistics(long jarg1, ExprManager jarg1_);
  public final static native long ExprManager_getStatistic(long jarg1, ExprManager jarg1_, String jarg2);
  public final static native void ExprManager_safeFlushStatistics(long jarg1, ExprManager jarg1_, int jarg2);
  public final static native long ExprManager_exportType(long jarg1, Type jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long ExprManager_minArity(int jarg1);
  public final static native long ExprManager_maxArity(int jarg1);
  public final static native long ExprManager_mkConst__SWIG_1(long jarg1, ExprManager jarg1_, long jarg2, ArrayStoreAll jarg2_);
  public final static native long ExprManager_mkConst__SWIG_2(long jarg1, ExprManager jarg1_, long jarg2, BitVectorSize jarg2_);
  public final static native long ExprManager_mkConst__SWIG_3(long jarg1, ExprManager jarg1_, long jarg2, AscriptionType jarg2_);
  public final static native long ExprManager_mkConst__SWIG_4(long jarg1, ExprManager jarg1_, long jarg2, BitVectorBitOf jarg2_);
  public final static native long ExprManager_mkConst__SWIG_5(long jarg1, ExprManager jarg1_, long jarg2, BitVectorRepeat jarg2_);
  public final static native long ExprManager_mkConst__SWIG_6(long jarg1, ExprManager jarg1_, long jarg2, BitVectorExtract jarg2_);
  public final static native long ExprManager_mkConst__SWIG_7(long jarg1, ExprManager jarg1_, long jarg2, BitVectorRotateLeft jarg2_);
  public final static native long ExprManager_mkConst__SWIG_8(long jarg1, ExprManager jarg1_, long jarg2, BitVectorSignExtend jarg2_);
  public final static native long ExprManager_mkConst__SWIG_9(long jarg1, ExprManager jarg1_, long jarg2, BitVectorZeroExtend jarg2_);
  public final static native long ExprManager_mkConst__SWIG_10(long jarg1, ExprManager jarg1_, long jarg2, BitVectorRotateRight jarg2_);
  public final static native long ExprManager_mkConst__SWIG_11(long jarg1, ExprManager jarg1_, long jarg2, IntToBitVector jarg2_);
  public final static native long ExprManager_mkConst__SWIG_12(long jarg1, ExprManager jarg1_, long jarg2, UninterpretedConstant jarg2_);
  public final static native long ExprManager_mkConst__SWIG_13(long jarg1, ExprManager jarg1_, int jarg2);
  public final static native long ExprManager_mkConst__SWIG_14(long jarg1, ExprManager jarg1_, long jarg2, DatatypeIndexConstant jarg2_);
  public final static native long ExprManager_mkConst__SWIG_15(long jarg1, ExprManager jarg1_, long jarg2, TupleUpdate jarg2_);
  public final static native long ExprManager_mkConst__SWIG_16(long jarg1, ExprManager jarg1_, long jarg2, RecordUpdate jarg2_);
  public final static native long ExprManager_mkConst__SWIG_17(long jarg1, ExprManager jarg1_, long jarg2, Rational jarg2_);
  public final static native long ExprManager_mkConst__SWIG_18(long jarg1, ExprManager jarg1_, long jarg2, BitVector jarg2_);
  public final static native long ExprManager_mkConst__SWIG_19(long jarg1, ExprManager jarg1_, long jarg2, EmptySet jarg2_);
  public final static native long ExprManager_mkConst__SWIG_20(long jarg1, ExprManager jarg1_, long jarg2, CVC4String jarg2_);
  public final static native long ExprManager_mkConst__SWIG_21(long jarg1, ExprManager jarg1_, int jarg2);
  public final static native long ExprManager_mkConst__SWIG_22(long jarg1, ExprManager jarg1_, boolean jarg2);
  public final static native void delete_ExprStream(long jarg1);
  public final static native long ExprStream_nextExpr(long jarg1, ExprStream jarg1_);
  public final static native long new_ScopeException();
  public final static native void delete_ScopeException(long jarg1);
  public final static native long new_SymbolTable();
  public final static native void delete_SymbolTable(long jarg1);
  public final static native boolean SymbolTable_bind__SWIG_0(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Expr jarg3_, boolean jarg4, boolean jarg5);
  public final static native boolean SymbolTable_bind__SWIG_1(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Expr jarg3_, boolean jarg4);
  public final static native boolean SymbolTable_bind__SWIG_2(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Expr jarg3_);
  public final static native boolean SymbolTable_bindDefinedFunction__SWIG_0(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Expr jarg3_, boolean jarg4, boolean jarg5);
  public final static native boolean SymbolTable_bindDefinedFunction__SWIG_1(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Expr jarg3_, boolean jarg4);
  public final static native boolean SymbolTable_bindDefinedFunction__SWIG_2(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Expr jarg3_);
  public final static native void SymbolTable_bindType__SWIG_0(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Type jarg3_, boolean jarg4);
  public final static native void SymbolTable_bindType__SWIG_1(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native void SymbolTable_bindType__SWIG_2(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, vectorType jarg3_, long jarg4, Type jarg4_, boolean jarg5);
  public final static native void SymbolTable_bindType__SWIG_3(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, vectorType jarg3_, long jarg4, Type jarg4_);
  public final static native boolean SymbolTable_isBound(long jarg1, SymbolTable jarg1_, String jarg2);
  public final static native boolean SymbolTable_isBoundDefinedFunction__SWIG_0(long jarg1, SymbolTable jarg1_, String jarg2);
  public final static native boolean SymbolTable_isBoundDefinedFunction__SWIG_1(long jarg1, SymbolTable jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean SymbolTable_isBoundType(long jarg1, SymbolTable jarg1_, String jarg2);
  public final static native long SymbolTable_lookup(long jarg1, SymbolTable jarg1_, String jarg2);
  public final static native long SymbolTable_lookupType__SWIG_0(long jarg1, SymbolTable jarg1_, String jarg2);
  public final static native long SymbolTable_lookupType__SWIG_1(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, vectorType jarg3_);
  public final static native long SymbolTable_lookupArity(long jarg1, SymbolTable jarg1_, String jarg2);
  public final static native void SymbolTable_popScope(long jarg1, SymbolTable jarg1_);
  public final static native void SymbolTable_pushScope(long jarg1, SymbolTable jarg1_);
  public final static native long SymbolTable_getLevel(long jarg1, SymbolTable jarg1_);
  public final static native void SymbolTable_reset(long jarg1, SymbolTable jarg1_);
  public final static native boolean SymbolTable_isOverloadedFunction(long jarg1, SymbolTable jarg1_, long jarg2, Expr jarg2_);
  public final static native long SymbolTable_getOverloadedConstantForType(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native long SymbolTable_getOverloadedFunctionForTypes(long jarg1, SymbolTable jarg1_, String jarg2, long jarg3, vectorType jarg3_);
  public final static native long VariableTypeMap_get__SWIG_0(long jarg1, VariableTypeMap jarg1_, long jarg2, Expr jarg2_);
  public final static native long VariableTypeMap_get__SWIG_1(long jarg1, VariableTypeMap jarg1_, long jarg2, Type jarg2_);
  public final static native long new_VariableTypeMap();
  public final static native void delete_VariableTypeMap(long jarg1);
  public final static native long new_ExprManagerMapCollection();
  public final static native void delete_ExprManagerMapCollection(long jarg1);
  public final static native long new_OptionException(String jarg1);
  public final static native String OptionException_getRawMessage(long jarg1, OptionException jarg1_);
  public final static native void delete_OptionException(long jarg1);
  public final static native long new_UnrecognizedOptionException__SWIG_0();
  public final static native long new_UnrecognizedOptionException__SWIG_1(String jarg1);
  public final static native void delete_UnrecognizedOptionException(long jarg1);
  public final static native long new_Options_OptionsScope(long jarg1, Options jarg1_);
  public final static native void delete_Options_OptionsScope(long jarg1);
  public final static native boolean Options_isCurrentNull();
  public final static native long Options_current();
  public final static native long new_Options();
  public final static native void delete_Options(long jarg1);
  public final static native void Options_copyValues(long jarg1, Options jarg1_, long jarg2, Options jarg2_);
  public final static native void Options_setOption(long jarg1, Options jarg1_, String jarg2, String jarg3);
  public final static native String Options_getOption(long jarg1, Options jarg1_, String jarg2);
  public final static native int Options_getInputLanguage(long jarg1, Options jarg1_);
  public final static native long Options_getInstFormatMode(long jarg1, Options jarg1_);
  public final static native int Options_getOutputLanguage(long jarg1, Options jarg1_);
  public final static native boolean Options_getCheckProofs(long jarg1, Options jarg1_);
  public final static native boolean Options_getContinuedExecution(long jarg1, Options jarg1_);
  public final static native boolean Options_getDumpInstantiations(long jarg1, Options jarg1_);
  public final static native boolean Options_getDumpModels(long jarg1, Options jarg1_);
  public final static native boolean Options_getDumpProofs(long jarg1, Options jarg1_);
  public final static native boolean Options_getDumpSynth(long jarg1, Options jarg1_);
  public final static native boolean Options_getDumpUnsatCores(long jarg1, Options jarg1_);
  public final static native boolean Options_getEarlyExit(long jarg1, Options jarg1_);
  public final static native boolean Options_getFallbackSequential(long jarg1, Options jarg1_);
  public final static native boolean Options_getFilesystemAccess(long jarg1, Options jarg1_);
  public final static native boolean Options_getForceNoLimitCpuWhileDump(long jarg1, Options jarg1_);
  public final static native boolean Options_getHelp(long jarg1, Options jarg1_);
  public final static native boolean Options_getIncrementalParallel(long jarg1, Options jarg1_);
  public final static native boolean Options_getIncrementalSolving(long jarg1, Options jarg1_);
  public final static native boolean Options_getInteractive(long jarg1, Options jarg1_);
  public final static native boolean Options_getInteractivePrompt(long jarg1, Options jarg1_);
  public final static native boolean Options_getLanguageHelp(long jarg1, Options jarg1_);
  public final static native boolean Options_getMemoryMap(long jarg1, Options jarg1_);
  public final static native boolean Options_getParseOnly(long jarg1, Options jarg1_);
  public final static native boolean Options_getProduceModels(long jarg1, Options jarg1_);
  public final static native boolean Options_getProof(long jarg1, Options jarg1_);
  public final static native boolean Options_getSegvSpin(long jarg1, Options jarg1_);
  public final static native boolean Options_getSemanticChecks(long jarg1, Options jarg1_);
  public final static native boolean Options_getStatistics(long jarg1, Options jarg1_);
  public final static native boolean Options_getStatsEveryQuery(long jarg1, Options jarg1_);
  public final static native boolean Options_getStatsHideZeros(long jarg1, Options jarg1_);
  public final static native boolean Options_getStrictParsing(long jarg1, Options jarg1_);
  public final static native int Options_getTearDownIncremental(long jarg1, Options jarg1_);
  public final static native boolean Options_getVersion(long jarg1, Options jarg1_);
  public final static native boolean Options_getWaitToJoin(long jarg1, Options jarg1_);
  public final static native String Options_getForceLogicString(long jarg1, Options jarg1_);
  public final static native long Options_getThreadArgv(long jarg1, Options jarg1_);
  public final static native int Options_getSharingFilterByLength(long jarg1, Options jarg1_);
  public final static native int Options_getThreadId(long jarg1, Options jarg1_);
  public final static native int Options_getVerbosity(long jarg1, Options jarg1_);
  public final static native long Options_getIn(long jarg1, Options jarg1_);
  public final static native long Options_getErr(long jarg1, Options jarg1_);
  public final static native long Options_getOut(long jarg1, Options jarg1_);
  public final static native long Options_getOutConst(long jarg1, Options jarg1_);
  public final static native String Options_getBinaryName(long jarg1, Options jarg1_);
  public final static native String Options_getReplayInputFilename(long jarg1, Options jarg1_);
  public final static native long Options_getParseStep(long jarg1, Options jarg1_);
  public final static native long Options_getThreadStackSize(long jarg1, Options jarg1_);
  public final static native long Options_getThreads(long jarg1, Options jarg1_);
  public final static native void Options_setInputLanguage(long jarg1, Options jarg1_, int jarg2);
  public final static native void Options_setInteractive(long jarg1, Options jarg1_, boolean jarg2);
  public final static native void Options_setOut(long jarg1, Options jarg1_, long jarg2);
  public final static native void Options_setOutputLanguage(long jarg1, Options jarg1_, int jarg2);
  public final static native void Options_setSharingFilterByLength(long jarg1, Options jarg1_, int jarg2);
  public final static native void Options_setThreadId(long jarg1, Options jarg1_, int jarg2);
  public final static native boolean Options_wasSetByUserCeGuidedInst(long jarg1, Options jarg1_);
  public final static native boolean Options_wasSetByUserDumpSynth(long jarg1, Options jarg1_);
  public final static native boolean Options_wasSetByUserEarlyExit(long jarg1, Options jarg1_);
  public final static native boolean Options_wasSetByUserForceLogicString(long jarg1, Options jarg1_);
  public final static native boolean Options_wasSetByUserIncrementalSolving(long jarg1, Options jarg1_);
  public final static native boolean Options_wasSetByUserInteractive(long jarg1, Options jarg1_);
  public final static native boolean Options_wasSetByUserThreadStackSize(long jarg1, Options jarg1_);
  public final static native boolean Options_wasSetByUserThreads(long jarg1, Options jarg1_);
  public final static native int Options_currentGetSharingFilterByLength();
  public final static native int Options_currentGetThreadId();
  public final static native long Options_currentGetOut();
  public final static native String Options_getDescription(long jarg1, Options jarg1_);
  public final static native void Options_printUsage(String jarg1, long jarg2);
  public final static native void Options_printShortUsage(String jarg1, long jarg2);
  public final static native void Options_printLanguageHelp(long jarg1);
  public final static native String Options_suggestCommandLineOptions(String jarg1);
  public final static native long Options_suggestSmtOptions(String jarg1);
  public final static native long Options_parseOptions(long jarg1, Options jarg1_, int jarg2, String[] jarg3);
  public final static native long Options_getOptions(long jarg1, Options jarg1_);
  public final static native long Options_registerBeforeSearchListener(long jarg1, Options jarg1_, long jarg2);
  public final static native long Options_registerForceLogicListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerTlimitListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerTlimitPerListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerRlimitListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerRlimitPerListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerUseTheoryListListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerSetDefaultExprDepthListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerSetDefaultExprDagListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerSetPrintExprTypesListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerSetDumpModeListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerSetPrintSuccessListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerDumpToFileNameListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerSetRegularOutputChannelListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerSetDiagnosticOutputChannelListener(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native long Options_registerSetReplayLogFilename(long jarg1, Options jarg1_, long jarg2, boolean jarg3);
  public final static native void Options_flushErr(long jarg1, Options jarg1_);
  public final static native void Options_flushOut(long jarg1, Options jarg1_);
  public final static native long new_ParserException__SWIG_0();
  public final static native long new_ParserException__SWIG_1(String jarg1);
  public final static native long new_ParserException__SWIG_2(String jarg1, String jarg2, long jarg3, long jarg4);
  public final static native void delete_ParserException(long jarg1);
  public final static native void ParserException_toStream(long jarg1, ParserException jarg1_, long jarg2);
  public final static native String ParserException_getFilename(long jarg1, ParserException jarg1_);
  public final static native int ParserException_getLine(long jarg1, ParserException jarg1_);
  public final static native int ParserException_getColumn(long jarg1, ParserException jarg1_);
  public final static native long new_ParserEndOfFileException__SWIG_0();
  public final static native long new_ParserEndOfFileException__SWIG_1(String jarg1);
  public final static native long new_ParserEndOfFileException__SWIG_2(String jarg1, String jarg2, long jarg3, long jarg4);
  public final static native void delete_ParserEndOfFileException(long jarg1);
  public final static native long new_InputStreamException(String jarg1);
  public final static native void delete_InputStreamException(long jarg1);
  public final static native void delete_InputStream(long jarg1);
  public final static native String InputStream_getName(long jarg1, InputStream jarg1_);
  public final static native long Input_newFileInput__SWIG_0(int jarg1, String jarg2, boolean jarg3);
  public final static native long Input_newFileInput__SWIG_1(int jarg1, String jarg2);
  public final static native long Input_newStreamInput__SWIG_0(int jarg1, long jarg2, String jarg3, boolean jarg4);
  public final static native long Input_newStreamInput__SWIG_1(int jarg1, long jarg2, String jarg3);
  public final static native long Input_newStringInput(int jarg1, String jarg2, String jarg3);
  public final static native void delete_Input(long jarg1);
  public final static native String Input_getInputStreamName(long jarg1, Input jarg1_);
  public final static native long new_ParserExprStream(long jarg1, Parser jarg1_);
  public final static native void delete_ParserExprStream(long jarg1);
  public final static native long ParserExprStream_nextExpr(long jarg1, ParserExprStream jarg1_);
  public final static native int SygusGTerm_gterm_op_get();
  public final static native int SygusGTerm_gterm_let_get();
  public final static native int SygusGTerm_gterm_constant_get();
  public final static native int SygusGTerm_gterm_variable_get();
  public final static native int SygusGTerm_gterm_input_variable_get();
  public final static native int SygusGTerm_gterm_local_variable_get();
  public final static native int SygusGTerm_gterm_nested_sort_get();
  public final static native int SygusGTerm_gterm_unresolved_get();
  public final static native int SygusGTerm_gterm_ignore_get();
  public final static native void SygusGTerm_d_type_set(long jarg1, SygusGTerm jarg1_, long jarg2, Type jarg2_);
  public final static native long SygusGTerm_d_type_get(long jarg1, SygusGTerm jarg1_);
  public final static native void SygusGTerm_d_expr_set(long jarg1, SygusGTerm jarg1_, long jarg2, Expr jarg2_);
  public final static native long SygusGTerm_d_expr_get(long jarg1, SygusGTerm jarg1_);
  public final static native void SygusGTerm_d_let_vars_set(long jarg1, SygusGTerm jarg1_, long jarg2, vectorExpr jarg2_);
  public final static native long SygusGTerm_d_let_vars_get(long jarg1, SygusGTerm jarg1_);
  public final static native void SygusGTerm_d_gterm_type_set(long jarg1, SygusGTerm jarg1_, long jarg2);
  public final static native long SygusGTerm_d_gterm_type_get(long jarg1, SygusGTerm jarg1_);
  public final static native void SygusGTerm_d_name_set(long jarg1, SygusGTerm jarg1_, String jarg2);
  public final static native String SygusGTerm_d_name_get(long jarg1, SygusGTerm jarg1_);
  public final static native void SygusGTerm_d_children_set(long jarg1, SygusGTerm jarg1_, long jarg2);
  public final static native long SygusGTerm_d_children_get(long jarg1, SygusGTerm jarg1_);
  public final static native long SygusGTerm_getNumChildren(long jarg1, SygusGTerm jarg1_);
  public final static native void SygusGTerm_addChild(long jarg1, SygusGTerm jarg1_);
  public final static native long new_SygusGTerm();
  public final static native void delete_SygusGTerm(long jarg1);
  public final static native void delete_Parser(long jarg1);
  public final static native long Parser_getExprManager(long jarg1, Parser jarg1_);
  public final static native long Parser_getSolver(long jarg1, Parser jarg1_);
  public final static native long Parser_getInput(long jarg1, Parser jarg1_);
  public final static native void Parser_setInput(long jarg1, Parser jarg1_, long jarg2, Input jarg2_);
  public final static native boolean Parser_done(long jarg1, Parser jarg1_);
  public final static native void Parser_setDone__SWIG_0(long jarg1, Parser jarg1_, boolean jarg2);
  public final static native void Parser_setDone__SWIG_1(long jarg1, Parser jarg1_);
  public final static native void Parser_enableChecks(long jarg1, Parser jarg1_);
  public final static native void Parser_disableChecks(long jarg1, Parser jarg1_);
  public final static native void Parser_enableStrictMode(long jarg1, Parser jarg1_);
  public final static native void Parser_disableStrictMode(long jarg1, Parser jarg1_);
  public final static native boolean Parser_strictModeEnabled(long jarg1, Parser jarg1_);
  public final static native void Parser_allowIncludeFile(long jarg1, Parser jarg1_);
  public final static native void Parser_disallowIncludeFile(long jarg1, Parser jarg1_);
  public final static native boolean Parser_canIncludeFile(long jarg1, Parser jarg1_);
  public final static native boolean Parser_logicIsSet(long jarg1, Parser jarg1_);
  public final static native void Parser_forceLogic(long jarg1, Parser jarg1_, String jarg2);
  public final static native String Parser_getForcedLogic(long jarg1, Parser jarg1_);
  public final static native boolean Parser_logicIsForced(long jarg1, Parser jarg1_);
  public final static native long Parser_getVariable(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_getFunction(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_getExpressionForName(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_getExpressionForNameAndType(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native int Parser_getKindForFunction(long jarg1, Parser jarg1_, long jarg2, Expr jarg2_);
  public final static native long Parser_getSort__SWIG_0(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_getSort__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3, vectorType jarg3_);
  public final static native long Parser_getArity(long jarg1, Parser jarg1_, String jarg2);
  public final static native boolean Parser_isDeclared__SWIG_0(long jarg1, Parser jarg1_, String jarg2, int jarg3);
  public final static native boolean Parser_isDeclared__SWIG_1(long jarg1, Parser jarg1_, String jarg2);
  public final static native void Parser_checkDeclaration__SWIG_0(long jarg1, Parser jarg1_, String jarg2, int jarg3, int jarg4, String jarg5);
  public final static native void Parser_checkDeclaration__SWIG_1(long jarg1, Parser jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native void Parser_checkDeclaration__SWIG_2(long jarg1, Parser jarg1_, String jarg2, int jarg3);
  public final static native void Parser_reserveSymbolAtAssertionLevel(long jarg1, Parser jarg1_, String jarg2);
  public final static native void Parser_checkFunctionLike(long jarg1, Parser jarg1_, long jarg2, Expr jarg2_);
  public final static native void Parser_checkArity(long jarg1, Parser jarg1_, int jarg2, long jarg3);
  public final static native void Parser_checkOperator(long jarg1, Parser jarg1_, int jarg2, long jarg3);
  public final static native long Parser_mkVar__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_, long jarg4, boolean jarg5);
  public final static native long Parser_mkVar__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_, long jarg4);
  public final static native long Parser_mkVar__SWIG_2(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native long Parser_mkVars__SWIG_0(long jarg1, Parser jarg1_, long jarg2, vectorString jarg2_, long jarg3, Type jarg3_, long jarg4, boolean jarg5);
  public final static native long Parser_mkVars__SWIG_1(long jarg1, Parser jarg1_, long jarg2, vectorString jarg2_, long jarg3, Type jarg3_, long jarg4);
  public final static native long Parser_mkVars__SWIG_2(long jarg1, Parser jarg1_, long jarg2, vectorString jarg2_, long jarg3, Type jarg3_);
  public final static native long Parser_mkBoundVar(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native long Parser_mkBoundVars(long jarg1, Parser jarg1_, long jarg2, vectorString jarg2_, long jarg3, Type jarg3_);
  public final static native long Parser_mkFunction__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_, long jarg4, boolean jarg5);
  public final static native long Parser_mkFunction__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_, long jarg4);
  public final static native long Parser_mkFunction__SWIG_2(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native long Parser_mkAnonymousFunction__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_, long jarg4);
  public final static native long Parser_mkAnonymousFunction__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native void Parser_defineVar__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3, Expr jarg3_, boolean jarg4, boolean jarg5);
  public final static native void Parser_defineVar__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3, Expr jarg3_, boolean jarg4);
  public final static native void Parser_defineVar__SWIG_2(long jarg1, Parser jarg1_, String jarg2, long jarg3, Expr jarg3_);
  public final static native void Parser_defineFunction__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3, Expr jarg3_, boolean jarg4, boolean jarg5);
  public final static native void Parser_defineFunction__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3, Expr jarg3_, boolean jarg4);
  public final static native void Parser_defineFunction__SWIG_2(long jarg1, Parser jarg1_, String jarg2, long jarg3, Expr jarg3_);
  public final static native void Parser_defineType__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native void Parser_defineType__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3, vectorType jarg3_, long jarg4, Type jarg4_);
  public final static native void Parser_defineParameterizedType(long jarg1, Parser jarg1_, String jarg2, long jarg3, vectorType jarg3_, long jarg4, Type jarg4_);
  public final static native long Parser_mkSort__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3);
  public final static native long Parser_mkSort__SWIG_1(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_mkSortConstructor__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3, long jarg4);
  public final static native long Parser_mkSortConstructor__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3);
  public final static native long Parser_mkUnresolvedType(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_mkUnresolvedTypeConstructor__SWIG_0(long jarg1, Parser jarg1_, String jarg2, long jarg3);
  public final static native long Parser_mkUnresolvedTypeConstructor__SWIG_1(long jarg1, Parser jarg1_, String jarg2, long jarg3, vectorType jarg3_);
  public final static native boolean Parser_isUnresolvedType(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_mkMutualDatatypeTypes__SWIG_0(long jarg1, Parser jarg1_, long jarg2, vectorDatatype jarg2_, boolean jarg3);
  public final static native long Parser_mkMutualDatatypeTypes__SWIG_1(long jarg1, Parser jarg1_, long jarg2, vectorDatatype jarg2_);
  public final static native long Parser_mkFlatFunctionType__SWIG_0(long jarg1, Parser jarg1_, long jarg2, vectorType jarg2_, long jarg3, Type jarg3_, long jarg4, vectorExpr jarg4_);
  public final static native long Parser_mkFlatFunctionType__SWIG_1(long jarg1, Parser jarg1_, long jarg2, vectorType jarg2_, long jarg3, Type jarg3_);
  public final static native long Parser_mkHoApply(long jarg1, Parser jarg1_, long jarg2, Expr jarg2_, long jarg3, vectorExpr jarg3_);
  public final static native void Parser_addOperator(long jarg1, Parser jarg1_, int jarg2);
  public final static native void Parser_preemptCommand(long jarg1, Parser jarg1_, long jarg2, Command jarg2_);
  public final static native boolean Parser_isBoolean(long jarg1, Parser jarg1_, String jarg2);
  public final static native boolean Parser_isFunctionLike(long jarg1, Parser jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean Parser_isDefinedFunction__SWIG_0(long jarg1, Parser jarg1_, String jarg2);
  public final static native boolean Parser_isDefinedFunction__SWIG_1(long jarg1, Parser jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean Parser_isPredicate(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_nextCommand(long jarg1, Parser jarg1_);
  public final static native long Parser_nextExpression(long jarg1, Parser jarg1_);
  public final static native void Parser_warning(long jarg1, Parser jarg1_, String jarg2);
  public final static native void Parser_attributeNotSupported(long jarg1, Parser jarg1_, String jarg2);
  public final static native void Parser_parseError(long jarg1, Parser jarg1_, String jarg2);
  public final static native void Parser_unexpectedEOF(long jarg1, Parser jarg1_, String jarg2);
  public final static native void Parser_unimplementedFeature(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_scopeLevel(long jarg1, Parser jarg1_);
  public final static native void Parser_pushScope__SWIG_0(long jarg1, Parser jarg1_, boolean jarg2);
  public final static native void Parser_pushScope__SWIG_1(long jarg1, Parser jarg1_);
  public final static native void Parser_popScope(long jarg1, Parser jarg1_);
  public final static native void Parser_reset(long jarg1, Parser jarg1_);
  public final static native void Parser_setGlobalDeclarations(long jarg1, Parser jarg1_, boolean jarg2);
  public final static native void Parser_useDeclarationsFrom__SWIG_0(long jarg1, Parser jarg1_, long jarg2, Parser jarg2_);
  public final static native void Parser_useDeclarationsFrom__SWIG_1(long jarg1, Parser jarg1_, long jarg2, SymbolTable jarg2_);
  public final static native long Parser_getSymbolTable(long jarg1, Parser jarg1_);
  public final static native boolean Parser_isOverloadedFunction(long jarg1, Parser jarg1_, long jarg2, Expr jarg2_);
  public final static native long Parser_getOverloadedConstantForType(long jarg1, Parser jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native long Parser_getOverloadedFunctionForTypes(long jarg1, Parser jarg1_, String jarg2, long jarg3, vectorType jarg3_);
  public final static native long new_ParserBuilder__SWIG_0(long jarg1, String jarg2);
  public final static native long new_ParserBuilder__SWIG_1(long jarg1, String jarg2, long jarg3, Options jarg3_);
  public final static native long ParserBuilder_build(long jarg1, ParserBuilder jarg1_);
  public final static native long ParserBuilder_withChecks__SWIG_0(long jarg1, ParserBuilder jarg1_, boolean jarg2);
  public final static native long ParserBuilder_withChecks__SWIG_1(long jarg1, ParserBuilder jarg1_);
  public final static native long ParserBuilder_withSolver(long jarg1, ParserBuilder jarg1_, long jarg2);
  public final static native long ParserBuilder_withFileInput(long jarg1, ParserBuilder jarg1_);
  public final static native long ParserBuilder_withFilename(long jarg1, ParserBuilder jarg1_, String jarg2);
  public final static native long ParserBuilder_withInputLanguage(long jarg1, ParserBuilder jarg1_, int jarg2);
  public final static native long ParserBuilder_withMmap__SWIG_0(long jarg1, ParserBuilder jarg1_, boolean jarg2);
  public final static native long ParserBuilder_withMmap__SWIG_1(long jarg1, ParserBuilder jarg1_);
  public final static native long ParserBuilder_withParseOnly__SWIG_0(long jarg1, ParserBuilder jarg1_, boolean jarg2);
  public final static native long ParserBuilder_withParseOnly__SWIG_1(long jarg1, ParserBuilder jarg1_);
  public final static native long ParserBuilder_withOptions(long jarg1, ParserBuilder jarg1_, long jarg2, Options jarg2_);
  public final static native long ParserBuilder_withStrictMode__SWIG_0(long jarg1, ParserBuilder jarg1_, boolean jarg2);
  public final static native long ParserBuilder_withStrictMode__SWIG_1(long jarg1, ParserBuilder jarg1_);
  public final static native long ParserBuilder_withIncludeFile__SWIG_0(long jarg1, ParserBuilder jarg1_, boolean jarg2);
  public final static native long ParserBuilder_withIncludeFile__SWIG_1(long jarg1, ParserBuilder jarg1_);
  public final static native long ParserBuilder_withStreamInput(long jarg1, ParserBuilder jarg1_, long jarg2);
  public final static native long ParserBuilder_withLineBufferedStreamInput(long jarg1, ParserBuilder jarg1_, long jarg2);
  public final static native long ParserBuilder_withStringInput(long jarg1, ParserBuilder jarg1_, String jarg2);
  public final static native long ParserBuilder_withForcedLogic(long jarg1, ParserBuilder jarg1_, String jarg2);
  public final static native void delete_ParserBuilder(long jarg1);
  public final static native long new_CommandPrintSuccess(boolean jarg1);
  public final static native void CommandPrintSuccess_applyPrintSuccess(long jarg1, CommandPrintSuccess jarg1_, long jarg2);
  public final static native boolean CommandPrintSuccess_getPrintSuccess(long jarg1);
  public final static native void CommandPrintSuccess_setPrintSuccess(long jarg1, boolean jarg2);
  public final static native void delete_CommandPrintSuccess(long jarg1);
  public final static native void delete_CommandStatus(long jarg1);
  public final static native void CommandStatus_toStream__SWIG_0(long jarg1, CommandStatus jarg1_, long jarg2, int jarg3);
  public final static native void CommandStatus_toStream__SWIG_1(long jarg1, CommandStatus jarg1_, long jarg2);
  public final static native long CommandStatus_clone(long jarg1, CommandStatus jarg1_);
  public final static native long CommandSuccess_instance();
  public final static native long CommandSuccess_clone(long jarg1, CommandSuccess jarg1_);
  public final static native long new_CommandSuccess();
  public final static native void delete_CommandSuccess(long jarg1);
  public final static native long CommandInterrupted_instance();
  public final static native long CommandInterrupted_clone(long jarg1, CommandInterrupted jarg1_);
  public final static native long new_CommandInterrupted();
  public final static native void delete_CommandInterrupted(long jarg1);
  public final static native long CommandUnsupported_clone(long jarg1, CommandUnsupported jarg1_);
  public final static native long new_CommandUnsupported();
  public final static native void delete_CommandUnsupported(long jarg1);
  public final static native long new_CommandFailure(String jarg1);
  public final static native long CommandFailure_clone(long jarg1, CommandFailure jarg1_);
  public final static native String CommandFailure_getMessage(long jarg1, CommandFailure jarg1_);
  public final static native void delete_CommandFailure(long jarg1);
  public final static native long new_CommandRecoverableFailure(String jarg1);
  public final static native long CommandRecoverableFailure_clone(long jarg1, CommandRecoverableFailure jarg1_);
  public final static native String CommandRecoverableFailure_getMessage(long jarg1, CommandRecoverableFailure jarg1_);
  public final static native void delete_CommandRecoverableFailure(long jarg1);
  public final static native void delete_Command(long jarg1);
  public final static native void Command_invoke__SWIG_0(long jarg1, Command jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void Command_invoke__SWIG_1(long jarg1, Command jarg1_, long jarg2, SmtEngine jarg2_, long jarg3);
  public final static native void Command_toStream__SWIG_0(long jarg1, Command jarg1_, long jarg2, int jarg3, boolean jarg4, long jarg5, int jarg6);
  public final static native void Command_toStream__SWIG_1(long jarg1, Command jarg1_, long jarg2, int jarg3, boolean jarg4, long jarg5);
  public final static native void Command_toStream__SWIG_2(long jarg1, Command jarg1_, long jarg2, int jarg3, boolean jarg4);
  public final static native void Command_toStream__SWIG_3(long jarg1, Command jarg1_, long jarg2, int jarg3);
  public final static native void Command_toStream__SWIG_4(long jarg1, Command jarg1_, long jarg2);
  public final static native String Command_toString(long jarg1, Command jarg1_);
  public final static native String Command_getCommandName(long jarg1, Command jarg1_);
  public final static native void Command_setMuted(long jarg1, Command jarg1_, boolean jarg2);
  public final static native boolean Command_isMuted(long jarg1, Command jarg1_);
  public final static native boolean Command_ok(long jarg1, Command jarg1_);
  public final static native boolean Command_fail(long jarg1, Command jarg1_);
  public final static native boolean Command_interrupted(long jarg1, Command jarg1_);
  public final static native long Command_getCommandStatus(long jarg1, Command jarg1_);
  public final static native void Command_printResult__SWIG_0(long jarg1, Command jarg1_, long jarg2, long jarg3);
  public final static native void Command_printResult__SWIG_1(long jarg1, Command jarg1_, long jarg2);
  public final static native long Command_exportTo(long jarg1, Command jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long Command_clone(long jarg1, Command jarg1_);
  public final static native long new_EmptyCommand__SWIG_0(String jarg1);
  public final static native long new_EmptyCommand__SWIG_1();
  public final static native String EmptyCommand_getName(long jarg1, EmptyCommand jarg1_);
  public final static native void EmptyCommand_invoke(long jarg1, EmptyCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long EmptyCommand_exportTo(long jarg1, EmptyCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long EmptyCommand_clone(long jarg1, EmptyCommand jarg1_);
  public final static native String EmptyCommand_getCommandName(long jarg1, EmptyCommand jarg1_);
  public final static native void delete_EmptyCommand(long jarg1);
  public final static native long new_EchoCommand__SWIG_0(String jarg1);
  public final static native long new_EchoCommand__SWIG_1();
  public final static native String EchoCommand_getOutput(long jarg1, EchoCommand jarg1_);
  public final static native void EchoCommand_invoke__SWIG_0(long jarg1, EchoCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void EchoCommand_invoke__SWIG_1(long jarg1, EchoCommand jarg1_, long jarg2, SmtEngine jarg2_, long jarg3);
  public final static native long EchoCommand_exportTo(long jarg1, EchoCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long EchoCommand_clone(long jarg1, EchoCommand jarg1_);
  public final static native String EchoCommand_getCommandName(long jarg1, EchoCommand jarg1_);
  public final static native void delete_EchoCommand(long jarg1);
  public final static native long new_AssertCommand__SWIG_0(long jarg1, Expr jarg1_, boolean jarg2);
  public final static native long new_AssertCommand__SWIG_1(long jarg1, Expr jarg1_);
  public final static native long AssertCommand_getExpr(long jarg1, AssertCommand jarg1_);
  public final static native void AssertCommand_invoke(long jarg1, AssertCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long AssertCommand_exportTo(long jarg1, AssertCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long AssertCommand_clone(long jarg1, AssertCommand jarg1_);
  public final static native String AssertCommand_getCommandName(long jarg1, AssertCommand jarg1_);
  public final static native void delete_AssertCommand(long jarg1);
  public final static native void PushCommand_invoke(long jarg1, PushCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long PushCommand_exportTo(long jarg1, PushCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long PushCommand_clone(long jarg1, PushCommand jarg1_);
  public final static native String PushCommand_getCommandName(long jarg1, PushCommand jarg1_);
  public final static native long new_PushCommand();
  public final static native void delete_PushCommand(long jarg1);
  public final static native void PopCommand_invoke(long jarg1, PopCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long PopCommand_exportTo(long jarg1, PopCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long PopCommand_clone(long jarg1, PopCommand jarg1_);
  public final static native String PopCommand_getCommandName(long jarg1, PopCommand jarg1_);
  public final static native long new_PopCommand();
  public final static native void delete_PopCommand(long jarg1);
  public final static native void DeclarationDefinitionCommand_invoke(long jarg1, DeclarationDefinitionCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native String DeclarationDefinitionCommand_getSymbol(long jarg1, DeclarationDefinitionCommand jarg1_);
  public final static native void delete_DeclarationDefinitionCommand(long jarg1);
  public final static native long new_DeclareFunctionCommand(String jarg1, long jarg2, Expr jarg2_, long jarg3, Type jarg3_);
  public final static native long DeclareFunctionCommand_getFunction(long jarg1, DeclareFunctionCommand jarg1_);
  public final static native long DeclareFunctionCommand_getType(long jarg1, DeclareFunctionCommand jarg1_);
  public final static native boolean DeclareFunctionCommand_getPrintInModel(long jarg1, DeclareFunctionCommand jarg1_);
  public final static native boolean DeclareFunctionCommand_getPrintInModelSetByUser(long jarg1, DeclareFunctionCommand jarg1_);
  public final static native void DeclareFunctionCommand_setPrintInModel(long jarg1, DeclareFunctionCommand jarg1_, boolean jarg2);
  public final static native void DeclareFunctionCommand_invoke(long jarg1, DeclareFunctionCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DeclareFunctionCommand_exportTo(long jarg1, DeclareFunctionCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DeclareFunctionCommand_clone(long jarg1, DeclareFunctionCommand jarg1_);
  public final static native String DeclareFunctionCommand_getCommandName(long jarg1, DeclareFunctionCommand jarg1_);
  public final static native void delete_DeclareFunctionCommand(long jarg1);
  public final static native long new_DeclareTypeCommand(String jarg1, long jarg2, long jarg3, Type jarg3_);
  public final static native long DeclareTypeCommand_getArity(long jarg1, DeclareTypeCommand jarg1_);
  public final static native long DeclareTypeCommand_getType(long jarg1, DeclareTypeCommand jarg1_);
  public final static native void DeclareTypeCommand_invoke(long jarg1, DeclareTypeCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DeclareTypeCommand_exportTo(long jarg1, DeclareTypeCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DeclareTypeCommand_clone(long jarg1, DeclareTypeCommand jarg1_);
  public final static native String DeclareTypeCommand_getCommandName(long jarg1, DeclareTypeCommand jarg1_);
  public final static native void delete_DeclareTypeCommand(long jarg1);
  public final static native long new_DefineTypeCommand__SWIG_0(String jarg1, long jarg2, Type jarg2_);
  public final static native long new_DefineTypeCommand__SWIG_1(String jarg1, long jarg2, vectorType jarg2_, long jarg3, Type jarg3_);
  public final static native long DefineTypeCommand_getParameters(long jarg1, DefineTypeCommand jarg1_);
  public final static native long DefineTypeCommand_getType(long jarg1, DefineTypeCommand jarg1_);
  public final static native void DefineTypeCommand_invoke(long jarg1, DefineTypeCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DefineTypeCommand_exportTo(long jarg1, DefineTypeCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DefineTypeCommand_clone(long jarg1, DefineTypeCommand jarg1_);
  public final static native String DefineTypeCommand_getCommandName(long jarg1, DefineTypeCommand jarg1_);
  public final static native void delete_DefineTypeCommand(long jarg1);
  public final static native long new_DefineFunctionCommand__SWIG_0(String jarg1, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_);
  public final static native long new_DefineFunctionCommand__SWIG_1(String jarg1, long jarg2, Expr jarg2_, long jarg3, vectorExpr jarg3_, long jarg4, Expr jarg4_);
  public final static native long DefineFunctionCommand_getFunction(long jarg1, DefineFunctionCommand jarg1_);
  public final static native long DefineFunctionCommand_getFormals(long jarg1, DefineFunctionCommand jarg1_);
  public final static native long DefineFunctionCommand_getFormula(long jarg1, DefineFunctionCommand jarg1_);
  public final static native void DefineFunctionCommand_invoke(long jarg1, DefineFunctionCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DefineFunctionCommand_exportTo(long jarg1, DefineFunctionCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DefineFunctionCommand_clone(long jarg1, DefineFunctionCommand jarg1_);
  public final static native String DefineFunctionCommand_getCommandName(long jarg1, DefineFunctionCommand jarg1_);
  public final static native void delete_DefineFunctionCommand(long jarg1);
  public final static native long new_DefineNamedFunctionCommand(String jarg1, long jarg2, Expr jarg2_, long jarg3, vectorExpr jarg3_, long jarg4, Expr jarg4_);
  public final static native void DefineNamedFunctionCommand_invoke(long jarg1, DefineNamedFunctionCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DefineNamedFunctionCommand_exportTo(long jarg1, DefineNamedFunctionCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DefineNamedFunctionCommand_clone(long jarg1, DefineNamedFunctionCommand jarg1_);
  public final static native void delete_DefineNamedFunctionCommand(long jarg1);
  public final static native long new_DefineFunctionRecCommand__SWIG_0(long jarg1, Expr jarg1_, long jarg2, vectorExpr jarg2_, long jarg3, Expr jarg3_);
  public final static native long new_DefineFunctionRecCommand__SWIG_1(long jarg1, vectorExpr jarg1_, long jarg2, vectorVectorExpr jarg2_, long jarg3, vectorExpr jarg3_);
  public final static native long DefineFunctionRecCommand_getFunctions(long jarg1, DefineFunctionRecCommand jarg1_);
  public final static native long DefineFunctionRecCommand_getFormals(long jarg1, DefineFunctionRecCommand jarg1_);
  public final static native long DefineFunctionRecCommand_getFormulas(long jarg1, DefineFunctionRecCommand jarg1_);
  public final static native void DefineFunctionRecCommand_invoke(long jarg1, DefineFunctionRecCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DefineFunctionRecCommand_exportTo(long jarg1, DefineFunctionRecCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DefineFunctionRecCommand_clone(long jarg1, DefineFunctionRecCommand jarg1_);
  public final static native String DefineFunctionRecCommand_getCommandName(long jarg1, DefineFunctionRecCommand jarg1_);
  public final static native void delete_DefineFunctionRecCommand(long jarg1);
  public final static native long new_SetUserAttributeCommand__SWIG_0(String jarg1, long jarg2, Expr jarg2_);
  public final static native long new_SetUserAttributeCommand__SWIG_1(String jarg1, long jarg2, Expr jarg2_, long jarg3, vectorExpr jarg3_);
  public final static native long new_SetUserAttributeCommand__SWIG_2(String jarg1, long jarg2, Expr jarg2_, String jarg3);
  public final static native void SetUserAttributeCommand_invoke(long jarg1, SetUserAttributeCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SetUserAttributeCommand_exportTo(long jarg1, SetUserAttributeCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SetUserAttributeCommand_clone(long jarg1, SetUserAttributeCommand jarg1_);
  public final static native String SetUserAttributeCommand_getCommandName(long jarg1, SetUserAttributeCommand jarg1_);
  public final static native void delete_SetUserAttributeCommand(long jarg1);
  public final static native long new_CheckSatCommand__SWIG_0();
  public final static native long new_CheckSatCommand__SWIG_1(long jarg1, Expr jarg1_);
  public final static native long CheckSatCommand_getExpr(long jarg1, CheckSatCommand jarg1_);
  public final static native long CheckSatCommand_getResult(long jarg1, CheckSatCommand jarg1_);
  public final static native void CheckSatCommand_invoke(long jarg1, CheckSatCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void CheckSatCommand_printResult__SWIG_0(long jarg1, CheckSatCommand jarg1_, long jarg2, long jarg3);
  public final static native void CheckSatCommand_printResult__SWIG_1(long jarg1, CheckSatCommand jarg1_, long jarg2);
  public final static native long CheckSatCommand_exportTo(long jarg1, CheckSatCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long CheckSatCommand_clone(long jarg1, CheckSatCommand jarg1_);
  public final static native String CheckSatCommand_getCommandName(long jarg1, CheckSatCommand jarg1_);
  public final static native void delete_CheckSatCommand(long jarg1);
  public final static native long new_CheckSatAssumingCommand__SWIG_0(long jarg1, Expr jarg1_);
  public final static native long new_CheckSatAssumingCommand__SWIG_1(long jarg1, vectorExpr jarg1_);
  public final static native long CheckSatAssumingCommand_getTerms(long jarg1, CheckSatAssumingCommand jarg1_);
  public final static native long CheckSatAssumingCommand_getResult(long jarg1, CheckSatAssumingCommand jarg1_);
  public final static native void CheckSatAssumingCommand_invoke(long jarg1, CheckSatAssumingCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void CheckSatAssumingCommand_printResult__SWIG_0(long jarg1, CheckSatAssumingCommand jarg1_, long jarg2, long jarg3);
  public final static native void CheckSatAssumingCommand_printResult__SWIG_1(long jarg1, CheckSatAssumingCommand jarg1_, long jarg2);
  public final static native long CheckSatAssumingCommand_exportTo(long jarg1, CheckSatAssumingCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long CheckSatAssumingCommand_clone(long jarg1, CheckSatAssumingCommand jarg1_);
  public final static native String CheckSatAssumingCommand_getCommandName(long jarg1, CheckSatAssumingCommand jarg1_);
  public final static native void delete_CheckSatAssumingCommand(long jarg1);
  public final static native long new_QueryCommand__SWIG_0(long jarg1, Expr jarg1_, boolean jarg2);
  public final static native long new_QueryCommand__SWIG_1(long jarg1, Expr jarg1_);
  public final static native long QueryCommand_getExpr(long jarg1, QueryCommand jarg1_);
  public final static native long QueryCommand_getResult(long jarg1, QueryCommand jarg1_);
  public final static native void QueryCommand_invoke(long jarg1, QueryCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void QueryCommand_printResult__SWIG_0(long jarg1, QueryCommand jarg1_, long jarg2, long jarg3);
  public final static native void QueryCommand_printResult__SWIG_1(long jarg1, QueryCommand jarg1_, long jarg2);
  public final static native long QueryCommand_exportTo(long jarg1, QueryCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long QueryCommand_clone(long jarg1, QueryCommand jarg1_);
  public final static native String QueryCommand_getCommandName(long jarg1, QueryCommand jarg1_);
  public final static native void delete_QueryCommand(long jarg1);
  public final static native long new_DeclareSygusVarCommand(String jarg1, long jarg2, Expr jarg2_, long jarg3, Type jarg3_);
  public final static native long DeclareSygusVarCommand_getVar(long jarg1, DeclareSygusVarCommand jarg1_);
  public final static native long DeclareSygusVarCommand_getType(long jarg1, DeclareSygusVarCommand jarg1_);
  public final static native void DeclareSygusVarCommand_invoke(long jarg1, DeclareSygusVarCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DeclareSygusVarCommand_exportTo(long jarg1, DeclareSygusVarCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DeclareSygusVarCommand_clone(long jarg1, DeclareSygusVarCommand jarg1_);
  public final static native String DeclareSygusVarCommand_getCommandName(long jarg1, DeclareSygusVarCommand jarg1_);
  public final static native void delete_DeclareSygusVarCommand(long jarg1);
  public final static native long new_DeclareSygusPrimedVarCommand(String jarg1, long jarg2, Type jarg2_);
  public final static native long DeclareSygusPrimedVarCommand_getType(long jarg1, DeclareSygusPrimedVarCommand jarg1_);
  public final static native void DeclareSygusPrimedVarCommand_invoke(long jarg1, DeclareSygusPrimedVarCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DeclareSygusPrimedVarCommand_exportTo(long jarg1, DeclareSygusPrimedVarCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DeclareSygusPrimedVarCommand_clone(long jarg1, DeclareSygusPrimedVarCommand jarg1_);
  public final static native String DeclareSygusPrimedVarCommand_getCommandName(long jarg1, DeclareSygusPrimedVarCommand jarg1_);
  public final static native void delete_DeclareSygusPrimedVarCommand(long jarg1);
  public final static native long new_DeclareSygusFunctionCommand(String jarg1, long jarg2, Expr jarg2_, long jarg3, Type jarg3_);
  public final static native long DeclareSygusFunctionCommand_getFunction(long jarg1, DeclareSygusFunctionCommand jarg1_);
  public final static native long DeclareSygusFunctionCommand_getType(long jarg1, DeclareSygusFunctionCommand jarg1_);
  public final static native void DeclareSygusFunctionCommand_invoke(long jarg1, DeclareSygusFunctionCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DeclareSygusFunctionCommand_exportTo(long jarg1, DeclareSygusFunctionCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DeclareSygusFunctionCommand_clone(long jarg1, DeclareSygusFunctionCommand jarg1_);
  public final static native String DeclareSygusFunctionCommand_getCommandName(long jarg1, DeclareSygusFunctionCommand jarg1_);
  public final static native void delete_DeclareSygusFunctionCommand(long jarg1);
  public final static native long new_SynthFunCommand__SWIG_0(String jarg1, long jarg2, Expr jarg2_, long jarg3, Type jarg3_, boolean jarg4, long jarg5, vectorExpr jarg5_);
  public final static native long new_SynthFunCommand__SWIG_1(String jarg1, long jarg2, Expr jarg2_, long jarg3, Type jarg3_, boolean jarg4);
  public final static native long SynthFunCommand_getFunction(long jarg1, SynthFunCommand jarg1_);
  public final static native long SynthFunCommand_getVars(long jarg1, SynthFunCommand jarg1_);
  public final static native long SynthFunCommand_getSygusType(long jarg1, SynthFunCommand jarg1_);
  public final static native boolean SynthFunCommand_isInv(long jarg1, SynthFunCommand jarg1_);
  public final static native void SynthFunCommand_invoke(long jarg1, SynthFunCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SynthFunCommand_exportTo(long jarg1, SynthFunCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SynthFunCommand_clone(long jarg1, SynthFunCommand jarg1_);
  public final static native String SynthFunCommand_getCommandName(long jarg1, SynthFunCommand jarg1_);
  public final static native void delete_SynthFunCommand(long jarg1);
  public final static native long new_SygusConstraintCommand(long jarg1, Expr jarg1_);
  public final static native long SygusConstraintCommand_getExpr(long jarg1, SygusConstraintCommand jarg1_);
  public final static native void SygusConstraintCommand_invoke(long jarg1, SygusConstraintCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SygusConstraintCommand_exportTo(long jarg1, SygusConstraintCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SygusConstraintCommand_clone(long jarg1, SygusConstraintCommand jarg1_);
  public final static native String SygusConstraintCommand_getCommandName(long jarg1, SygusConstraintCommand jarg1_);
  public final static native void delete_SygusConstraintCommand(long jarg1);
  public final static native long new_SygusInvConstraintCommand__SWIG_0(long jarg1, vectorExpr jarg1_);
  public final static native long new_SygusInvConstraintCommand__SWIG_1(long jarg1, Expr jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_);
  public final static native long SygusInvConstraintCommand_getPredicates(long jarg1, SygusInvConstraintCommand jarg1_);
  public final static native void SygusInvConstraintCommand_invoke(long jarg1, SygusInvConstraintCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SygusInvConstraintCommand_exportTo(long jarg1, SygusInvConstraintCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SygusInvConstraintCommand_clone(long jarg1, SygusInvConstraintCommand jarg1_);
  public final static native String SygusInvConstraintCommand_getCommandName(long jarg1, SygusInvConstraintCommand jarg1_);
  public final static native void delete_SygusInvConstraintCommand(long jarg1);
  public final static native long new_CheckSynthCommand();
  public final static native long CheckSynthCommand_getResult(long jarg1, CheckSynthCommand jarg1_);
  public final static native void CheckSynthCommand_printResult__SWIG_0(long jarg1, CheckSynthCommand jarg1_, long jarg2, long jarg3);
  public final static native void CheckSynthCommand_printResult__SWIG_1(long jarg1, CheckSynthCommand jarg1_, long jarg2);
  public final static native void CheckSynthCommand_invoke(long jarg1, CheckSynthCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long CheckSynthCommand_exportTo(long jarg1, CheckSynthCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long CheckSynthCommand_clone(long jarg1, CheckSynthCommand jarg1_);
  public final static native String CheckSynthCommand_getCommandName(long jarg1, CheckSynthCommand jarg1_);
  public final static native void delete_CheckSynthCommand(long jarg1);
  public final static native long new_SimplifyCommand(long jarg1, Expr jarg1_);
  public final static native long SimplifyCommand_getTerm(long jarg1, SimplifyCommand jarg1_);
  public final static native long SimplifyCommand_getResult(long jarg1, SimplifyCommand jarg1_);
  public final static native void SimplifyCommand_invoke(long jarg1, SimplifyCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void SimplifyCommand_printResult__SWIG_0(long jarg1, SimplifyCommand jarg1_, long jarg2, long jarg3);
  public final static native void SimplifyCommand_printResult__SWIG_1(long jarg1, SimplifyCommand jarg1_, long jarg2);
  public final static native long SimplifyCommand_exportTo(long jarg1, SimplifyCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SimplifyCommand_clone(long jarg1, SimplifyCommand jarg1_);
  public final static native String SimplifyCommand_getCommandName(long jarg1, SimplifyCommand jarg1_);
  public final static native void delete_SimplifyCommand(long jarg1);
  public final static native long new_ExpandDefinitionsCommand(long jarg1, Expr jarg1_);
  public final static native long ExpandDefinitionsCommand_getTerm(long jarg1, ExpandDefinitionsCommand jarg1_);
  public final static native long ExpandDefinitionsCommand_getResult(long jarg1, ExpandDefinitionsCommand jarg1_);
  public final static native void ExpandDefinitionsCommand_invoke(long jarg1, ExpandDefinitionsCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void ExpandDefinitionsCommand_printResult__SWIG_0(long jarg1, ExpandDefinitionsCommand jarg1_, long jarg2, long jarg3);
  public final static native void ExpandDefinitionsCommand_printResult__SWIG_1(long jarg1, ExpandDefinitionsCommand jarg1_, long jarg2);
  public final static native long ExpandDefinitionsCommand_exportTo(long jarg1, ExpandDefinitionsCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long ExpandDefinitionsCommand_clone(long jarg1, ExpandDefinitionsCommand jarg1_);
  public final static native String ExpandDefinitionsCommand_getCommandName(long jarg1, ExpandDefinitionsCommand jarg1_);
  public final static native void delete_ExpandDefinitionsCommand(long jarg1);
  public final static native long new_GetValueCommand__SWIG_0(long jarg1, Expr jarg1_);
  public final static native long new_GetValueCommand__SWIG_1(long jarg1, vectorExpr jarg1_);
  public final static native long GetValueCommand_getTerms(long jarg1, GetValueCommand jarg1_);
  public final static native long GetValueCommand_getResult(long jarg1, GetValueCommand jarg1_);
  public final static native void GetValueCommand_invoke(long jarg1, GetValueCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void GetValueCommand_printResult__SWIG_0(long jarg1, GetValueCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetValueCommand_printResult__SWIG_1(long jarg1, GetValueCommand jarg1_, long jarg2);
  public final static native long GetValueCommand_exportTo(long jarg1, GetValueCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetValueCommand_clone(long jarg1, GetValueCommand jarg1_);
  public final static native String GetValueCommand_getCommandName(long jarg1, GetValueCommand jarg1_);
  public final static native void delete_GetValueCommand(long jarg1);
  public final static native long new_GetAssignmentCommand();
  public final static native long GetAssignmentCommand_getResult(long jarg1, GetAssignmentCommand jarg1_);
  public final static native void GetAssignmentCommand_invoke(long jarg1, GetAssignmentCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void GetAssignmentCommand_printResult__SWIG_0(long jarg1, GetAssignmentCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetAssignmentCommand_printResult__SWIG_1(long jarg1, GetAssignmentCommand jarg1_, long jarg2);
  public final static native long GetAssignmentCommand_exportTo(long jarg1, GetAssignmentCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetAssignmentCommand_clone(long jarg1, GetAssignmentCommand jarg1_);
  public final static native String GetAssignmentCommand_getCommandName(long jarg1, GetAssignmentCommand jarg1_);
  public final static native void delete_GetAssignmentCommand(long jarg1);
  public final static native long new_GetModelCommand();
  public final static native void GetModelCommand_invoke(long jarg1, GetModelCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void GetModelCommand_printResult__SWIG_0(long jarg1, GetModelCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetModelCommand_printResult__SWIG_1(long jarg1, GetModelCommand jarg1_, long jarg2);
  public final static native long GetModelCommand_exportTo(long jarg1, GetModelCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetModelCommand_clone(long jarg1, GetModelCommand jarg1_);
  public final static native String GetModelCommand_getCommandName(long jarg1, GetModelCommand jarg1_);
  public final static native void delete_GetModelCommand(long jarg1);
  public final static native long new_GetInstantiationsCommand();
  public final static native void GetInstantiationsCommand_invoke(long jarg1, GetInstantiationsCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void GetInstantiationsCommand_printResult__SWIG_0(long jarg1, GetInstantiationsCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetInstantiationsCommand_printResult__SWIG_1(long jarg1, GetInstantiationsCommand jarg1_, long jarg2);
  public final static native long GetInstantiationsCommand_exportTo(long jarg1, GetInstantiationsCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetInstantiationsCommand_clone(long jarg1, GetInstantiationsCommand jarg1_);
  public final static native String GetInstantiationsCommand_getCommandName(long jarg1, GetInstantiationsCommand jarg1_);
  public final static native void delete_GetInstantiationsCommand(long jarg1);
  public final static native long new_GetSynthSolutionCommand();
  public final static native void GetSynthSolutionCommand_invoke(long jarg1, GetSynthSolutionCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void GetSynthSolutionCommand_printResult__SWIG_0(long jarg1, GetSynthSolutionCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetSynthSolutionCommand_printResult__SWIG_1(long jarg1, GetSynthSolutionCommand jarg1_, long jarg2);
  public final static native long GetSynthSolutionCommand_exportTo(long jarg1, GetSynthSolutionCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetSynthSolutionCommand_clone(long jarg1, GetSynthSolutionCommand jarg1_);
  public final static native String GetSynthSolutionCommand_getCommandName(long jarg1, GetSynthSolutionCommand jarg1_);
  public final static native void delete_GetSynthSolutionCommand(long jarg1);
  public final static native long new_GetQuantifierEliminationCommand__SWIG_0();
  public final static native long new_GetQuantifierEliminationCommand__SWIG_1(long jarg1, Expr jarg1_, boolean jarg2);
  public final static native long GetQuantifierEliminationCommand_getExpr(long jarg1, GetQuantifierEliminationCommand jarg1_);
  public final static native boolean GetQuantifierEliminationCommand_getDoFull(long jarg1, GetQuantifierEliminationCommand jarg1_);
  public final static native void GetQuantifierEliminationCommand_invoke(long jarg1, GetQuantifierEliminationCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long GetQuantifierEliminationCommand_getResult(long jarg1, GetQuantifierEliminationCommand jarg1_);
  public final static native void GetQuantifierEliminationCommand_printResult__SWIG_0(long jarg1, GetQuantifierEliminationCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetQuantifierEliminationCommand_printResult__SWIG_1(long jarg1, GetQuantifierEliminationCommand jarg1_, long jarg2);
  public final static native long GetQuantifierEliminationCommand_exportTo(long jarg1, GetQuantifierEliminationCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetQuantifierEliminationCommand_clone(long jarg1, GetQuantifierEliminationCommand jarg1_);
  public final static native String GetQuantifierEliminationCommand_getCommandName(long jarg1, GetQuantifierEliminationCommand jarg1_);
  public final static native void delete_GetQuantifierEliminationCommand(long jarg1);
  public final static native long new_GetUnsatAssumptionsCommand();
  public final static native void GetUnsatAssumptionsCommand_invoke(long jarg1, GetUnsatAssumptionsCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long GetUnsatAssumptionsCommand_getResult(long jarg1, GetUnsatAssumptionsCommand jarg1_);
  public final static native void GetUnsatAssumptionsCommand_printResult__SWIG_0(long jarg1, GetUnsatAssumptionsCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetUnsatAssumptionsCommand_printResult__SWIG_1(long jarg1, GetUnsatAssumptionsCommand jarg1_, long jarg2);
  public final static native long GetUnsatAssumptionsCommand_exportTo(long jarg1, GetUnsatAssumptionsCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetUnsatAssumptionsCommand_clone(long jarg1, GetUnsatAssumptionsCommand jarg1_);
  public final static native String GetUnsatAssumptionsCommand_getCommandName(long jarg1, GetUnsatAssumptionsCommand jarg1_);
  public final static native void delete_GetUnsatAssumptionsCommand(long jarg1);
  public final static native long new_GetUnsatCoreCommand();
  public final static native long GetUnsatCoreCommand_getUnsatCore(long jarg1, GetUnsatCoreCommand jarg1_);
  public final static native void GetUnsatCoreCommand_invoke(long jarg1, GetUnsatCoreCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void GetUnsatCoreCommand_printResult__SWIG_0(long jarg1, GetUnsatCoreCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetUnsatCoreCommand_printResult__SWIG_1(long jarg1, GetUnsatCoreCommand jarg1_, long jarg2);
  public final static native long GetUnsatCoreCommand_exportTo(long jarg1, GetUnsatCoreCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetUnsatCoreCommand_clone(long jarg1, GetUnsatCoreCommand jarg1_);
  public final static native String GetUnsatCoreCommand_getCommandName(long jarg1, GetUnsatCoreCommand jarg1_);
  public final static native void delete_GetUnsatCoreCommand(long jarg1);
  public final static native long new_GetAssertionsCommand();
  public final static native void GetAssertionsCommand_invoke(long jarg1, GetAssertionsCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native String GetAssertionsCommand_getResult(long jarg1, GetAssertionsCommand jarg1_);
  public final static native void GetAssertionsCommand_printResult__SWIG_0(long jarg1, GetAssertionsCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetAssertionsCommand_printResult__SWIG_1(long jarg1, GetAssertionsCommand jarg1_, long jarg2);
  public final static native long GetAssertionsCommand_exportTo(long jarg1, GetAssertionsCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetAssertionsCommand_clone(long jarg1, GetAssertionsCommand jarg1_);
  public final static native String GetAssertionsCommand_getCommandName(long jarg1, GetAssertionsCommand jarg1_);
  public final static native void delete_GetAssertionsCommand(long jarg1);
  public final static native long new_SetBenchmarkStatusCommand(int jarg1);
  public final static native int SetBenchmarkStatusCommand_getStatus(long jarg1, SetBenchmarkStatusCommand jarg1_);
  public final static native void SetBenchmarkStatusCommand_invoke(long jarg1, SetBenchmarkStatusCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SetBenchmarkStatusCommand_exportTo(long jarg1, SetBenchmarkStatusCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SetBenchmarkStatusCommand_clone(long jarg1, SetBenchmarkStatusCommand jarg1_);
  public final static native String SetBenchmarkStatusCommand_getCommandName(long jarg1, SetBenchmarkStatusCommand jarg1_);
  public final static native void delete_SetBenchmarkStatusCommand(long jarg1);
  public final static native long new_SetBenchmarkLogicCommand(String jarg1);
  public final static native String SetBenchmarkLogicCommand_getLogic(long jarg1, SetBenchmarkLogicCommand jarg1_);
  public final static native void SetBenchmarkLogicCommand_invoke(long jarg1, SetBenchmarkLogicCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SetBenchmarkLogicCommand_exportTo(long jarg1, SetBenchmarkLogicCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SetBenchmarkLogicCommand_clone(long jarg1, SetBenchmarkLogicCommand jarg1_);
  public final static native String SetBenchmarkLogicCommand_getCommandName(long jarg1, SetBenchmarkLogicCommand jarg1_);
  public final static native void delete_SetBenchmarkLogicCommand(long jarg1);
  public final static native long new_SetInfoCommand(String jarg1, long jarg2, SExpr jarg2_);
  public final static native String SetInfoCommand_getFlag(long jarg1, SetInfoCommand jarg1_);
  public final static native long SetInfoCommand_getSExpr(long jarg1, SetInfoCommand jarg1_);
  public final static native void SetInfoCommand_invoke(long jarg1, SetInfoCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SetInfoCommand_exportTo(long jarg1, SetInfoCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SetInfoCommand_clone(long jarg1, SetInfoCommand jarg1_);
  public final static native String SetInfoCommand_getCommandName(long jarg1, SetInfoCommand jarg1_);
  public final static native void delete_SetInfoCommand(long jarg1);
  public final static native long new_GetInfoCommand(String jarg1);
  public final static native String GetInfoCommand_getFlag(long jarg1, GetInfoCommand jarg1_);
  public final static native String GetInfoCommand_getResult(long jarg1, GetInfoCommand jarg1_);
  public final static native void GetInfoCommand_invoke(long jarg1, GetInfoCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void GetInfoCommand_printResult__SWIG_0(long jarg1, GetInfoCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetInfoCommand_printResult__SWIG_1(long jarg1, GetInfoCommand jarg1_, long jarg2);
  public final static native long GetInfoCommand_exportTo(long jarg1, GetInfoCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetInfoCommand_clone(long jarg1, GetInfoCommand jarg1_);
  public final static native String GetInfoCommand_getCommandName(long jarg1, GetInfoCommand jarg1_);
  public final static native void delete_GetInfoCommand(long jarg1);
  public final static native long new_SetOptionCommand(String jarg1, long jarg2, SExpr jarg2_);
  public final static native String SetOptionCommand_getFlag(long jarg1, SetOptionCommand jarg1_);
  public final static native long SetOptionCommand_getSExpr(long jarg1, SetOptionCommand jarg1_);
  public final static native void SetOptionCommand_invoke(long jarg1, SetOptionCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SetOptionCommand_exportTo(long jarg1, SetOptionCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SetOptionCommand_clone(long jarg1, SetOptionCommand jarg1_);
  public final static native String SetOptionCommand_getCommandName(long jarg1, SetOptionCommand jarg1_);
  public final static native void delete_SetOptionCommand(long jarg1);
  public final static native long new_GetOptionCommand(String jarg1);
  public final static native String GetOptionCommand_getFlag(long jarg1, GetOptionCommand jarg1_);
  public final static native String GetOptionCommand_getResult(long jarg1, GetOptionCommand jarg1_);
  public final static native void GetOptionCommand_invoke(long jarg1, GetOptionCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void GetOptionCommand_printResult__SWIG_0(long jarg1, GetOptionCommand jarg1_, long jarg2, long jarg3);
  public final static native void GetOptionCommand_printResult__SWIG_1(long jarg1, GetOptionCommand jarg1_, long jarg2);
  public final static native long GetOptionCommand_exportTo(long jarg1, GetOptionCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long GetOptionCommand_clone(long jarg1, GetOptionCommand jarg1_);
  public final static native String GetOptionCommand_getCommandName(long jarg1, GetOptionCommand jarg1_);
  public final static native void delete_GetOptionCommand(long jarg1);
  public final static native long new_SetExpressionNameCommand(long jarg1, Expr jarg1_, String jarg2);
  public final static native void SetExpressionNameCommand_invoke(long jarg1, SetExpressionNameCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long SetExpressionNameCommand_exportTo(long jarg1, SetExpressionNameCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long SetExpressionNameCommand_clone(long jarg1, SetExpressionNameCommand jarg1_);
  public final static native String SetExpressionNameCommand_getCommandName(long jarg1, SetExpressionNameCommand jarg1_);
  public final static native void delete_SetExpressionNameCommand(long jarg1);
  public final static native long new_DatatypeDeclarationCommand__SWIG_0(long jarg1, DatatypeType jarg1_);
  public final static native long new_DatatypeDeclarationCommand__SWIG_1(long jarg1, vectorDatatypeType jarg1_);
  public final static native long DatatypeDeclarationCommand_getDatatypes(long jarg1, DatatypeDeclarationCommand jarg1_);
  public final static native void DatatypeDeclarationCommand_invoke(long jarg1, DatatypeDeclarationCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long DatatypeDeclarationCommand_exportTo(long jarg1, DatatypeDeclarationCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long DatatypeDeclarationCommand_clone(long jarg1, DatatypeDeclarationCommand jarg1_);
  public final static native String DatatypeDeclarationCommand_getCommandName(long jarg1, DatatypeDeclarationCommand jarg1_);
  public final static native void delete_DatatypeDeclarationCommand(long jarg1);
  public final static native long new_RewriteRuleCommand__SWIG_0(long jarg1, vectorExpr jarg1_, long jarg2, vectorExpr jarg2_, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_, long jarg5, vectorVectorExpr jarg5_);
  public final static native long new_RewriteRuleCommand__SWIG_1(long jarg1, vectorExpr jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_);
  public final static native long RewriteRuleCommand_getVars(long jarg1, RewriteRuleCommand jarg1_);
  public final static native long RewriteRuleCommand_getGuards(long jarg1, RewriteRuleCommand jarg1_);
  public final static native long RewriteRuleCommand_getHead(long jarg1, RewriteRuleCommand jarg1_);
  public final static native long RewriteRuleCommand_getBody(long jarg1, RewriteRuleCommand jarg1_);
  public final static native long RewriteRuleCommand_getTriggers(long jarg1, RewriteRuleCommand jarg1_);
  public final static native void RewriteRuleCommand_invoke(long jarg1, RewriteRuleCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long RewriteRuleCommand_exportTo(long jarg1, RewriteRuleCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long RewriteRuleCommand_clone(long jarg1, RewriteRuleCommand jarg1_);
  public final static native String RewriteRuleCommand_getCommandName(long jarg1, RewriteRuleCommand jarg1_);
  public final static native void delete_RewriteRuleCommand(long jarg1);
  public final static native long new_PropagateRuleCommand__SWIG_0(long jarg1, vectorExpr jarg1_, long jarg2, vectorExpr jarg2_, long jarg3, vectorExpr jarg3_, long jarg4, Expr jarg4_, long jarg5, vectorVectorExpr jarg5_, boolean jarg6);
  public final static native long new_PropagateRuleCommand__SWIG_1(long jarg1, vectorExpr jarg1_, long jarg2, vectorExpr jarg2_, long jarg3, vectorExpr jarg3_, long jarg4, Expr jarg4_, long jarg5, vectorVectorExpr jarg5_);
  public final static native long new_PropagateRuleCommand__SWIG_2(long jarg1, vectorExpr jarg1_, long jarg2, vectorExpr jarg2_, long jarg3, Expr jarg3_, boolean jarg4);
  public final static native long new_PropagateRuleCommand__SWIG_3(long jarg1, vectorExpr jarg1_, long jarg2, vectorExpr jarg2_, long jarg3, Expr jarg3_);
  public final static native long PropagateRuleCommand_getVars(long jarg1, PropagateRuleCommand jarg1_);
  public final static native long PropagateRuleCommand_getGuards(long jarg1, PropagateRuleCommand jarg1_);
  public final static native long PropagateRuleCommand_getHeads(long jarg1, PropagateRuleCommand jarg1_);
  public final static native long PropagateRuleCommand_getBody(long jarg1, PropagateRuleCommand jarg1_);
  public final static native long PropagateRuleCommand_getTriggers(long jarg1, PropagateRuleCommand jarg1_);
  public final static native boolean PropagateRuleCommand_isDeduction(long jarg1, PropagateRuleCommand jarg1_);
  public final static native void PropagateRuleCommand_invoke(long jarg1, PropagateRuleCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long PropagateRuleCommand_exportTo(long jarg1, PropagateRuleCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long PropagateRuleCommand_clone(long jarg1, PropagateRuleCommand jarg1_);
  public final static native String PropagateRuleCommand_getCommandName(long jarg1, PropagateRuleCommand jarg1_);
  public final static native void delete_PropagateRuleCommand(long jarg1);
  public final static native long new_ResetCommand();
  public final static native void ResetCommand_invoke(long jarg1, ResetCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long ResetCommand_exportTo(long jarg1, ResetCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long ResetCommand_clone(long jarg1, ResetCommand jarg1_);
  public final static native String ResetCommand_getCommandName(long jarg1, ResetCommand jarg1_);
  public final static native void delete_ResetCommand(long jarg1);
  public final static native long new_ResetAssertionsCommand();
  public final static native void ResetAssertionsCommand_invoke(long jarg1, ResetAssertionsCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long ResetAssertionsCommand_exportTo(long jarg1, ResetAssertionsCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long ResetAssertionsCommand_clone(long jarg1, ResetAssertionsCommand jarg1_);
  public final static native String ResetAssertionsCommand_getCommandName(long jarg1, ResetAssertionsCommand jarg1_);
  public final static native void delete_ResetAssertionsCommand(long jarg1);
  public final static native long new_QuitCommand();
  public final static native void QuitCommand_invoke(long jarg1, QuitCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long QuitCommand_exportTo(long jarg1, QuitCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long QuitCommand_clone(long jarg1, QuitCommand jarg1_);
  public final static native String QuitCommand_getCommandName(long jarg1, QuitCommand jarg1_);
  public final static native void delete_QuitCommand(long jarg1);
  public final static native long new_CommentCommand(String jarg1);
  public final static native String CommentCommand_getComment(long jarg1, CommentCommand jarg1_);
  public final static native void CommentCommand_invoke(long jarg1, CommentCommand jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native long CommentCommand_exportTo(long jarg1, CommentCommand jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long CommentCommand_clone(long jarg1, CommentCommand jarg1_);
  public final static native String CommentCommand_getCommandName(long jarg1, CommentCommand jarg1_);
  public final static native void delete_CommentCommand(long jarg1);
  public final static native long new_CommandSequence();
  public final static native void delete_CommandSequence(long jarg1);
  public final static native void CommandSequence_addCommand(long jarg1, CommandSequence jarg1_, long jarg2, Command jarg2_);
  public final static native void CommandSequence_clear(long jarg1, CommandSequence jarg1_);
  public final static native void CommandSequence_invoke__SWIG_0(long jarg1, CommandSequence jarg1_, long jarg2, SmtEngine jarg2_);
  public final static native void CommandSequence_invoke__SWIG_1(long jarg1, CommandSequence jarg1_, long jarg2, SmtEngine jarg2_, long jarg3);
  public final static native long CommandSequence_exportTo(long jarg1, CommandSequence jarg1_, long jarg2, ExprManager jarg2_, long jarg3, ExprManagerMapCollection jarg3_);
  public final static native long CommandSequence_clone(long jarg1, CommandSequence jarg1_);
  public final static native String CommandSequence_getCommandName(long jarg1, CommandSequence jarg1_);
  public final static native long CommandSequence_iterator(long jarg1, CommandSequence jarg1_);
  public final static native long new_DeclarationSequence();
  public final static native void delete_DeclarationSequence(long jarg1);
  public final static native long new_JavaIteratorAdapter_CommandSequence(long jarg1, CommandSequence jarg1_);
  public final static native boolean JavaIteratorAdapter_CommandSequence_hasNext(long jarg1, JavaIteratorAdapter_CommandSequence jarg1_);
  public final static native edu.nyu.acsys.CVC4.Command JavaIteratorAdapter_CommandSequence_getNext(long jarg1, JavaIteratorAdapter_CommandSequence jarg1_);
  public final static native void delete_JavaIteratorAdapter_CommandSequence(long jarg1);
  public final static native long new_LogicException__SWIG_0();
  public final static native long new_LogicException__SWIG_1(String jarg1);
  public final static native void delete_LogicException(long jarg1);
  public final static native long new_LogicInfo__SWIG_0();
  public final static native long new_LogicInfo__SWIG_1(String jarg1);
  public final static native String LogicInfo_getLogicString(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_isSharingEnabled(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_isTheoryEnabled(long jarg1, LogicInfo jarg1_, int jarg2);
  public final static native boolean LogicInfo_isQuantified(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_hasEverything(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_hasNothing(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_isPure(long jarg1, LogicInfo jarg1_, int jarg2);
  public final static native boolean LogicInfo_areIntegersUsed(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_areRealsUsed(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_areTranscendentalsUsed(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_isLinear(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_isDifferenceLogic(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_hasCardinalityConstraints(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_isHigherOrder(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_setLogicString(long jarg1, LogicInfo jarg1_, String jarg2);
  public final static native void LogicInfo_enableEverything(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_disableEverything(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_enableTheory(long jarg1, LogicInfo jarg1_, int jarg2);
  public final static native void LogicInfo_disableTheory(long jarg1, LogicInfo jarg1_, int jarg2);
  public final static native void LogicInfo_enableQuantifiers(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_disableQuantifiers(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_enableIntegers(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_disableIntegers(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_enableReals(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_disableReals(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_arithTranscendentals(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_arithOnlyDifference(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_arithOnlyLinear(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_arithNonLinear(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_enableCardinalityConstraints(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_disableCardinalityConstraints(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_enableHigherOrder(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_disableHigherOrder(long jarg1, LogicInfo jarg1_);
  public final static native void LogicInfo_lock(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_isLocked(long jarg1, LogicInfo jarg1_);
  public final static native long LogicInfo_getUnlockedCopy(long jarg1, LogicInfo jarg1_);
  public final static native boolean LogicInfo_equals(long jarg1, LogicInfo jarg1_, long jarg2, LogicInfo jarg2_);
  public final static native boolean LogicInfo_greater(long jarg1, LogicInfo jarg1_, long jarg2, LogicInfo jarg2_);
  public final static native boolean LogicInfo_less(long jarg1, LogicInfo jarg1_, long jarg2, LogicInfo jarg2_);
  public final static native boolean LogicInfo_lessEqual(long jarg1, LogicInfo jarg1_, long jarg2, LogicInfo jarg2_);
  public final static native boolean LogicInfo_greaterEqual(long jarg1, LogicInfo jarg1_, long jarg2, LogicInfo jarg2_);
  public final static native boolean LogicInfo_isComparableTo(long jarg1, LogicInfo jarg1_, long jarg2, LogicInfo jarg2_);
  public final static native void delete_LogicInfo(long jarg1);
  public final static native Object mkRef(Object jarg1);
  public final static native void dlRef(Object jarg1);
  public final static native long new_SmtEngine(long jarg1, ExprManager jarg1_);
  public final static native void delete_SmtEngine(long jarg1);
  public final static native boolean SmtEngine_isFullyInited(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_setLogic__SWIG_0(long jarg1, SmtEngine jarg1_, String jarg2);
  public final static native void SmtEngine_setLogic__SWIG_1(long jarg1, SmtEngine jarg1_, long jarg2, LogicInfo jarg2_);
  public final static native long SmtEngine_getLogicInfo(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_setInfo(long jarg1, SmtEngine jarg1_, String jarg2, long jarg3, SExpr jarg3_);
  public final static native long SmtEngine_getInfo(long jarg1, SmtEngine jarg1_, String jarg2);
  public final static native void SmtEngine_setOption(long jarg1, SmtEngine jarg1_, String jarg2, long jarg3, SExpr jarg3_);
  public final static native void SmtEngine_setIsInternalSubsolver(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_setFilename(long jarg1, SmtEngine jarg1_, String jarg2);
  public final static native String SmtEngine_getFilename(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getModel(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getSepHeapExpr(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getSepNilExpr(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getOption(long jarg1, SmtEngine jarg1_, String jarg2);
  public final static native void SmtEngine_defineFunction(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, long jarg3, vectorExpr jarg3_, long jarg4, Expr jarg4_);
  public final static native boolean SmtEngine_isDefinedFunction(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native void SmtEngine_defineFunctionsRec(long jarg1, SmtEngine jarg1_, long jarg2, vectorExpr jarg2_, long jarg3, vectorVectorExpr jarg3_, long jarg4, vectorExpr jarg4_);
  public final static native void SmtEngine_defineFunctionRec(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, long jarg3, vectorExpr jarg3_, long jarg4, Expr jarg4_);
  public final static native long SmtEngine_assertFormula__SWIG_0(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, boolean jarg3);
  public final static native long SmtEngine_assertFormula__SWIG_1(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native long SmtEngine_query__SWIG_0(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, boolean jarg3);
  public final static native long SmtEngine_query__SWIG_1(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native long SmtEngine_query__SWIG_2(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_query__SWIG_3(long jarg1, SmtEngine jarg1_, long jarg2, vectorExpr jarg2_, boolean jarg3);
  public final static native long SmtEngine_query__SWIG_4(long jarg1, SmtEngine jarg1_, long jarg2, vectorExpr jarg2_);
  public final static native long SmtEngine_checkSat__SWIG_0(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, boolean jarg3);
  public final static native long SmtEngine_checkSat__SWIG_1(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native long SmtEngine_checkSat__SWIG_2(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_checkSat__SWIG_3(long jarg1, SmtEngine jarg1_, long jarg2, vectorExpr jarg2_, boolean jarg3);
  public final static native long SmtEngine_checkSat__SWIG_4(long jarg1, SmtEngine jarg1_, long jarg2, vectorExpr jarg2_);
  public final static native long SmtEngine_getUnsatAssumptions(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_declareSygusVar(long jarg1, SmtEngine jarg1_, String jarg2, long jarg3, Expr jarg3_, long jarg4, Type jarg4_);
  public final static native void SmtEngine_declareSygusPrimedVar(long jarg1, SmtEngine jarg1_, String jarg2, long jarg3, Type jarg3_);
  public final static native void SmtEngine_declareSygusFunctionVar(long jarg1, SmtEngine jarg1_, String jarg2, long jarg3, Expr jarg3_, long jarg4, Type jarg4_);
  public final static native void SmtEngine_declareSynthFun(long jarg1, SmtEngine jarg1_, String jarg2, long jarg3, Expr jarg3_, long jarg4, Type jarg4_, boolean jarg5, long jarg6, vectorExpr jarg6_);
  public final static native void SmtEngine_assertSygusConstraint(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native void SmtEngine_assertSygusInvConstraint(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, long jarg3, Expr jarg3_, long jarg4, Expr jarg4_, long jarg5, Expr jarg5_);
  public final static native long SmtEngine_checkSynth(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_simplify(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native long SmtEngine_expandDefinitions(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native long SmtEngine_getValue(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native boolean SmtEngine_addToAssignment(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_);
  public final static native long SmtEngine_getAssignment(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getProof(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_printInstantiations(long jarg1, SmtEngine jarg1_, long jarg2);
  public final static native void SmtEngine_printSynthSolution(long jarg1, SmtEngine jarg1_, long jarg2);
  public final static native void SmtEngine_getSynthSolutions(long jarg1, SmtEngine jarg1_, long jarg2);
  public final static native long SmtEngine_doQuantifierElimination__SWIG_0(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, boolean jarg3, boolean jarg4);
  public final static native long SmtEngine_doQuantifierElimination__SWIG_1(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, boolean jarg3);
  public final static native void SmtEngine_getInstantiatedQuantifiedFormulas(long jarg1, SmtEngine jarg1_, long jarg2, vectorExpr jarg2_);
  public final static native void SmtEngine_getInstantiations(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, long jarg3, vectorExpr jarg3_);
  public final static native void SmtEngine_getInstantiationTermVectors(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, long jarg3, vectorVectorExpr jarg3_);
  public final static native long SmtEngine_getUnsatCore(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getAssertions(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_push(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_pop(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_reset(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_resetAssertions(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_interrupt(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_setResourceLimit__SWIG_0(long jarg1, SmtEngine jarg1_, long jarg2, boolean jarg3);
  public final static native void SmtEngine_setResourceLimit__SWIG_1(long jarg1, SmtEngine jarg1_, long jarg2);
  public final static native void SmtEngine_setTimeLimit__SWIG_0(long jarg1, SmtEngine jarg1_, long jarg2, boolean jarg3);
  public final static native void SmtEngine_setTimeLimit__SWIG_1(long jarg1, SmtEngine jarg1_, long jarg2);
  public final static native long SmtEngine_getResourceUsage(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getTimeUsage(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getResourceRemaining(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getTimeRemaining(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getExprManager(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getStatistics(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_getStatistic(long jarg1, SmtEngine jarg1_, String jarg2);
  public final static native void SmtEngine_safeFlushStatistics(long jarg1, SmtEngine jarg1_, int jarg2);
  public final static native long SmtEngine_getStatusOfLastCommand(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_setUserAttribute(long jarg1, SmtEngine jarg1_, String jarg2, long jarg3, Expr jarg3_, long jarg4, vectorExpr jarg4_, String jarg5);
  public final static native void SmtEngine_setPrintFuncInModel(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, boolean jarg3);
  public final static native void SmtEngine_beforeSearch(long jarg1, SmtEngine jarg1_);
  public final static native long SmtEngine_channels(long jarg1, SmtEngine jarg1_);
  public final static native void SmtEngine_setReplayStream(long jarg1, SmtEngine jarg1_, long jarg2, ExprStream jarg2_);
  public final static native boolean SmtEngine_getExpressionName(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, long jarg3);
  public final static native void SmtEngine_setExpressionName(long jarg1, SmtEngine jarg1_, long jarg2, Expr jarg2_, String jarg3);
  public final static native long CVC4IllegalArgumentException_SWIGUpcast(long jarg1);
  public final static native long ModalException_SWIGUpcast(long jarg1);
  public final static native long RecoverableModalException_SWIGUpcast(long jarg1);
  public final static native long Statistics_SWIGUpcast(long jarg1);
  public final static native long UnsafeInterruptException_SWIGUpcast(long jarg1);
  public final static native long BooleanType_SWIGUpcast(long jarg1);
  public final static native long IntegerType_SWIGUpcast(long jarg1);
  public final static native long RealType_SWIGUpcast(long jarg1);
  public final static native long StringType_SWIGUpcast(long jarg1);
  public final static native long RegExpType_SWIGUpcast(long jarg1);
  public final static native long RoundingModeType_SWIGUpcast(long jarg1);
  public final static native long FunctionType_SWIGUpcast(long jarg1);
  public final static native long SExprType_SWIGUpcast(long jarg1);
  public final static native long ArrayType_SWIGUpcast(long jarg1);
  public final static native long SetType_SWIGUpcast(long jarg1);
  public final static native long SortType_SWIGUpcast(long jarg1);
  public final static native long SortConstructorType_SWIGUpcast(long jarg1);
  public final static native long BitVectorType_SWIGUpcast(long jarg1);
  public final static native long FloatingPointType_SWIGUpcast(long jarg1);
  public final static native long DatatypeType_SWIGUpcast(long jarg1);
  public final static native long ConstructorType_SWIGUpcast(long jarg1);
  public final static native long SelectorType_SWIGUpcast(long jarg1);
  public final static native long TesterType_SWIGUpcast(long jarg1);
  public final static native long DatatypeResolutionException_SWIGUpcast(long jarg1);
  public final static native long TypeCheckingException_SWIGUpcast(long jarg1);
  public final static native long ExportUnsupportedException_SWIGUpcast(long jarg1);
  public final static native long ScopeException_SWIGUpcast(long jarg1);
  public final static native long OptionException_SWIGUpcast(long jarg1);
  public final static native long UnrecognizedOptionException_SWIGUpcast(long jarg1);
  public final static native long ParserException_SWIGUpcast(long jarg1);
  public final static native long ParserEndOfFileException_SWIGUpcast(long jarg1);
  public final static native long InputStreamException_SWIGUpcast(long jarg1);
  public final static native long ParserExprStream_SWIGUpcast(long jarg1);
  public final static native long CommandSuccess_SWIGUpcast(long jarg1);
  public final static native long CommandInterrupted_SWIGUpcast(long jarg1);
  public final static native long CommandUnsupported_SWIGUpcast(long jarg1);
  public final static native long CommandFailure_SWIGUpcast(long jarg1);
  public final static native long CommandRecoverableFailure_SWIGUpcast(long jarg1);
  public final static native long EmptyCommand_SWIGUpcast(long jarg1);
  public final static native long EchoCommand_SWIGUpcast(long jarg1);
  public final static native long AssertCommand_SWIGUpcast(long jarg1);
  public final static native long PushCommand_SWIGUpcast(long jarg1);
  public final static native long PopCommand_SWIGUpcast(long jarg1);
  public final static native long DeclarationDefinitionCommand_SWIGUpcast(long jarg1);
  public final static native long DeclareFunctionCommand_SWIGUpcast(long jarg1);
  public final static native long DeclareTypeCommand_SWIGUpcast(long jarg1);
  public final static native long DefineTypeCommand_SWIGUpcast(long jarg1);
  public final static native long DefineFunctionCommand_SWIGUpcast(long jarg1);
  public final static native long DefineNamedFunctionCommand_SWIGUpcast(long jarg1);
  public final static native long DefineFunctionRecCommand_SWIGUpcast(long jarg1);
  public final static native long SetUserAttributeCommand_SWIGUpcast(long jarg1);
  public final static native long CheckSatCommand_SWIGUpcast(long jarg1);
  public final static native long CheckSatAssumingCommand_SWIGUpcast(long jarg1);
  public final static native long QueryCommand_SWIGUpcast(long jarg1);
  public final static native long DeclareSygusVarCommand_SWIGUpcast(long jarg1);
  public final static native long DeclareSygusPrimedVarCommand_SWIGUpcast(long jarg1);
  public final static native long DeclareSygusFunctionCommand_SWIGUpcast(long jarg1);
  public final static native long SynthFunCommand_SWIGUpcast(long jarg1);
  public final static native long SygusConstraintCommand_SWIGUpcast(long jarg1);
  public final static native long SygusInvConstraintCommand_SWIGUpcast(long jarg1);
  public final static native long CheckSynthCommand_SWIGUpcast(long jarg1);
  public final static native long SimplifyCommand_SWIGUpcast(long jarg1);
  public final static native long ExpandDefinitionsCommand_SWIGUpcast(long jarg1);
  public final static native long GetValueCommand_SWIGUpcast(long jarg1);
  public final static native long GetAssignmentCommand_SWIGUpcast(long jarg1);
  public final static native long GetModelCommand_SWIGUpcast(long jarg1);
  public final static native long GetInstantiationsCommand_SWIGUpcast(long jarg1);
  public final static native long GetSynthSolutionCommand_SWIGUpcast(long jarg1);
  public final static native long GetQuantifierEliminationCommand_SWIGUpcast(long jarg1);
  public final static native long GetUnsatAssumptionsCommand_SWIGUpcast(long jarg1);
  public final static native long GetUnsatCoreCommand_SWIGUpcast(long jarg1);
  public final static native long GetAssertionsCommand_SWIGUpcast(long jarg1);
  public final static native long SetBenchmarkStatusCommand_SWIGUpcast(long jarg1);
  public final static native long SetBenchmarkLogicCommand_SWIGUpcast(long jarg1);
  public final static native long SetInfoCommand_SWIGUpcast(long jarg1);
  public final static native long GetInfoCommand_SWIGUpcast(long jarg1);
  public final static native long SetOptionCommand_SWIGUpcast(long jarg1);
  public final static native long GetOptionCommand_SWIGUpcast(long jarg1);
  public final static native long SetExpressionNameCommand_SWIGUpcast(long jarg1);
  public final static native long DatatypeDeclarationCommand_SWIGUpcast(long jarg1);
  public final static native long RewriteRuleCommand_SWIGUpcast(long jarg1);
  public final static native long PropagateRuleCommand_SWIGUpcast(long jarg1);
  public final static native long ResetCommand_SWIGUpcast(long jarg1);
  public final static native long ResetAssertionsCommand_SWIGUpcast(long jarg1);
  public final static native long QuitCommand_SWIGUpcast(long jarg1);
  public final static native long CommentCommand_SWIGUpcast(long jarg1);
  public final static native long CommandSequence_SWIGUpcast(long jarg1);
  public final static native long DeclarationSequence_SWIGUpcast(long jarg1);
  public final static native long LogicException_SWIGUpcast(long jarg1);
}
